{"version":3,"sources":["app/api/agent.ts","app/stores/ticketStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","features/utils/helperMethods.ts","app/stores/groupStore.ts","app/stores/store.ts","app/stores/commonStore.ts","features/errors/ServerError.tsx","features/groups/List/GroupListExplainer.tsx","features/groups/List/GroupSummary.tsx","app/common/form/TextInput.tsx","app/common/form/TextAreaInput.tsx","app/common/form/FormCheckbox.tsx","features/groups/Form/GroupForm.tsx","app/layout/LoadingComponent.tsx","features/groups/Details/GroupAdminsList.tsx","features/groups/Details/GroupAnnouncement.tsx","features/groups/Details/GroupClickToComment.tsx","app/models/groups.ts","features/groups/Details/GroupDescriptionEdit.tsx","features/groups/Details/GroupDetailedChatFlow.tsx","features/groups/Details/GroupDetailsFooter.tsx","features/groups/Details/GroupDetailsHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/groups/Details/GroupUploadPhoto.tsx","features/groups/Details/GroupDetails.tsx","features/groups/List/GroupList.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","features/nav/NavBar.tsx","features/profiles/ProfileGroups.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileSettings.tsx","app/common/stylings/StatusCircle.tsx","features/profiles/ProfileTickets.tsx","features/profiles/ProfileContent.tsx","app/models/profile.ts","features/profiles/ProfileAbout.tsx","features/profiles/ProfileDescription.tsx","features/profiles/Profile.tsx","app/models/tickets.ts","app/common/form/SelectInput.tsx","app/common/message/MessageComponent.tsx","features/tickets/Details/FileRead.tsx","features/tickets/Details/PhotoModal.tsx","features/tickets/Form/TicketAttachementsContainer.tsx","features/tickets/Form/TicketUploadPhoto.tsx","features/tickets/Form/TicketForm.tsx","features/tickets/Details/TicketAddComment.tsx","features/tickets/Details/TicketCommentEdit.tsx","features/tickets/Details/TicketComment.tsx","features/tickets/Form/TicketPhotoContainer.tsx","features/tickets/Form/UploadHoc.tsx","features/tickets/Details/TicketDetails.tsx","features/tickets/Details/TicketFullDetails.tsx","features/tickets/List/StatusStats.tsx","features/tickets/List/SearchList.tsx","features/tickets/List/TicketList.tsx","app/layout/NotFound.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","a","console","log","status","data","message","history","push","method","errors","hasOwnProperty","flattenErrors","key","flat","includes","removeItem","url","store","commonStore","setServerError","responseBody","requests","get","then","post","body","put","del","delete","postForm","file","formData","FormData","blob","append","name","postTicketForm","ticket","postTicketForms","i","length","postTextForm","agent","Tickets","list","details","id","create","createWithPhoto","photo","createTicketMultiple","update","addComment","ticketId","comment","delComment","commentId","editComment","addPhoto","delPhoto","photoId","addTextFile","text","delTextFile","textId","Groups","group","join","leave","editMember","groupId","username","addAnnouncement","delAnnouncement","announcementId","uploadPhoto","deletePhoto","User","current","login","user","register","refreshToken","Profiles","setMainPhoto","editProfile","profile","TicketStore","tickets","selectedTicket","ticketFiles","ticketRegistry","Map","loadingTickets","submittingTicket","isAddingComment","isEditingComment","isDeletingComment","isAddingPhoto","isDeletingPhoto","isAddingText","isDeletingText","ticketListStats","isTicketCreatorOrAdmin","runInAction","groupStore","groupRegistry","size","loadGroups","isAdmin","isHostOrAdminOfGroup","members","filter","member","isHost","userStore","isCreator","creator","setSelectedTicket","setSelectedTicketFromId","loadTickets","open","closed","verify","forEach","date","split","toLowerCase","val√∫e","set","createTicket","fileToBlob","Blob","Uint8Array","arrayBuffer","type","setTicketFiles","images","image","sendThis","editTicket","oldTicketStatus","newTicketStatus","editTicketStatus","com","comments","deleteComment","retu","has","toJS","returnedPhoto","photos","updatedPhotos","returnedTextFile","texts","deleteTextFile","updatedTexts","makeAutoObservable","this","Array","from","values","slice","sort","b","Date","parse","UserStore","refreshTokenTimeout","isDeletingUser","setToken","startRefreshTokenTimer","logout","getUser","dateJoined","deleteAccount","stopRefreshTokenTimer","jwtToken","JSON","atob","timeout","exp","getTime","now","setTimeout","clearTimeout","ProfileStore","loadingProfile","uploadingPhoto","loadingMainPhotoSet","loadingProfileUpdate","loadProfile","currentProfile","displayName","bio","isMain","find","p","returnBlobFromFile","files","blub","GroupStore","observable","ref","loadingGroups","submittingAnnouncement","submittingGroup","selectedGroupId","loadingGroupPhoto","deletingGroupPhoto","isPromotingMember","isUploadingGroupEdit","createHubConnection","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","configureLogging","LogLevel","Information","build","start","state","invoke","catch","on","selectedGroup","stopHubConnection","stop","err","announcements","deleteAnnouncement","announcement","addAdminComment","sendValues","addAdmin","userName","groups","createdAt","createGroup","setSelectedGroup","editGroupDescription","setSelectedGroupEmpty","joinGroup","leaveGroup","groupName","charAt","localeCompare","map","grp","configure","enforceActions","ticketStore","appLoaded","setAppLoaded","reaction","setItem","profileStore","StoreContext","createContext","useStore","useContext","observer","Container","Header","as","content","color","sub","Segment","style","marginTop","GroupListExplainer","placeholder","icon","Image","src","alt","marginRight","width","height","description","Item","Group","margin","Content","verticalAlign","Divider","Description","Extra","Icon","Button","loading","positive","onClick","TextInput","input","meta","touched","Form","Field","autoComplete","Label","basic","TextAreaInput","rows","FormCheckbox","onChange","checked","label","Checkbox","evt","required","value","undefined","minLength","min","composeValidators","validators","reduce","validator","setCreatingGroup","useState","isPublic","toISOString","handleFinalFormSubmit","boolish","newGroup","uuid","justifyContent","initialValues","onSubmit","render","handleSubmit","invalid","pristine","validate","component","disabled","LoadingComponent","inverted","Dimmer","active","backgroundColor","Loader","backgroundImage","styles","borderColor","borderWidth","getOptions","avatar","admins","isHostOrAdmin","promotedMember","setPromotedMember","List","horizontal","relaxed","floated","marginLeft","Popup","header","trigger","bordered","circular","maxHeight","Dropdown","borderTopRightRadius","borderBottomRightRadius","minWidth","clearable","labeled","selection","options","e","statusValue","borderTopLeftRadius","borderBottomLeftRadius","paddingTop","paddingBottom","marginBottom","GroupAnnouncement","activeIndex","setActiveIndex","setIsAnnouncementId","deleteKey","setDeleteKey","border","Accordion","fluid","exclusive","Title","titleProps","index","handleClick","fontSize","formatDistance","whiteSpace","match","isAnnouncement","shouldComment","setShouldComment","submitAnnouncement","val","Comment","submitting","form","reset","labelPosition","primary","GroupDescriptionValues","GroupDescriptionEdit","profileData","setProfileData","useEffect","textAlign","attached","background","overflow","reverse","Avatar","Author","Link","to","Metadata","Text","fontStyle","dotStyles","borderRadius","display","GroupDetailsFooter","GroupDetailsHeader","setIsAddingPhoto","padding","Grid","columns","Column","rounded","Row","negative","GridColumn","dropzoneStyles","dropzoneActive","ticketButton","PhotoWidgetDropzone","setFiles","isTicket","children","onDrop","useCallback","acceptedFiles","Object","assign","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropperRef","useRef","initialAspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","imageElement","cropper","getCroppedCanvas","toBlob","isGroup","revokeObjectURL","className","minHeight","GroupUploadPhoto","isHostOfGroup","isEditingDescription","setIsEditingDescription","divided","clearing","useHistory","isProfileRedirect","location","isCreatingGroup","gottaLoadGroups","handleDropDownChange","stackable","defaultValue","groupTitles","align","fitted","centered","checkingGrp","isMemberFlag","isMember","groupsByDate","ErrorMessage","Message","LoginForm","FORM_ERROR","submitError","dirtySinceLastSubmit","RegisterForm","HomePage","isLoggedIn","vertical","Tab","menu","panes","menuItem","Pane","Menu","fixed","NavLink","exact","position","spaced","pointing","groupTitleForUser","pathname","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","deleteTarget","setDeleteTarget","handleUploadImage","Card","itemsPerRow","currentTarget","isOpen","setIsOpen","deleteUser","borderBottom","Modal","onClose","onOpen","Actions","primitive","StatusCircle","circleColor","isFilled","findColor","title","format","borderless","tabular","ProfileFormValues","init","setEditMode","ProfileDescription","userImage","editMode","params","loadstuff","TicketFormValues","device","bugType","priority","version","SelectInput","Select","MessageComponent","isShowingMessage","setIsShowingMessage","onDismiss","FileRead","fileString","setFileString","showFile","fetch","dataView","DataView","decoder","TextDecoder","decodedString","decode","PhotoModal","img","setIsModalOpen","isPhoto","href","flaoted","cursor","scrolling","idForSelectedImg","setIdForSelectedImg","isModalOpen","renderFiles","renderContent","isText","compact","toString","top","left","right","handleOnClick","newFiles","parseInt","LIMIT_FILESIZE","LIMIT_FILETYPE","LIMIT_FILETYPETEXT","isPreview","isImageTooBig","setIsImageTooBig","isBadFileType","setIsBadFileType","isTooBig","isBadFile","totalFileSize","item","priorityOptions","statusOptions","paragraphStyles","initialTicketState","setIsEditingTicket","groupTitleForUserOptions","loadGroup","createdAtdate","newTicket","TicketAddComment","TicketCommentEdit","commentBody","setIsEditComment","isEditComment","isSelectedComment","setIsSelectedComment","Meta","formatDistanceStrict","setFilesForForm","UploadHoc","toobig_message","badfile_message","buttonText","isAddingItem","addFile","isItemTooBig","setIsItemTooBig","isMoreThanOne","setIsMoreThanOne","LIMIT_TEXTFILETYPE","TicketPreview","entries","word","oKey","oValue","toUpperCase","selectedStatusColor","setSelectedStatusColor","isEditingTicket","handleStatusChange","outerButton","innerSpan","editingTicket","ticketStatus","isTicketAdminOrHost","replace","getGroups","groupStats","Statistic","widths","Value","initialState","results","exampleReducer","action","query","Error","SearchList","titleList","handleSearchResults","React","useReducer","dispatch","handleSearchChange","re","RegExp","titleResults","result","test","Search","onSearchChange","showNoResults","tagOptions","filterStatus","setFilterStatus","filterGroup","setGroupFilter","searchResultIds","setSearchResultIds","groupMemberPhoto","isFound","handleStatusClick","ticketsByDate","ticketIds","obj","arrayContains","NotFound","Inline","Component","rest","props","withRouter","autorun","finally","path","TicketList","TicketFullDetails","GroupList","TicketForm","Profile","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","useLocation","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.5edcf4de.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { history } from '../..';\r\nimport { IAnnouncement, IComment, IGroup } from '../models/groups';\r\nimport { IPhoto, IProfile, IProfileEdits } from '../models/profile';\r\nimport { ITicket, ITicketPhoto, ITicketText } from '../models/tickets';\r\nimport { IUser, IUserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config: any) => {\r\n    const token = window.localStorage.getItem(\"jwt\");\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n});\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    console.log(\"error: \", error.response);\r\n    \r\n    const {status, data, config, headers} = error.response!;\r\n    if (error.message === 'Network Error' && !error.response) {\r\n        history.push('/NoNet');\r\n    }\r\n\r\n    if (status === 400) {\r\n        if (typeof data === \"string\")\r\n            return Promise.reject(error.response);\r\n        if (config.method === 'get' && data.errors.hasOwnProperty('id'))\r\n            history.push('/notfound');\r\n        if (data.errors) {\r\n            const flattenErrors = [];\r\n            for (const key in data.errors) {\r\n                if (data.errors[key]) {\r\n                    flattenErrors.push(data.errors[key])\r\n                }\r\n            }\r\n            throw flattenErrors.flat();\r\n        }\r\n    } \r\n\r\n    if (status === 401 && headers['www-authenticate']?.includes('The token expired'))\r\n    {\r\n        window.localStorage.removeItem(\"jwt\");\r\n        history.push(\"/\");\r\n        console.log(\"Your session has expired, please login again\");\r\n        //console.log(error.response);\r\n    }\r\n    if (status === 401)\r\n    {\r\n        history.push(\"/\");\r\n    }     \r\n    if (status === 404 && config.url === \"/user/login\") {\r\n        return Promise.reject(error.response);\r\n    }\r\n    if (status === 400 && config.url === \"/user/login\") {\r\n        return Promise.reject(error.response);\r\n    }\r\n    if (status === 404) {\r\n        history.push('/notfound');\r\n    }\r\n\r\n    if (status === 500) {\r\n        store.commonStore.setServerError(data);\r\n        history.push('/server-error')\r\n    }\r\n    //throw error.response;\r\n    return Promise.reject(error.response);\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(responseBody),\r\n    postForm: async (url: string, file: any) => {\r\n        const formData = new FormData();\r\n        // Note: Keyword_must_be \"File\" \r\n        if (file.blob) {\r\n            formData.append(\"File\", file.blob, file.name);\r\n        } else {\r\n            formData.append(\"File\", file);\r\n        }\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-Type': \"multipart/form-data\"}\r\n        }).then(responseBody)\r\n    },\r\n    postTicketForm: async (url: string, ticket: any, file: any) => {\r\n        const formData = new FormData();\r\n        for (var key in ticket) {\r\n            formData.append(key, ticket[key]);\r\n        }\r\n        formData.append(\"File\", file.blob, file.name);\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-Type': \"multipart/form-data\"}\r\n        }).then(responseBody)\r\n    },\r\n    postTicketForms: async (url: string, ticket: any, data: Array<{blob: Blob, name: string}>) => {\r\n        const formData = new FormData();\r\n        for (var key in ticket) {\r\n            formData.append(key, ticket[key]);\r\n        }\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            formData.append(\"File\", data[i].blob, data[i].name);\r\n        }\r\n\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-Type': \"multipart/form-data\"}\r\n        }).then(responseBody)\r\n    },\r\n    postTextForm: async (url: string, file: Blob) => {\r\n        const formData = new FormData();\r\n        formData.append(\"File\", file);\r\n\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-Type': 'text/plain; charset=\"utf-8\"'}\r\n        }).then(responseBody)\r\n    },\r\n}\r\n\r\nconst Tickets = {\r\n    list: (): Promise<ITicket[]> => requests.get(\"/tickets\"),\r\n    details: (id: string) => requests.get(`/tickets/${id}`),\r\n    create: (ticket: ITicket) => requests.post(`/tickets`, ticket),\r\n    createWithPhoto: (ticket: ITicket, photo: Blob) => requests.postTicketForm(`/tickets/withPhoto`, ticket, photo),\r\n    createTicketMultiple: (ticket: ITicket, data: Array<{blob: Blob, name: string}>) => requests.postTicketForms(`/tickets/withPhoto`, ticket, data),\r\n    update: (ticket: ITicket) => requests.put(`/tickets/${ticket.id}`, ticket),\r\n    delete: (id: string) => requests.del(`/tickets/${id}`),\r\n    addComment: (ticketId: string, comment: IComment) => requests.post(`/tickets/comment/${ticketId}`, comment),\r\n    delComment: (ticketId: string, commentId: string) => requests.del(`/tickets/comment/${ticketId}/${commentId}`),\r\n    editComment: (ticketId: string, commentId: string, body: any) => requests.put(`/tickets/comment/${ticketId}/${commentId}`, body),\r\n    addPhoto: (ticketId: string, photo: Blob): Promise<ITicketPhoto> => requests.postForm(`/photos/tickets/${ticketId}`, photo),\r\n    delPhoto: (ticketId: string, photoId: string) => requests.del(`/photos/tickets/${ticketId}/${photoId}`),\r\n    addTextFile: (ticketId: string, text: Blob): Promise<ITicketText> => requests.postTextForm(`/texts/tickets/${ticketId}`, text),\r\n    delTextFile: (ticketId: string, textId: string) => requests.del(`/texts/tickets/${ticketId}/${textId}`)\r\n\r\n}\r\n\r\nconst Groups = {\r\n    list: (): Promise<IGroup[]> => requests.get(\"/groups\"),\r\n    details: (id: string) => requests.get(`/groups/${id}`),\r\n    create: (group: IGroup) => requests.post(`/groups`, group),\r\n    update: (group: IGroup) => requests.put(`/groups/${group.id}`, group),\r\n    delete: (id: string) => requests.del(`/groups/${id}`),\r\n    join: (id: string) => requests.post(`/groups/${id}/join`, {}),\r\n    leave: (id: string) => requests.del(`/groups/${id}/join`),\r\n    editMember: (groupId: string, username: {username: string}) => requests.put(`/groups/${groupId}/member`, username),\r\n    addAnnouncement: (id: string, body: IAnnouncement) => requests.post(`/groups/announcement/${id}`, body),\r\n    delAnnouncement: (groupId: string, announcementId: string) => requests.del(`/groups/announcement/${groupId}/${announcementId}`),\r\n    uploadPhoto: (id: string, photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/groups/${id}`, photo),\r\n    deletePhoto: (groupId: string, photoId: string) => requests.del(`/photos/groups/${groupId}/${photoId}`)\r\n}\r\n\r\nconst User = {\r\n    current: (): Promise<IUser> => requests.get('/user'),\r\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/login`, user),\r\n    delete: (user: string) => requests.del(`/user/delete/${user}`),\r\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/register`, user),\r\n    refreshToken: (): Promise<IUser> => requests.post(`/user/refreshToken`, {}),    \r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string): Promise<IProfile> => requests.get(`profiles/${username}`),\r\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos`, photo),\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    editProfile: (profile: IProfileEdits) => requests.put(`/profiles`, profile)\r\n}\r\nconst agent = { Tickets, Groups, User, Profiles };\r\n\r\nexport default agent;\r\n","import { makeAutoObservable, runInAction, toJS } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { IComment, IMember } from \"../models/groups\";\r\nimport { ITicket, ITicketPhoto, ITicketText } from \"../models/tickets\";\r\n\r\nimport { store } from \"./store\";\r\n\r\nexport default class TicketStore {\r\n \r\n\r\n    constructor() {\r\n     \r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    // @observable\r\n    tickets: ITicket[] = [];\r\n    selectedTicket: ITicket | null = null;\r\n    // Testing ticketFiles k.\r\n    ticketFiles: any[] = [];\r\n    ticketRegistry = new Map();\r\n    loadingTickets = false;\r\n    submittingTicket = false;\r\n    isAddingComment = false;\r\n    isEditingComment = false;\r\n    isDeletingComment = false;\r\n    isAddingPhoto = false;\r\n    isDeletingPhoto = false;\r\n    isAddingText = false;\r\n    isDeletingText = false;\r\n\r\n\r\n\r\n    ticketListStats: { [key: string]: number} = {\"open\": 0, \"closed\": 0, \"verify\": 0};\r\n\r\n    //@computed\r\n    get ticketsByDate() {\r\n        return Array.from(this.ticketRegistry.values()).slice().sort((a, b) => Date.parse(a.date) - Date.parse(b.date))\r\n    }\r\n\r\n    get allTickets() {\r\n        return Array.from(this.ticketRegistry.values());\r\n    }\r\n\r\n    isTicketCreatorOrAdmin =  () => {\r\n        // Requires that selected ticket is in selectedGroup.\r\n        runInAction(async () => {\r\n          /* *  if (this.rootStore.groupStore.groupRegistry.size === 0) {\r\n                await this.rootStore.groupStore.loadGroups();\r\n            }\r\n            */           \r\n            if (store.groupStore.groupRegistry.size === 0) {\r\n                await store.groupStore.loadGroups();\r\n            }\r\n            \r\n            \r\n        })\r\n        /* *const isAdmin = this.rootStore.groupStore.isHostOrAdminOfGroup || \r\n            this.rootStore.groupStore.groupRegistry.get(this.selectedTicket?.groupId)?.members.filter((member: IMember) => \r\n                member.isHost && member.username === this.rootStore.userStore.user?.username\r\n            ).length > 0; */\r\n        const isAdmin = store.groupStore.isHostOrAdminOfGroup || \r\n            store.groupStore.groupRegistry.get(this.selectedTicket?.groupId)?.members.filter((member: IMember) => \r\n                member.isHost && member.username === store.userStore.user?.username\r\n            ).length > 0;\r\n        // Is there another way to get isAdmin without groupStore without calling db?\r\n\r\n        // *const isCreator = this.selectedTicket?.creator === this.rootStore.userStore.user?.username;\r\n        const isCreator = this.selectedTicket?.creator === store.userStore.user?.username;\r\n        return isAdmin || isCreator;\r\n    }\r\n\r\n    setSelectedTicket = async (ticket: ITicket) => {\r\n        try {\r\n            runInAction(() => {\r\n                if (ticket)\r\n                    this.selectedTicket = ticket;\r\n                \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    setSelectedTicketFromId = async (ticketId: string) => {\r\n        try {\r\n            if (!this.ticketRegistry.get(ticketId))\r\n                await this.loadTickets();\r\n            let ticket = await this.ticketRegistry.get(ticketId);\r\n            runInAction(() => {\r\n                this.selectedTicket = ticket;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    // @action\r\n    loadTickets = async () => {\r\n        this.loadingTickets = true;\r\n        try {\r\n            const tickets = await agent.Tickets.list()\r\n\r\n            runInAction(() => {\r\n                // Reset ticketListStats to 0 before continuing to avoid duplication\r\n                // This is a temp solution, neaty up later.\r\n                this.ticketListStats.open = 0;\r\n                this.ticketListStats.closed = 0;\r\n                this.ticketListStats.verify = 0;\r\n                // push ticket on to registry and update status value.\r\n                tickets.forEach((ticket) => {\r\n                    ticket.date = ticket.date.split('.')[0]\r\n                    const key = ticket.status.toLowerCase();\r\n                    const val√∫e = this.ticketListStats[key] += 1;\r\n                    this.ticketListStats[key] = val√∫e;\r\n                    this.ticketRegistry.set(ticket.id, ticket)\r\n                });\r\n                this.loadingTickets = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(\"Error loadTickets in MobX store ticketStore, \", error);\r\n                this.loadingTickets = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    createTicket = async (ticket: ITicket) => {\r\n        this.submittingTicket = true;\r\n        try {\r\n            await agent.Tickets.create(ticket);\r\n            runInAction(() => {\r\n                // Maybe update stats list and force reload for ticketRegistry\r\n                this.ticketRegistry.set(ticket.id, ticket);\r\n                this.selectedTicket = ticket;\r\n                this.submittingTicket = false;\r\n            })\r\n            history.push('/issues');\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingTicket = false;\r\n                console.log(\"Error createTicket, \", error);\r\n            })\r\n        }\r\n    }\r\n    fileToBlob = async (file: any) => {\r\n        return new Blob([new Uint8Array(await file.arrayBuffer())], {\r\n            type: file.type,\r\n          });\r\n    }\r\n    setTicketFiles = async (photo: any) => {\r\n        //this.ticketFiles = photo;\r\n\r\n        if (photo.length > 0) {\r\n            let images: Array<{ blob: Blob; name: any }> = [];\r\n            for (var i = 0; i < photo.length; i++) {\r\n                //console.log(\"photo[i].type === \", photo[i].type, \" photo[i] = \", photo[i], [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(photo[i].type))          \r\n                if (photo[i] && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(photo[i].type)) {\r\n\r\n                    let image = await this.fileToBlob(photo[i]);\r\n                    let sendThis = { blob: image, name: photo[i].name };\r\n                    images.push(sendThis);\r\n                }\r\n\r\n                if (photo[i] && photo[i].type === \"text/plain\") {\r\n                    // Does it work with text files as blobs? lets see...\r\n                    let image = await this.fileToBlob(photo[i]);\r\n                    let sendThis = { blob: image, name: photo[i].name };\r\n                    images.push(sendThis);\r\n                }\r\n            }\r\n            runInAction(() => {\r\n\r\n                if (this.ticketFiles.length > 0) {\r\n                    images.forEach((image) => {\r\n                        this.ticketFiles.push(image);\r\n                    })\r\n                } else {\r\n                    this.ticketFiles = images;\r\n                }\r\n            })\r\n        } else {\r\n            runInAction(() => {\r\n                this.ticketFiles = [];\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    createWithPhoto = async (ticket: ITicket) => {\r\n        this.submittingTicket = true;\r\n        try {\r\n            //await agent.Tickets.createWithPhoto(ticket, photo);\r\n            //console.log(\"Sending: \", photo);\r\n            await agent.Tickets.createTicketMultiple(ticket, this.ticketFiles)\r\n            runInAction(() => {\r\n                // Maybe update stats list and force reload for ticketRegistry\r\n                this.ticketRegistry.set(ticket.id, ticket);\r\n                this.selectedTicket = ticket;\r\n                this.submittingTicket = false;\r\n            })\r\n            history.push('/issues');\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingTicket = false;\r\n                this.setTicketFiles([]);\r\n                console.log(\"Error createTicket, \", error);\r\n            })\r\n        }\r\n    }\r\n    editTicket = async (ticket: ITicket) => {\r\n        this.submittingTicket = true;\r\n        try {\r\n            await agent.Tickets.update(ticket);\r\n            runInAction(() => {\r\n                const oldTicketStatus = this.ticketRegistry.get(ticket.id).status.toLowerCase();\r\n                // Make sure to update ticketListStats if this field has been changed.\r\n                 const newTicketStatus = ticket.status.toLowerCase();   \r\n                if (newTicketStatus !== oldTicketStatus) {\r\n                    this.ticketRegistry.set(ticket.id, ticket);\r\n                    this.ticketListStats[newTicketStatus] += 1;\r\n                    this.ticketListStats[oldTicketStatus] -= 1;\r\n                } else {\r\n                    this.ticketRegistry.set(ticket.id, ticket);\r\n                }\r\n                this.selectedTicket = ticket;\r\n                this.submittingTicket = false;\r\n            });\r\n            //history.push('/issues');\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingTicket = false;\r\n                console.log(\"Error editTicket, \", error);\r\n            })\r\n        }\r\n    }\r\n\r\n    editTicketStatus = async (ticket: ITicket) => {\r\n        this.submittingTicket = true;\r\n        try {\r\n            await agent.Tickets.update(ticket);\r\n            runInAction(() => {\r\n                const oldTicketStatus = this.selectedTicket!.status.toLowerCase();\r\n                // Make sure to update ticketListStats if this field has been changed.\r\n                 const newTicketStatus = ticket.status.toLowerCase();   \r\n                if (newTicketStatus !== oldTicketStatus) {\r\n                    this.ticketListStats[newTicketStatus] += 1;\r\n                    this.ticketListStats[oldTicketStatus] -= 1;\r\n                } \r\n                this.selectedTicket = ticket;\r\n                this.submittingTicket = false;\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingTicket = false;\r\n                console.log(\"Error editTicketStatus, \", error);\r\n            })\r\n        }\r\n    }\r\n\r\n    // {{url}}/api/tickets/comment/47deb399-2e0f-48cb-8892-849fe306e08\r\n    addComment = async (ticket: ITicket, comment: IComment) => {\r\n        this.isAddingComment = true;\r\n        try {\r\n            let com = await agent.Tickets.addComment(ticket.id, comment);      \r\n            runInAction(() => {\r\n                // Add comment to this tickets comment list.\r\n                ticket.comments?.push(com);\r\n                this.ticketRegistry.set(ticket.id, ticket);\r\n                this.selectedTicket = ticket;\r\n                this.isAddingComment = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error)\r\n                this.isAddingComment = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteComment = async (ticketId: string, commentId: string) => {\r\n        this.isDeletingComment = true;\r\n        try {\r\n            await agent.Tickets.delComment(ticketId, commentId);\r\n            runInAction(() => {\r\n                let retu = this.selectedTicket?.comments?.filter((comment: IComment) => comment.id !== commentId )\r\n                let ticket = this.selectedTicket;\r\n                this.selectedTicket!.comments = retu;\r\n                this.ticketRegistry.set(ticketId, ticket);\r\n                this.isDeletingComment = false;\r\n\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error)\r\n                this.isDeletingComment = false;\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    editComment = async (ticketId: string, commentId: string, body: any) => {\r\n        this.isEditingComment = true;\r\n        try {\r\n            if (!this.ticketRegistry.has(ticketId)) \r\n                    await this.loadTickets();\r\n            await agent.Tickets.editComment(ticketId, commentId, body);\r\n            runInAction(() => {\r\n                let tickets = this.ticketRegistry.get(ticketId);\r\n                let ticket = toJS(tickets);\r\n                // Update comment\r\n                ticket.comments.forEach((comment: IComment) =>  { \r\n                    if(comment.id === commentId) { \r\n                        comment.body = body.body;\r\n                    } \r\n                });\r\n                this.ticketRegistry.set(ticket.id, ticket);\r\n                //const ait = this.ticketRegistry.get(ticket.id);\r\n                //console.log(\"ait \", ait.comments);\r\n                this.selectedTicket = ticket;\r\n                this.isEditingComment = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error)\r\n                this.isEditingComment = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    addPhoto = async (ticketId: string, photo: Blob) => {\r\n        this.isAddingPhoto = true;\r\n        try {\r\n            const returnedPhoto = await agent.Tickets.addPhoto(ticketId, photo);\r\n            runInAction(() => {\r\n                // TODO: Try not to touch ticketregistry for now.\r\n                this.selectedTicket!.photos?.push(returnedPhoto);\r\n                this.isAddingPhoto = false;\r\n            })\r\n            \r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isAddingPhoto = false;\r\n            })\r\n\r\n        }\r\n    }\r\n    deletePhoto = async (ticketId: string, photoId: string) => {\r\n        this.isDeletingPhoto = true;\r\n        try {\r\n            await agent.Tickets.delPhoto(ticketId, photoId);\r\n            runInAction(() => {\r\n                let updatedPhotos = this.selectedTicket?.photos?.filter((photo: ITicketPhoto) => photo.id !== photoId)\r\n                this.selectedTicket!.photos = updatedPhotos;\r\n                this.isDeletingPhoto = false;\r\n            })\r\n            \r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isDeletingPhoto = false;\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    addTextFile = async (ticketId: string, text: Blob) => {\r\n        this.isAddingText = true;\r\n        try {\r\n            \r\n            const returnedTextFile = await agent.Tickets.addTextFile(ticketId, text);\r\n            runInAction(() => {\r\n                // TODO: Try not to touch ticketregistry for now.\r\n                if (returnedTextFile)\r\n                    this.selectedTicket!.texts?.push(returnedTextFile);\r\n                this.isAddingText = false;\r\n            })\r\n            \r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isAddingText = false;\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    deleteTextFile = async (ticketId: string, textId: string) => {\r\n        this.isDeletingText = true;\r\n        try {\r\n            await agent.Tickets.delTextFile(ticketId, textId);\r\n            runInAction(() => {\r\n                let updatedTexts = this.selectedTicket?.texts?.filter((text: ITicketText) => text.id !== textId)\r\n                this.selectedTicket!.texts = updatedTexts;\r\n                this.isDeletingText = false;\r\n            })\r\n            \r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isDeletingText = false;\r\n            })\r\n\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { IUser, IUserFormValues } from \"../models/user\";\r\n\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    refreshTokenTimeout: any;\r\n \r\n    constructor() {\r\n \r\n      makeAutoObservable(this);\r\n    }\r\n    user: IUser | null = null;\r\n    isDeletingUser: boolean = false;\r\n    get isLoggedIn() { return !!this.user}\r\n\r\n    login = async (values: IUserFormValues) => {\r\n        try {\r\n            const user = await agent.User.login(values);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n            // *this.rootStore.commonStore.setToken(user.token);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            //this.rootStore.modalStore.closeModal();\r\n            history.push(\"/groups\");\r\n        } catch(error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        // *this.rootStore.commonStore.setToken(null);\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push(\"/\");\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.User.current();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n            // *this.rootStore.commonStore.setToken(user.token);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch(error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (values: IUserFormValues) => {\r\n        try {\r\n            values.dateJoined = new Date();\r\n            var user = await agent.User.register(values);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n            // *this.rootStore.commonStore.setToken(user.token);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            //this.rootStore.modalStore.closeModal();\r\n            //history.push(`/user/registerSuccess?email=${values.email}`);\r\n        } catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    deleteAccount = async (user: string) => {\r\n        this.isDeletingUser = true;\r\n        try {\r\n            await agent.User.delete(user);\r\n            runInAction(() => {\r\n                this.user = null;\r\n                this.isDeletingUser = false;\r\n            })\r\n            history.push(\"/\");\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isDeletingUser = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.User.refreshToken();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            // *this.rootStore.commonStore.setToken(user.token);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch( error ) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: IUser) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        // Gives our expiry as a jscript date object\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { IPhoto, IProfile, IProfileEdits } from \"../models/profile\";\r\n\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    profile: IProfile | null = null;\r\n    loadingProfile = true;\r\n    uploadingPhoto = false;\r\n    loadingMainPhotoSet = false;\r\n    loadingProfileUpdate = false;\r\n\r\n    get isCurrentUser() {\r\n        /* *if (this.rootStore.userStore.user && this.profile) {\r\n            return this.rootStore.userStore.user.username === this.profile.username;\r\n        } */\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            \r\n            const currentProfile = await agent.Profiles.get(username);\r\n\r\n            runInAction(() => {\r\n                this.profile = currentProfile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }\r\n\r\n    editProfile = async (profile: IProfileEdits) => {\r\n        this.loadingProfileUpdate = true;\r\n        try {\r\n            await agent.Profiles.editProfile(profile);\r\n            runInAction(() => {\r\n                this.profile!.displayName = profile.displayName;\r\n                this.profile!.bio = profile.bio!;\r\n                // *this.rootStore.userStore.user!.displayName = profile.displayName; \r\n                store.userStore.user!.displayName = profile.displayName; \r\n                this.loadingProfileUpdate = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingProfileUpdate = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {           \r\n            const photo = await agent.Profiles.uploadPhoto(file);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos.push(photo);\r\n                    /* *if (photo.isMain && this.rootStore.userStore.user) {\r\n                        this.rootStore.userStore.user.image = photo.url;\r\n                        this.profile.image = photo.url\r\n                    } */\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.user.image = photo.url;\r\n                        this.profile.image = photo.url\r\n                    }\r\n                }\r\n                this.uploadingPhoto = false;\r\n            })\r\n        } catch(error) \r\n        {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.uploadingPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: IPhoto) => {\r\n        this.loadingMainPhotoSet = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            runInAction(() => {\r\n                // *this.rootStore.userStore.user!.image = photo.url;\r\n                store.userStore.user!.image = photo.url;\r\n                this.profile!.photos.find(p => p.isMain)!.isMain = false;\r\n                this.profile!.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                this.profile!.image = photo.url;\r\n                this.loadingMainPhotoSet = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingMainPhotoSet = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: IPhoto) => {\r\n        this.loadingMainPhotoSet = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                this.profile!.photos = this.profile!.photos.filter(a => a.id !== photo.id);\r\n                this.loadingMainPhotoSet = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingMainPhotoSet = false;\r\n            })\r\n        }\r\n    }\r\n}","import { IMember } from \"../../app/models/groups\";\r\nimport { IUser } from \"../../app/models/user\";\r\n\r\nexport function arrayContains(a: any[], obj: string) {\r\n    var i = a.length;\r\n    while (i--) {\r\n        if (a[i] === obj) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const createMember = (user: IUser):  IMember => {\r\n    return {\r\n        displayName: user.displayName,\r\n        isHost: false,\r\n        username: user.username,\r\n        image: user.image!,\r\n        isAdmin: false\r\n    }\r\n}\r\n\r\nexport const returnBlobFromFile = async (files: any[]) => {\r\n\r\n    let fileToBlob = async (file: any) => \r\n        new Blob([new Uint8Array(await file.arrayBuffer())], {\r\n        type: file.type,\r\n        })\r\n\r\n    if (files[0].type === \"text/plain\") {\r\n        const formData = files[0];\r\n        return formData;\r\n    } else {\r\n        const blub = await fileToBlob(files[0]);       \r\n        return {blob: blub, name: files[0].name};\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, observable, runInAction  } from \"mobx\";\r\nimport { createMember } from \"../../features/utils/helperMethods\";\r\nimport agent from \"../api/agent\";\r\nimport { IAnnouncement, IGroup, IMember } from \"../models/groups\";\r\nimport { IPhoto } from \"../models/profile\";\r\n\r\nimport { store } from \"./store\";\r\n\r\nexport default class GroupStore {\r\n  \r\n    constructor() {\r\n     \r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    groupRegistry = new Map();\r\n    loadingGroups = false;\r\n    submittingAnnouncement = false;\r\n    submittingGroup = false;\r\n    selectedGroupId = \"\";\r\n    loadingGroupPhoto = false;\r\n    deletingGroupPhoto = false;\r\n    isPromotingMember = false;\r\n    isUploadingGroupEdit = false;\r\n\r\n    // Option to not use decorators for setting a ref?\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n\r\n    get isHostOfGroup() {\r\n        // If user is host return true:\r\n        return this.selectedGroup.members.filter((member: IMember) => \r\n           //* member.isHost && member.username === this.rootStore.userStore.user?.username\r\n            member.isHost && member.username === store.userStore.user?.username\r\n        ).length > 0;\r\n    }\r\n\r\n    \r\n    get isHostOrAdminOfGroup() {\r\n        // If user is host return true:\r\n        return this.selectedGroup?.members.filter((member: IMember) => \r\n            //*(member.isHost || member.isAdmin) && member.username === this.rootStore.userStore.user?.username\r\n            (member.isHost || member.isAdmin) && member.username === store.userStore.user?.username\r\n        ).length > 0;\r\n    }\r\n\r\n    get getGroups() {\r\n        return Array.from(this.groupRegistry.values())\r\n    }\r\n    //@computed\r\n    get groupsByDate() {\r\n        return Array.from(this.groupRegistry.values()).slice().sort((a, b) => Date.parse(a.createdAt) - Date.parse(b.createdAt))\r\n    }\r\n    //@computed\r\n    // This is for Group page Dropdown selection of group names.\r\n    get groupTitles() {\r\n        return Array.from(this.groupRegistry.values())\r\n            .slice()\r\n            .sort((a, b) => a.groupName?.charAt(0).localeCompare(b.groupName.charAt(0)))\r\n            .map((group: IGroup) => ({\"key\": group.id, \"value\":  group.id, \"text\": group.groupName } ) )\r\n    }\r\n    get groupTitleForUserOptions() {\r\n        return Array.from(this.groupRegistry.values())\r\n        .slice()\r\n        .sort((a, b) => a.groupName?.charAt(0).localeCompare(b.groupName.charAt(0)))\r\n        .filter((group: IGroup) => group.members?.filter((member: IMember) => \r\n           //*(member.username === this.rootStore.userStore.user?.username)).length\r\n           (member.username === store.userStore.user?.username)).length\r\n        ).map((group: IGroup) => \r\n            ({\"key\": group.id, \"value\":  group.id, \"text\": group.groupName })\r\n        );\r\n    }\r\n    get selectedGroup() {\r\n        return Array.from(this.groupRegistry.values()).find((grp: IGroup) => grp.id === this.selectedGroupId);\r\n    }\r\n\r\n    get groupTitleForUser() {\r\n        return Array.from(this.groupRegistry.values())\r\n        .slice()\r\n        .sort((a, b) => a.groupName?.charAt(0).localeCompare(b.groupName.charAt(0)))\r\n        .filter((group: IGroup) => group.members?.filter((member: IMember) => \r\n           //*(member.username === this.rootStore.userStore.user?.username)).length\r\n           (member.username === store.userStore.user?.username)).length\r\n        ).map((group: IGroup) => \r\n            ({\"key\": group.id, \"value\":  group.id, \"text\": group.groupName,  \"photo\": group.photos?.slice(0,1)[0] })\r\n        );\r\n    }\r\n\r\n    createHubConnection = (groupId: string) => {\r\n        // process.env.REACT_APP_API_CHAT_URL!\r\n        // Prevent this from opening two connections with the same token.\r\n        try {\r\n            if (this.selectedGroupId) {\r\n\r\n                this.hubConnection = new HubConnectionBuilder()\r\n                    .withUrl(process.env.REACT_APP_API_CHAT_URL + '?groupId=' + groupId, {\r\n                    //*accessTokenFactory: () => this.rootStore.commonStore.token!\r\n                    accessTokenFactory: () => store.commonStore.token!\r\n                })\r\n                .configureLogging(LogLevel.Information).build();\r\n                //console.log(\"Starting hub connection: \", this.selectedGroupId!);\r\n                this.hubConnection\r\n                    .start()\r\n                    .then(() => console.log(this.hubConnection!.state))\r\n                    .then(() => {\r\n                        if(this.hubConnection!.state === \"Connected\") {\r\n                        this.hubConnection!.invoke(\"AddToGroup\", groupId)\r\n                        }\r\n                    })\r\n                .catch(error => console.log(\"Error establishing connection: \", error));\r\n                // This is being called twice when coming from profile/profileGroups link\r\n    \r\n                    this.hubConnection?.on(\"ReceiveComment\", comment => {\r\n                        runInAction(() => {\r\n                            this.selectedGroup!.comments.push(comment);\r\n                        });\r\n                    })\r\n            }\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }  \r\n\r\n    stopHubConnection = async () => {\r\n        try {\r\n            if (this.hubConnection) {\r\n                //console.log(\"inside \", this.selectedGroupId, \" Connection.state = \", this.hubConnection!.state);\r\n\r\n                if(this.hubConnection!.state === (\"Connected\" || \"Connecting\")) {\r\n                    await this.hubConnection.invoke(\"RemoveFromGroup\", this.selectedGroupId!).then(() => {\r\n                        //console.log(\"Stopping hub connection: \", this.selectedGroupId!);\r\n                      this.hubConnection!.stop();\r\n                    }).then(() => console.log(\"Connection stopped\")).catch(err => console.log(err))\r\n                }\r\n            } \r\n\r\n        } catch (error) {\r\n            runInAction(() => console.log(error));\r\n        }\r\n    }\r\n  \r\n    addComment = async (values: any) =>  {\r\n        values.groupId = this.selectedGroupId!;\r\n        try {\r\n          await this.hubConnection!.invoke(\"SendComment\", values);\r\n        } catch(error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n\r\n    addAnnouncement = async (groupId: string, body: IAnnouncement) =>  {\r\n        this.submittingAnnouncement = true;\r\n        try {\r\n          await agent.Groups.addAnnouncement(groupId, body);\r\n          runInAction(() => {\r\n              // Add announcement to the groups announcement array\r\n              this.groupRegistry.get(groupId).announcements.push(body);\r\n              // flip flag\r\n              this.submittingAnnouncement = false;\r\n          })\r\n        } catch(error) {\r\n            runInAction(() => {\r\n                this.submittingAnnouncement = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }   \r\n\r\n    deleteAnnouncement = async (groupId: string, announcementId: string) => {\r\n        this.submittingAnnouncement = true;\r\n        try {\r\n            await agent.Groups.delAnnouncement(groupId, announcementId);\r\n            runInAction(() => {\r\n                this.groupRegistry.get(groupId).announcements = this.groupRegistry.get(groupId).announcements.filter((announcement: IAnnouncement) => announcement.id !== announcementId)\r\n                this.submittingAnnouncement = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingAnnouncement = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    uploadPhoto = async (groupId: string, file: Blob) => {\r\n        this.loadingGroupPhoto = true;\r\n        try {\r\n            const photo = await agent.Groups.uploadPhoto(groupId, file);\r\n            runInAction(() => {\r\n                this.groupRegistry.get(groupId).photos.push(photo);\r\n                this.loadingGroupPhoto = false;\r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingGroupPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (groupId: string, photo: IPhoto) => {\r\n        this.deletingGroupPhoto = true;\r\n        try {\r\n            await agent.Groups.deletePhoto(groupId, photo.id);\r\n            runInAction(() => {\r\n                this.groupRegistry!.get(groupId).photos = [];\r\n                this.deletingGroupPhoto = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.deletingGroupPhoto = false;\r\n            })\r\n        }\r\n    }\r\n  \r\n    addAdminComment = async (values: any) => {\r\n        let sendValues = {groupId: \"\", username: \"\", body: \"\"};\r\n        sendValues.groupId = this.selectedGroupId!;\r\n        sendValues.username = values.username;\r\n        sendValues.body = `User ${values.username} has ${values.status} the group!`;\r\n        //console.log(\"SendAdminComment called now with: \", sendValues);\r\n        try {\r\n          await this.hubConnection!.invoke(\"SendAdminComment\", sendValues);\r\n        } catch(error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n\r\n    addAdmin = async (groupId: string, username: string) => {\r\n        this.isPromotingMember = true;\r\n        try {\r\n            let userName = {username: username};\r\n            await agent.Groups.editMember(groupId, userName);\r\n            runInAction(() => {\r\n                this.selectedGroup?.members.forEach((member: IMember) => {\r\n                    if (member.username === username)\r\n                        member.isAdmin = true;\r\n                });\r\n                console.log(\"Is he admin? \", this.selectedGroup);\r\n                this.isPromotingMember = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isPromotingMember = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadGroups = async () => {\r\n        this.loadingGroups = true;\r\n        try {\r\n            const groups = await agent.Groups.list();\r\n            runInAction(() => {\r\n                groups.forEach((group) => {\r\n                    group.createdAt = group.createdAt!.split('.')[0]\r\n                    this.groupRegistry.set(group.id, group)\r\n                })\r\n                this.loadingGroups = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingGroups = false;\r\n                console.log(\"Error loading group: \", error)\r\n            })\r\n        }\r\n    }\r\n\r\n    createGroup = async (group: IGroup) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            await agent.Groups.create(group);\r\n            let members = [];\r\n            //*const member = createMember(this.rootStore.userStore.user!);\r\n            const member = createMember(store.userStore.user!);\r\n            member.isHost = true;\r\n            members.push(member);\r\n            group.members = members;\r\n            group.comments = [];\r\n            group.announcements = [];\r\n            group.photos = [];\r\n            runInAction(() => {\r\n                this.groupRegistry.set(group.id, group);\r\n                this.submittingGroup = false;\r\n                this.setSelectedGroup(group.id);\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in createGroup: \", error);\r\n            })\r\n        }\r\n    }\r\n\r\n    editGroupDescription = async (group: IGroup) => {\r\n        this.isUploadingGroupEdit = true;\r\n        try {\r\n            console.log(\"Sending up: \", group);\r\n            await agent.Groups.update(group);\r\n            runInAction(() => {\r\n                // update groupregistry grp\r\n                this.groupRegistry.set(group.id, group);\r\n                this.isUploadingGroupEdit = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isUploadingGroupEdit = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setSelectedGroup = (groupId: string) => {\r\n        try {\r\n            this.selectedGroupId = groupId;\r\n        } catch (error) {\r\n            console.log(\"Error setting selected group: \", error);\r\n        }\r\n    }\r\n\r\n    setSelectedGroupEmpty = () => {\r\n        try {\r\n            this.selectedGroupId = \"\";\r\n        } catch (error) {\r\n            console.log(\"Error setting selected group Empty : \", error);\r\n        }\r\n    } \r\n\r\n    joinGroup = async (groupId: string) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            await agent.Groups.join(groupId);\r\n            runInAction(() => {\r\n                // Add user to memberlist for grp\r\n                //*this.selectedGroup.members.push(this.rootStore.userStore.user);\r\n                this.selectedGroup.members.push(store.userStore.user);\r\n                this.submittingGroup = false;\r\n            })\r\n        } catch(err) {\r\n            runInAction(() => {\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in joinGroup: \", err);\r\n            })\r\n        }\r\n    }\r\n\r\n    leaveGroup = async (groupId: string) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            await agent.Groups.leave(groupId);\r\n            runInAction(() => {\r\n\r\n                this.selectedGroup.members  = this.selectedGroup.members.filter((member: IMember) => \r\n                    //*member.username !== this.rootStore.userStore.user?.username\r\n                    member.username !== store.userStore.user?.username\r\n                );\r\n                this.selectedGroupId = \"\";\r\n                this.submittingGroup = false;\r\n            })\r\n        } catch(err) {\r\n            runInAction(() => {\r\n                this.selectedGroupId = \"\";\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in leaveGroup: \", err);\r\n            })\r\n        }\r\n    }\r\n}","import { configure } from \"mobx\";\r\nimport { createContext, useContext } from \"react\";\r\nimport TicketStore from \"./ticketStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport UserStore from \"./userStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport GroupStore from \"./groupStore\";\r\n\r\nconfigure({enforceActions: 'always'});\r\n\r\ninterface Store {\r\n    ticketStore: TicketStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    profileStore: ProfileStore;\r\n    groupStore: GroupStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    ticketStore: new TicketStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    profileStore: new ProfileStore(),\r\n    groupStore: new GroupStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\n\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem(\"jwt\");\r\n    appLoaded = false;\r\n    \r\n    constructor() {\r\n     \r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem(\"jwt\", token);\r\n                } else {\r\n                    window.localStorage.removeItem(\"jwt\");\r\n                }\r\n            }\r\n        ) \r\n    }\r\n\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        runInAction(() => {\r\n            this.appLoaded = true;\r\n        });\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n  const { commonStore } = useStore();\r\n  return (\r\n    <Container>\r\n      <Header as='h1' content='Server Error' color='teal' />\r\n      <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n      {commonStore.error?.details && (\r\n        <Segment>\r\n          <Header as='h4' content='Stack trace' color='teal' />\r\n          <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n        </Segment>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { Header, Segment, Image } from 'semantic-ui-react';\r\n\r\nconst GroupListExplainer = () => {\r\n  return (\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Image\r\n          src='/assets/bughunter-grp.png'\r\n          alt='logo'\r\n          style={{ marginRight: '10px', width: '60px', height: '60px' }}\r\n        />\r\n        Select what Group to view from the dropdown above. If no Group is\r\n        available, you can create your own aswell!\r\n      </Header>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default GroupListExplainer;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Divider, Icon, Item } from 'semantic-ui-react';\r\nimport { IGroup } from '../../../app/models/groups';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface IProps {\r\n  group: IGroup;\r\n}\r\n\r\nconst GroupSummary: React.FC<IProps> = ({ group }) => {\r\n  const { groupStore } = useStore();\r\n  const { joinGroup, submittingGroup } = groupStore;\r\n  const { groupName, description, id } = group;\r\n  return (\r\n    <Item.Group\r\n      style={{\r\n        margin: '10px',\r\n      }}\r\n    >\r\n      <Item>\r\n        <Item.Content\r\n          style={{\r\n            margin: '10px',\r\n          }}\r\n          verticalAlign='middle'\r\n        >\r\n          <Item.Header\r\n            style={{\r\n              color: 'white',\r\n            }}\r\n          >\r\n            {groupName}\r\n          </Item.Header>\r\n        </Item.Content>\r\n      </Item>\r\n      <Divider />\r\n      <Item>\r\n        <Item.Content\r\n          style={{\r\n            margin: '10px',\r\n          }}\r\n        >\r\n          <Item.Description\r\n            style={{\r\n              color: 'white',\r\n            }}\r\n          >\r\n            Description: {description}{' '}\r\n          </Item.Description>\r\n          <Item.Description\r\n            style={{\r\n              color: 'white',\r\n            }}\r\n          >\r\n            Alive since {group.createdAt!.split('T')[0]}\r\n          </Item.Description>\r\n          <Item.Extra>\r\n            <h4\r\n              style={{\r\n                color: 'white',\r\n              }}\r\n            >\r\n              Issue Status:{'    '}{' '}\r\n            </h4>\r\n            <Icon color='blue' name='circle'>\r\n              {'    '}\r\n              {group.open}\r\n              {'    '}\r\n            </Icon>\r\n            <Icon color='green' name='circle'>\r\n              {'    '}\r\n              {group.verify}\r\n              {'    '}\r\n            </Icon>\r\n            <Icon color='red' name='circle'>\r\n              {'    '}\r\n              {group.closed}\r\n              {'    '}\r\n            </Icon>\r\n          </Item.Extra>\r\n          <Button\r\n            loading={submittingGroup}\r\n            positive\r\n            onClick={() => joinGroup(id)}\r\n          >\r\n            Join Group\r\n          </Button>\r\n        </Item.Content>\r\n      </Item>\r\n    </Item.Group>\r\n  );\r\n};\r\n\r\nexport default observer(GroupSummary);\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { Form, FormFieldProps, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<any, HTMLElement>, FormFieldProps {}\r\n\r\nconst TextInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  type,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} type={type} width={width}>\r\n      <input\r\n        {...input}\r\n        placeholder={placeholder}\r\n        name={type}\r\n        autoComplete='on'\r\n      />\r\n      {touched && error && (\r\n        <Label basic color='red'>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { Form, FormFieldProps, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<any, HTMLElement>, FormFieldProps {}\r\n\r\nconst TextAreaInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  rows,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      <textarea rows={rows} {...input} placeholder={placeholder} />\r\n      {touched && error && (\r\n        <Label basic color='red'>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default TextAreaInput;\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Checkbox } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<any, HTMLElement>, FormFieldProps {}\r\nconst FormCheckbox: React.FC<IProps> = ({\r\n  input: { onChange, name, checked },\r\n  label,\r\n  input,\r\n}) => {\r\n  return (\r\n    <Checkbox\r\n      name={name}\r\n      checked={checked}\r\n      onChange={(evt, { checked }) => onChange(checked)}\r\n      label={label}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FormCheckbox;\r\n","import React, { useState } from 'react';\r\nimport { Button, Form, Segment } from 'semantic-ui-react';\r\nimport { IGroup } from '../../../app/models/groups';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport FormCheckbox from '../../../app/common/form/FormCheckbox';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n// requirement fields for validation in form.\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\nconst minLength = (min: any) => (value: any) =>\r\n  value.length > min || value >= min\r\n    ? undefined\r\n    : `Should be atleast ${min} characters long.`;\r\nconst composeValidators = (...validators: any) => (value: string) =>\r\n  validators.reduce(\r\n    (error: any, validator: any) => error || validator(value),\r\n    undefined\r\n  );\r\n\r\ninterface IProps {\r\n  setCreatingGroup: (flag: boolean) => void;\r\n  setSelectedGroup: (flag: any) => void;\r\n}\r\n\r\nconst GroupForm: React.FC<IProps> = ({\r\n  setCreatingGroup,\r\n  setSelectedGroup,\r\n}) => {\r\n  const initializeForm = () => {\r\n    return {\r\n      id: '',\r\n      groupName: '',\r\n      description: '',\r\n      isPublic: true,\r\n      createdAt: new Date().toISOString(),\r\n      open: 0,\r\n      closed: 0,\r\n      verify: 0,\r\n    };\r\n  };\r\n  const { groupStore } = useStore();\r\n  const [group, setGroup] = useState<IGroup>(initializeForm);\r\n\r\n  const handleFinalFormSubmit = async (value: any) => {\r\n    if (group.id.length === 0) {\r\n      // value is an observer so dont flip it directly.\r\n      const boolish = !value.isPublic;\r\n      const newGroup: IGroup = {\r\n        ...group,\r\n        id: uuid(),\r\n        groupName: value.groupName,\r\n        description: value.description,\r\n        isPublic: boolish,\r\n      };\r\n      //Create a new group\r\n      await groupStore.createGroup(newGroup);\r\n      console.log('Group created successfully');\r\n      setSelectedGroup(newGroup.id);\r\n      setCreatingGroup(false);\r\n    } else {\r\n      // Editing existing ticket.\r\n      //editGroup(newGroup);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <h3 style={{ justifyContent: 'center' }}>Create a new Group</h3>\r\n      <FinalForm\r\n        initialValues={group}\r\n        onSubmit={handleFinalFormSubmit}\r\n        render={({ handleSubmit, invalid, pristine }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <Field\r\n              validate={composeValidators(required, minLength(2))}\r\n              name='groupName'\r\n              placeholder='Group Name'\r\n              value={group.groupName}\r\n              component={TextInput}\r\n            />\r\n            <Field\r\n              name='isPublic'\r\n              type='checkbox'\r\n              label='Make Group Private (hidden from search)'\r\n              component={FormCheckbox}\r\n            />\r\n            <Field\r\n              validate={composeValidators(required, minLength(10))}\r\n              rows={2}\r\n              name='description'\r\n              placeholder='Description'\r\n              value={group.description}\r\n              component={TextAreaInput}\r\n            />\r\n            <Button\r\n              disabled={groupStore.submittingGroup || invalid || pristine}\r\n              loading={groupStore.submittingGroup}\r\n              type='submit'\r\n              positive\r\n            >\r\n              Submit Group\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setCreatingGroup(false);\r\n                setSelectedGroup(null);\r\n              }}\r\n              type='button'\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(GroupForm);\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\r\n  inverted = false,\r\n  content,\r\n}) => {\r\n  return (\r\n    <Dimmer\r\n      active\r\n      inverted={inverted}\r\n      style={{ backgroundColor: 'rgb(7, 20, 38)' }}\r\n    >\r\n      <Loader\r\n        content={content}\r\n        style={{ color: 'white', backgroundImage: '#bc4123' }}\r\n      />\r\n    </Dimmer>\r\n  );\r\n};\r\n\r\nexport default LoadingComponent;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Image, List, Popup, Dropdown, Button } from 'semantic-ui-react';\r\nimport { IMember } from '../../../app/models/groups';\r\n\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface IProps {\r\n  members: IMember[];\r\n  admins: IMember[];\r\n  isHostOrAdmin: boolean;\r\n}\r\n\r\nconst styles = {\r\n  borderColor: 'orange',\r\n  borderWidth: 2,\r\n};\r\n\r\nconst getOptions = (members: any) => {\r\n  return members.map((member: IMember) => ({\r\n    key: member.username,\r\n    text: member.displayName,\r\n    value: member.username,\r\n    image: { avatar: true, src: member.image || '/assets/user.png' },\r\n  }));\r\n};\r\n\r\nconst GroupAdminsList: React.FC<IProps> = ({\r\n  admins,\r\n  members,\r\n  isHostOrAdmin,\r\n}) => {\r\n  const { groupStore } = useStore();\r\n  const { isPromotingMember, selectedGroupId, addAdmin } = groupStore;\r\n  const [promotedMember, setPromotedMember] = useState('');\r\n\r\n  const handleAdminDropdown = (e: any, data: any) => {\r\n    const statusValue = data.value.toLowerCase();\r\n\r\n    if (data.placeholder === 'Promote') {\r\n      if (statusValue) setPromotedMember(statusValue);\r\n    }\r\n    if (!statusValue) {\r\n      setPromotedMember('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <List\r\n        horizontal\r\n        relaxed='very'\r\n        floated='left'\r\n        style={{ marginLeft: '14px' }}\r\n      >\r\n        <List.Item>\r\n          <b>Admins </b>{' '}\r\n        </List.Item>\r\n        {admins.map((member) => (\r\n          <List.Item key={member.username}>\r\n            <Popup\r\n              header={member.displayName}\r\n              trigger={\r\n                <Image\r\n                  bordered\r\n                  style={member.isHost ? styles : null}\r\n                  size='mini'\r\n                  circular\r\n                  src={member.image || '/assets/user.png'}\r\n                />\r\n              }\r\n            />\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n      {isHostOrAdmin && (\r\n        <List horizontal floated='right'>\r\n          <List.Item style={{ maxHeight: '32px' }}>\r\n            <Dropdown\r\n              style={{\r\n                borderTopRightRadius: 0,\r\n                borderBottomRightRadius: 0,\r\n                minWidth: '10em',\r\n              }}\r\n              clearable\r\n              labeled\r\n              selection\r\n              placeholder='Promote'\r\n              options={getOptions(members)}\r\n              onChange={handleAdminDropdown}\r\n            />\r\n            <Button\r\n              style={{\r\n                borderTopLeftRadius: 0,\r\n                borderBottomLeftRadius: 0,\r\n                height: '38px',\r\n                paddingTop: '0px',\r\n                paddingBottom: '0px',\r\n                marginBottom: '3px',\r\n                marginRight: '9px',\r\n              }}\r\n              loading={isPromotingMember}\r\n              disabled={promotedMember === ''}\r\n              size='medium'\r\n              positive\r\n              icon='add'\r\n              onClick={() =>\r\n                promotedMember && addAdmin(selectedGroupId, promotedMember)\r\n              }\r\n            />\r\n          </List.Item>\r\n        </List>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(GroupAdminsList);\r\n","import { formatDistance } from 'date-fns';\r\nimport React, { useState } from 'react';\r\nimport {\r\n  List,\r\n  Segment,\r\n  Image,\r\n  Button,\r\n  Popup,\r\n  Accordion,\r\n  Icon,\r\n} from 'semantic-ui-react';\r\nimport { IAnnouncement } from '../../../app/models/groups';\r\n\r\ninterface IProps {\r\n  announcements?: IAnnouncement[] | undefined;\r\n  isHostOrAdminOfGroup: boolean;\r\n  groupId: string;\r\n  deleteAnnouncement: (groupId: string, announcementId: string) => void;\r\n  submittingAnnouncement: boolean;\r\n}\r\n\r\nconst GroupAnnouncement: React.FC<IProps> = ({\r\n  announcements,\r\n  isHostOrAdminOfGroup,\r\n  groupId,\r\n  deleteAnnouncement,\r\n  submittingAnnouncement,\r\n}) => {\r\n  const [activeIndex, setActiveIndex] = useState(null);\r\n  const [isAnnouncementId, setIsAnnouncementId] = useState('');\r\n  const [deleteKey, setDeleteKey] = useState('');\r\n  const handleClick = (e: any, titleProps: any) => {\r\n    const { index } = titleProps;\r\n    const newIndex = activeIndex === index ? -1 : index;\r\n    setActiveIndex(newIndex);\r\n  };\r\n  return (\r\n    <Segment\r\n      style={{\r\n        backgroundColor: 'rgb(7, 20, 38)',\r\n        border: '1px solid rgba(255,255,255,0.4)',\r\n      }}\r\n    >\r\n      <Accordion fluid exclusive={false} inverted>\r\n        {announcements?.map((announcement, i) => (\r\n          <List.Item\r\n            key={announcement.id}\r\n            style={{ paddingTop: '14px', paddingBottom: '14px' }}\r\n          >\r\n            <Accordion.Title\r\n              onClick={(e, titleProps) => {\r\n                setIsAnnouncementId(announcement.id);\r\n                handleClick(e, titleProps);\r\n              }}\r\n              active={activeIndex === i}\r\n              index={i}\r\n            >\r\n              {isHostOrAdminOfGroup && (\r\n                <Popup\r\n                  key={announcement.id}\r\n                  header={'Delete announcement'}\r\n                  trigger={\r\n                    <Button\r\n                      icon='cancel'\r\n                      onClick={() => {\r\n                        setDeleteKey(announcement.id);\r\n                        deleteAnnouncement(groupId, announcement.id);\r\n                      }}\r\n                      floated='right'\r\n                      loading={\r\n                        submittingAnnouncement && announcement.id === deleteKey\r\n                      }\r\n                    />\r\n                  }\r\n                />\r\n              )}\r\n              <Image\r\n                avatar\r\n                floated='left'\r\n                src={announcement.image || '/assets/user.png'}\r\n              />\r\n              {'   '}\r\n              <span style={{ color: 'white', fontSize: '12px' }}>\r\n                {formatDistance(new Date(announcement.createdAt), new Date())}{' '}\r\n                ago.\r\n              </span>\r\n              <p>\r\n                <Icon name='dropdown' />\r\n                {announcement.body.split('\\n')[0]}\r\n              </p>\r\n            </Accordion.Title>\r\n            <Accordion.Content active={activeIndex === i}>\r\n              <span style={{ color: 'white', whiteSpace: 'pre-wrap' }}>\r\n                {announcement.body.match(/[^\\n]*\\n|[^\\n]+/g)!.slice(1)}\r\n              </span>\r\n            </Accordion.Content>\r\n          </List.Item>\r\n        ))}\r\n      </Accordion>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default GroupAnnouncement;\r\n","import React, { useState } from 'react';\r\nimport { Form, Comment, Button } from 'semantic-ui-react';\r\nimport { Field, Form as FinalForm } from 'react-final-form';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\n\r\nimport { observer } from 'mobx-react-lite';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst GroupClickToComment: React.FC<{ isAnnouncement: boolean }> = ({\r\n  isAnnouncement,\r\n}) => {\r\n  const { groupStore, userStore } = useStore();\r\n  const [shouldComment, setShouldComment] = useState(false);\r\n\r\n  const submitAnnouncement = async (val: any) => {\r\n    //console.log('SubmitComment: ', val.body);\r\n    try {\r\n      if (isAnnouncement) {\r\n        const body = {\r\n          body: val.body,\r\n          username: userStore.user!.username,\r\n          displayName: userStore.user!.displayName,\r\n          createdAt: new Date(),\r\n          image: userStore.user?.image,\r\n          id: uuid(),\r\n        };\r\n        await groupStore.addAnnouncement(groupStore.selectedGroupId, body);\r\n      } else {\r\n        await groupStore.addComment(val);\r\n      }\r\n      setShouldComment(false);\r\n    } catch (error) {\r\n      console.log('Error catched submitting announcement: ', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Comment>\r\n      {shouldComment ? (\r\n        <FinalForm\r\n          onSubmit={(val) => submitAnnouncement(val)}\r\n          render={({ handleSubmit, submitting, form }) => (\r\n            <Form\r\n              onSubmit={() =>\r\n                handleSubmit()!.then(() => {\r\n                  console.log('Submitted');\r\n\r\n                  form.reset();\r\n                })\r\n              }\r\n            >\r\n              <Field\r\n                name='body'\r\n                component={TextAreaInput}\r\n                rows={2}\r\n                placeholder={\r\n                  isAnnouncement ? `Add your Announcement` : 'Add Comment'\r\n                }\r\n              />\r\n              <Button\r\n                content={isAnnouncement ? 'Create' : 'Add Reply'}\r\n                labelPosition='left'\r\n                icon='edit'\r\n                primary\r\n                loading={submitting}\r\n              />\r\n              <Button\r\n                content='Cancel'\r\n                labelPosition='right'\r\n                icon='cancel'\r\n                type='button'\r\n                onClick={() => setShouldComment(false)}\r\n              />\r\n            </Form>\r\n          )}\r\n        />\r\n      ) : (\r\n        <Button\r\n          labelPosition='right'\r\n          icon='add'\r\n          content={isAnnouncement ? 'Announcement' : 'Comment'}\r\n          inverted\r\n          style={{\r\n            marginTop: isAnnouncement && '10px',\r\n            backgroundColor: '#bc4123',\r\n          }}\r\n          onClick={() => setShouldComment(true)}\r\n        />\r\n      )}\r\n    </Comment>\r\n  );\r\n};\r\n\r\nexport default observer(GroupClickToComment);\r\n","import { IPhoto } from \"./profile\";\r\n\r\nexport interface IGroup {\r\n    id: string;\r\n    description: string;\r\n    closed?: number;\r\n    open?: number;\r\n    verify?: number;\r\n    isPublic: boolean;\r\n    createdAt?: string;\r\n    groupName: string;\r\n    members?: IMember[];\r\n    comments?: IComment[];\r\n    photos?: IPhoto[];\r\n    announcements?: IAnnouncement[];\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n}\r\n\r\nexport interface IAnnouncement {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n}\r\n\r\nexport interface IMember {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    isAdmin: boolean;\r\n}\r\n\r\nexport interface IGroupEdits {\r\n    description: string\r\n}\r\n\r\nexport class GroupDescriptionValues implements IGroupEdits {\r\n    description = \"\";\r\n    constructor(description?: string) {\r\n        this.description = description!;\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { GroupDescriptionValues } from '../../../app/models/groups';\r\n\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\n\r\nconst GroupDescriptionEdit: React.FC<{\r\n  description: string;\r\n  handleFinalFormSubmit: any;\r\n  isUploadingGroupEdit: boolean;\r\n}> = ({ description, handleFinalFormSubmit, isUploadingGroupEdit }) => {\r\n  const [profileData, setProfileData] = useState(new GroupDescriptionValues());\r\n\r\n  useEffect(() => {\r\n    if (description !== profileData.description) {\r\n      setProfileData(new GroupDescriptionValues(description));\r\n    }\r\n  }, [description, profileData]);\r\n  return (\r\n    <FinalForm\r\n      initialValues={profileData}\r\n      onSubmit={handleFinalFormSubmit}\r\n      render={({ handleSubmit, invalid, pristine }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <Field\r\n            validate={required}\r\n            placeholder='Description'\r\n            value={profileData.description}\r\n            name='description'\r\n            component={TextAreaInput}\r\n          />\r\n          <Button\r\n            disabled={invalid || pristine}\r\n            loading={isUploadingGroupEdit}\r\n            floated='right'\r\n            positive\r\n            type='submit'\r\n            content='submit'\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GroupDescriptionEdit;\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport { Segment, Header, Comment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { formatDistance } from 'date-fns';\r\nimport GroupClickToComment from './GroupClickToComment';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst GroupDetailedChatFlow = () => {\r\n  const { groupStore } = useStore();\r\n\r\n  const { stopHubConnection, selectedGroup } = groupStore;\r\n\r\n  useEffect(() => {\r\n    //gottaCreateHub();\r\n    return () => {\r\n      stopHubConnection();\r\n    };\r\n  }, [stopHubConnection]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        size='mini'\r\n        textAlign='center'\r\n        attached='top'\r\n        inverted\r\n        style={{\r\n          border: '2px solid #bc4123',\r\n          background: 'linear-gradient(135deg, #071426 0%, #000000 99%)',\r\n        }}\r\n      >\r\n        <Header size='medium'>{selectedGroup.groupName} chat</Header>\r\n      </Segment>\r\n      <Segment\r\n        attached\r\n        textAlign='left'\r\n        style={{\r\n          overflow: 'auto',\r\n          maxHeight: 320,\r\n          border: '2px solid #bc4123',\r\n        }}\r\n      >\r\n        <Comment.Group>\r\n          <GroupClickToComment isAnnouncement={false} />\r\n\r\n          {selectedGroup &&\r\n            selectedGroup.comments &&\r\n            selectedGroup.comments\r\n              .slice()\r\n              .reverse()\r\n              .map((comment: any) =>\r\n                comment.username !== null ? (\r\n                  <Comment key={comment.id}>\r\n                    <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                    <Comment.Content>\r\n                      <Comment.Author\r\n                        as={Link}\r\n                        to={`/profile/${comment.username}`}\r\n                      >\r\n                        {comment.displayName}\r\n                      </Comment.Author>\r\n                      <Comment.Metadata>\r\n                        <div>\r\n                          {formatDistance(\r\n                            new Date(comment.createdAt),\r\n                            new Date()\r\n                          )}\r\n                        </div>\r\n                      </Comment.Metadata>\r\n                      <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>\r\n                        {comment.body}\r\n                      </Comment.Text>\r\n                    </Comment.Content>\r\n                  </Comment>\r\n                ) : (\r\n                  <Comment key={comment.id}>\r\n                    <Comment.Content>\r\n                      <Comment.Text\r\n                        style={{ fontStyle: 'italic', color: 'green' }}\r\n                      >\r\n                        {comment.body}\r\n                      </Comment.Text>\r\n                    </Comment.Content>\r\n                  </Comment>\r\n                )\r\n              )}\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(GroupDetailedChatFlow);\r\n","import React from 'react';\r\nimport { List } from 'semantic-ui-react';\r\nimport { IGroup } from '../../../app/models/groups';\r\n\r\ninterface IProps {\r\n  group: IGroup;\r\n}\r\n\r\nconst dotStyles = {\r\n  border: '1px solid',\r\n  borderRadius: '50%',\r\n  width: '20px',\r\n  height: '20px',\r\n  display: 'inline-block',\r\n  marginLeft: '4px',\r\n};\r\n\r\nconst GroupDetailsFooter: React.FC<IProps> = ({ group }) => {\r\n  return (\r\n    <div style={{ backgroundColor: 'rgb(7, 20, 38)', color: 'white' }}>\r\n      <List horizontal floated='left'>\r\n        <List.Item>Alive since {group.createdAt!.split('T')[0]}</List.Item>\r\n        <List.Item>Members: {group.members?.length}</List.Item>\r\n      </List>\r\n\r\n      <List horizontal floated='right'>\r\n        <List.Item>\r\n          <span style={{ color: 'blue', ...dotStyles }}>{group.open}</span>\r\n          <span style={{ color: 'green', ...dotStyles }}>{group.verify}</span>\r\n          <span style={{ color: 'red', ...dotStyles }}>{group.closed}</span>\r\n        </List.Item>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupDetailsFooter;\r\n","import React from 'react';\r\nimport {\r\n  Grid,\r\n  Header,\r\n  Segment,\r\n  Image,\r\n  Popup,\r\n  Button,\r\n  GridColumn,\r\n} from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n  groupId: string;\r\n  deletePhoto: (...args: any) => void;\r\n  groupName: string;\r\n  photo?: { id?: string; url?: string };\r\n  isHostOrAdminOfGroup: boolean;\r\n  loadingGroupPhoto: boolean;\r\n  setIsAddingPhoto: (flag: boolean) => void;\r\n  isAddingPhoto: boolean;\r\n  deletingGroupPhoto: boolean;\r\n}\r\n\r\nconst GroupDetailsHeader: React.FC<IProps> = ({\r\n  groupId,\r\n  deletePhoto,\r\n  groupName,\r\n  photo,\r\n  isHostOrAdminOfGroup,\r\n  loadingGroupPhoto,\r\n  deletingGroupPhoto,\r\n  setIsAddingPhoto,\r\n  isAddingPhoto,\r\n}) => {\r\n  return (\r\n    <Segment\r\n      basic\r\n      style={{\r\n        marginTop: '0px',\r\n        marginBottom: '0px',\r\n        padding: '0px',\r\n        backgroundColor: 'rgb(7, 20, 38)',\r\n      }}\r\n    >\r\n      <Grid columns='two'>\r\n        <Grid.Column textAlign='left' width={4}>\r\n          <Header floated='left' as='h2' style={{ marginRight: '0px' }}>\r\n            <Image\r\n              style={{\r\n                margin: '0px',\r\n                marginRight: '2px',\r\n                width: '73px',\r\n                height: '73px',\r\n                border: '1px solid rgb(255, 255, 255, 0.5)',\r\n              }}\r\n              rounded\r\n              src={photo?.url || '/assets/user.png'}\r\n            />\r\n          </Header>\r\n\r\n          {isHostOrAdminOfGroup && (\r\n            <Grid.Row textAlign='left'>\r\n              {photo?.url && (\r\n                <Grid.Column>\r\n                  <Popup\r\n                    header={'Delete Group Photo'}\r\n                    trigger={\r\n                      <Button\r\n                        style={{\r\n                          border: '1px solid black',\r\n                          fontSize: 'small',\r\n                          marginLeft: '0px',\r\n                          marginRight: '0px',\r\n                        }}\r\n                        negative\r\n                        icon='cancel'\r\n                        onClick={() => {\r\n                          deletePhoto(groupId, photo);\r\n                        }}\r\n                        loading={deletingGroupPhoto}\r\n                      />\r\n                    }\r\n                  />\r\n                </Grid.Column>\r\n              )}\r\n              {!photo?.url && (\r\n                <Grid.Column>\r\n                  <Popup\r\n                    header={'Add Group Photo'}\r\n                    trigger={\r\n                      <Button\r\n                        style={{\r\n                          border: '1px solid black',\r\n                          fontSize: 'small',\r\n                          marginTop: '2px',\r\n                          marginLeft: '0px',\r\n                          marginRight: '0px',\r\n                        }}\r\n                        positive\r\n                        icon='add'\r\n                        onClick={() => {\r\n                          setIsAddingPhoto(!isAddingPhoto);\r\n                        }}\r\n                        loading={loadingGroupPhoto}\r\n                      />\r\n                    }\r\n                  />\r\n                </Grid.Column>\r\n              )}\r\n            </Grid.Row>\r\n          )}\r\n        </Grid.Column>\r\n        <GridColumn>\r\n          <Header\r\n            as='h1'\r\n            style={{\r\n              marginTop: '0px',\r\n              textAlign: 'center',\r\n              color: 'white',\r\n            }}\r\n          >\r\n            {groupName}\r\n          </Header>\r\n        </GridColumn>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default GroupDetailsHeader;\r\n","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n  setFiles: (files: object[]) => void;\r\n  isTicket?: boolean;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst dropzoneStyles = {\r\n  border: 'dashed 3px',\r\n  borderColor: '#eee',\r\n  borderRadius: '5px',\r\n  paddingTop: '30px',\r\n  textAlign: 'center' as 'center',\r\n  height: '200px',\r\n};\r\nconst dropzoneActive = {\r\n  borderColor: 'green',\r\n};\r\n\r\nconst ticketButton = {\r\n  borderColor: '#979797',\r\n  borderRadius: '1px',\r\n  width: '133px',\r\n  textAlign: 'center' as 'center',\r\n};\r\n\r\nconst PhotoWidgetDropzone: React.FC<IProps> = ({\r\n  setFiles,\r\n  isTicket,\r\n  children,\r\n}) => {\r\n  const onDrop = useCallback(\r\n    (acceptedFiles) => {\r\n      // Do something with the files\r\n      setFiles(\r\n        acceptedFiles.map((file: object) =>\r\n          Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n          })\r\n        )\r\n      );\r\n    },\r\n    [setFiles]\r\n  );\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div\r\n      {...getRootProps()}\r\n      style={\r\n        isTicket\r\n          ? { ...ticketButton }\r\n          : isDragActive\r\n          ? { ...dropzoneStyles, ...dropzoneActive }\r\n          : dropzoneStyles\r\n      }\r\n    >\r\n      <input {...getInputProps()} />\r\n      {isTicket ? (\r\n        children\r\n      ) : (\r\n        <>\r\n          <Icon name='upload' size='huge' />\r\n          <Header content='Drop image here' style={{ color: 'teal' }} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;\r\n","import React from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\nimport { useRef } from 'react';\r\n\r\ninterface IProps {\r\n  setImage: (file: Blob) => void;\r\n  imagePreview: string;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\r\n  const cropperRef = useRef<HTMLImageElement>(null);\r\n\r\n  const cropImage = () => {\r\n    const imageElement: any = cropperRef?.current;\r\n    const cropper: any = imageElement?.cropper;\r\n    if (typeof cropper !== 'undefined') {\r\n      cropper.getCroppedCanvas().toBlob((blob: any) => {\r\n        setImage(blob);\r\n      }, 'image/jpeg');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Cropper\r\n      ref={cropperRef}\r\n      src={imagePreview}\r\n      style={{ height: 200, width: '100%' }}\r\n      // Cropper.js options\r\n      initialAspectRatio={1 / 1}\r\n      preview='.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      dragMode='move'\r\n      scalable={true}\r\n      cropBoxMovable={true}\r\n      cropBoxResizable={true}\r\n      crop={cropImage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetCropper;\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Header, Grid, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\n\r\ninterface IProps {\r\n  loading: boolean;\r\n  // Spread args because profile upload only reqs file\r\n  // Group upload takes groupId aswell.\r\n  uploadPhoto: (...args: any[]) => Promise<void>;\r\n  isGroup: boolean;\r\n  groupId?: string;\r\n  setIsAddingPhoto?: (flag: boolean) => void;\r\n}\r\n\r\nconst PhotoUploadWidget: React.FC<IProps> = ({\r\n  loading,\r\n  uploadPhoto,\r\n  isGroup,\r\n  groupId,\r\n  setIsAddingPhoto,\r\n}) => {\r\n  const [files, setFiles] = useState<any[]>([]);\r\n  const [image, setImage] = useState<Blob | null>(null);\r\n  useEffect(() => {\r\n    // Clean up memory\r\n    return () => {\r\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid>\r\n        <Grid.Column width={4}>\r\n          <Header color='teal' sub content='Step 1 - Add Photo' />\r\n          <PhotoWidgetDropzone setFiles={setFiles} />\r\n        </Grid.Column>\r\n        <Grid.Column width={1} />\r\n        <Grid.Column width={4}>\r\n          <Header sub color='teal' content='Step 2 - Resize image' />\r\n          {files.length > 0 && (\r\n            <PhotoWidgetCropper\r\n              setImage={setImage}\r\n              imagePreview={files[0].preview}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={1} />\r\n        <Grid.Column width={4}>\r\n          <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n          {files.length > 0 && (\r\n            <Fragment>\r\n              <div\r\n                className='img-preview'\r\n                style={{ minHeight: '200px', overflow: 'hidden' }}\r\n              />\r\n              <Button.Group width={2}>\r\n                <Button\r\n                  positive\r\n                  icon='check'\r\n                  loading={loading}\r\n                  onClick={() => {\r\n                    isGroup\r\n                      ? uploadPhoto(groupId, image!).then(() =>\r\n                          setIsAddingPhoto!(false)\r\n                        )\r\n                      : uploadPhoto(image!);\r\n                  }}\r\n                />\r\n                <Button\r\n                  icon='close'\r\n                  disabled={loading}\r\n                  onClick={() => setFiles([])}\r\n                />\r\n              </Button.Group>\r\n            </Fragment>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(PhotoUploadWidget);\r\n","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../../app/common/photoUpload/PhotoUploadWidget';\r\ninterface IProps {\r\n  groupId: string;\r\n  uploadPhoto: (...args: any) => Promise<void>;\r\n  loading: boolean;\r\n  setIsAddingPhoto: (flag: boolean) => void;\r\n}\r\nconst GroupUploadPhoto: React.FC<IProps> = ({\r\n  groupId,\r\n  uploadPhoto,\r\n  loading,\r\n  setIsAddingPhoto,\r\n}) => {\r\n  return (\r\n    <Segment>\r\n      <p>Upload photo</p>\r\n      <PhotoUploadWidget\r\n        groupId={groupId}\r\n        uploadPhoto={uploadPhoto}\r\n        loading={loading}\r\n        isGroup={true}\r\n        setIsAddingPhoto={setIsAddingPhoto}\r\n      />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default GroupUploadPhoto;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Divider, Item, Segment } from 'semantic-ui-react';\r\n\r\nimport { IGroup, IMember } from '../../../app/models/groups';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport GroupAdminsList from './GroupAdminsList';\r\nimport GroupAnnouncement from './GroupAnnouncement';\r\nimport GroupClickToComment from './GroupClickToComment';\r\nimport GroupDescriptionEdit from './GroupDescriptionEdit';\r\nimport GroupDetailedChatFlow from './GroupDetailedChatFlow';\r\nimport GroupDetailsFooter from './GroupDetailsFooter';\r\nimport GroupDetailsHeader from './GroupDetailsHeader';\r\nimport GroupUploadPhoto from './GroupUploadPhoto';\r\n\r\ninterface IProps {\r\n  group: IGroup;\r\n}\r\n\r\nconst GroupDetails: React.FC<IProps> = ({ group }) => {\r\n  const { groupName, description, id, members, photos } = group;\r\n  const { groupStore } = useStore();\r\n  const {\r\n    stopHubConnection,\r\n    leaveGroup,\r\n    submittingGroup,\r\n    isHostOfGroup,\r\n    createHubConnection,\r\n    selectedGroupId,\r\n    isHostOrAdminOfGroup,\r\n    deleteAnnouncement,\r\n    submittingAnnouncement,\r\n    uploadPhoto,\r\n    deletePhoto,\r\n    editGroupDescription,\r\n    isUploadingGroupEdit,\r\n    loadingGroupPhoto,\r\n    deletingGroupPhoto,\r\n    selectedGroup,\r\n  } = groupStore;\r\n  const [isAddingPhoto, setIsAddingPhoto] = useState(false);\r\n  const [isEditingDescription, setIsEditingDescription] = useState(false);\r\n  // Clean up when grouplist -> chat works.\r\n  useEffect(() => {\r\n    createHubConnection(selectedGroupId);\r\n    return () => {\r\n      stopHubConnection();\r\n    };\r\n  }, [createHubConnection, selectedGroupId, stopHubConnection]);\r\n\r\n  const handleFinalFormSubmit = async (values: any) => {\r\n    try {\r\n      //await editProfile(values);\r\n      const newGroup = selectedGroup;\r\n      newGroup.description = values.description;\r\n      await editGroupDescription(newGroup);\r\n      setIsEditingDescription(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Item.Group\r\n      divided\r\n      style={{\r\n        margin: '10px',\r\n        backgroundColor: 'rgb(7, 20, 38) ',\r\n        border: '1px solidrgba(255,255,255,0.4)',\r\n      }}\r\n    >\r\n      <Item>\r\n        <Item.Content\r\n          style={{\r\n            margin: '10px',\r\n          }}\r\n          verticalAlign='middle'\r\n        >\r\n          <Item>\r\n            <Item.Content\r\n              style={{\r\n                margin: '10px',\r\n              }}\r\n            >\r\n              <GroupDetailsHeader\r\n                groupId={selectedGroupId}\r\n                deletePhoto={deletePhoto}\r\n                groupName={groupName}\r\n                photo={{\r\n                  id: photos ? photos?.slice(0, 1)[0]?.id : undefined,\r\n                  url: photos ? photos?.slice(0, 1)[0]?.url : undefined,\r\n                }}\r\n                isHostOrAdminOfGroup={isHostOrAdminOfGroup}\r\n                loadingGroupPhoto={loadingGroupPhoto}\r\n                deletingGroupPhoto={deletingGroupPhoto}\r\n                setIsAddingPhoto={setIsAddingPhoto}\r\n                isAddingPhoto={isAddingPhoto}\r\n              />\r\n\r\n              <Segment\r\n                clearing\r\n                style={{\r\n                  backgroundColor: 'rgb(7, 20, 38)',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                }}\r\n              >\r\n                {isEditingDescription ? (\r\n                  <div>\r\n                    <GroupDescriptionEdit\r\n                      handleFinalFormSubmit={handleFinalFormSubmit}\r\n                      description={description}\r\n                      isUploadingGroupEdit={isUploadingGroupEdit}\r\n                    />\r\n                    <Button\r\n                      floated='right'\r\n                      icon='cancel'\r\n                      onClick={() => setIsEditingDescription(false)}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <Item.Description style={{ whiteSpace: 'pre-wrap' }}>\r\n                      {description}{' '}\r\n                    </Item.Description>\r\n                    {isHostOrAdminOfGroup && (\r\n                      <Button\r\n                        floated='right'\r\n                        icon='edit'\r\n                        onClick={() => setIsEditingDescription(true)}\r\n                      />\r\n                    )}\r\n                  </>\r\n                )}\r\n              </Segment>\r\n              {isHostOrAdminOfGroup && isAddingPhoto && (\r\n                <GroupUploadPhoto\r\n                  groupId={selectedGroupId}\r\n                  uploadPhoto={uploadPhoto}\r\n                  loading={loadingGroupPhoto}\r\n                  setIsAddingPhoto={setIsAddingPhoto}\r\n                />\r\n              )}\r\n              <Item.Description>\r\n                <Segment\r\n                  clearing\r\n                  attached\r\n                  style={{\r\n                    padding: '6px',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255,255,255,0.4)',\r\n                    backgroundColor: 'rgb(7, 20, 38)',\r\n                    color: 'white',\r\n                  }}\r\n                >\r\n                  <GroupAdminsList\r\n                    admins={members!.filter(\r\n                      (member: IMember) => member.isAdmin || member.isHost\r\n                    )}\r\n                    members={members!.filter(\r\n                      (member: IMember) => !member.isAdmin && !member.isHost\r\n                    )}\r\n                    isHostOrAdmin={isHostOrAdminOfGroup}\r\n                  />\r\n                </Segment>\r\n                {isHostOrAdminOfGroup && (\r\n                  <GroupClickToComment isAnnouncement={true} />\r\n                )}\r\n                {group.announcements!.length > 0 && (\r\n                  <GroupAnnouncement\r\n                    groupId={selectedGroupId}\r\n                    announcements={group.announcements}\r\n                    isHostOrAdminOfGroup={isHostOrAdminOfGroup}\r\n                    deleteAnnouncement={deleteAnnouncement}\r\n                    submittingAnnouncement={submittingAnnouncement}\r\n                  />\r\n                )}\r\n              </Item.Description>\r\n            </Item.Content>\r\n          </Item>\r\n          <Divider />\r\n          <GroupDetailedChatFlow />\r\n          <Item.Content>\r\n            <Item.Extra>\r\n              <GroupDetailsFooter group={group} />\r\n            </Item.Extra>\r\n            <Button\r\n              loading={submittingGroup}\r\n              negative\r\n              disabled={isHostOfGroup}\r\n              onClick={() => leaveGroup(id)}\r\n            >\r\n              Leave Group\r\n            </Button>\r\n          </Item.Content>\r\n        </Item.Content>\r\n      </Item>\r\n    </Item.Group>\r\n  );\r\n};\r\n\r\nexport default observer(GroupDetails);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Divider, Dropdown, Grid, Segment } from 'semantic-ui-react';\r\nimport GroupListExplainer from './GroupListExplainer';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { IGroup, IMember } from '../../../app/models/groups';\r\nimport GroupSummary from './GroupSummary';\r\nimport GroupForm from '../Form/GroupForm';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport GroupDetails from '../Details/GroupDetails';\r\n\r\nimport { RouteComponentProps, useHistory } from 'react-router-dom';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface RouteParams {\r\n  groupId: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nconst GroupList: React.FC<IProps> = () => {\r\n  let history = useHistory();\r\n\r\n  const { groupStore, userStore } = useStore();\r\n  const { loadGroups, setSelectedGroupEmpty, selectedGroupId } = groupStore;\r\n  const { user } = userStore;\r\n\r\n  let isProfileRedirect = history.location.state === 'profileGroups';\r\n  const [selectedGroup, setSelectedGroup] = useState<null | string>(\r\n    isProfileRedirect ? selectedGroupId : null\r\n  );\r\n  const [isCreatingGroup, setCreatingGroup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function gottaLoadGroups() {\r\n      await loadGroups();\r\n    }\r\n    // We need to load groups if we arent redirected from profiles\r\n    // OR if user refresh page on group from a redirect.\r\n    if (\r\n      (!isProfileRedirect && selectedGroupId === '') ||\r\n      (isProfileRedirect && selectedGroupId === '')\r\n    ) {\r\n      gottaLoadGroups();\r\n    }\r\n    return () => {\r\n      //setSelectedGroupEmpty();\r\n      //stopHubConnection();\r\n    };\r\n  }, [selectedGroupId, loadGroups, setSelectedGroupEmpty, isProfileRedirect]);\r\n\r\n  const handleDropDownChange = async (e: any, data: any) => {\r\n    if (selectedGroupId) {\r\n      await groupStore.stopHubConnection();\r\n    }\r\n    groupStore.setSelectedGroup(data.value);\r\n    setSelectedGroup(data.value);\r\n  };\r\n\r\n  const isMember = (selectedGroup: string) => {\r\n    // get the currently logged in user\r\n    if (!groupStore.selectedGroup) return;\r\n    let checkingGrp: IGroup = groupStore.selectedGroup;\r\n    let isMemberFlag = false;\r\n    // Check if user is member in group\r\n    checkingGrp.members?.forEach((member: IMember) => {\r\n      if (member.username === user?.username) isMemberFlag = true;\r\n    });\r\n\r\n    return isMemberFlag;\r\n  };\r\n\r\n  if (groupStore.loadingGroups)\r\n    return <LoadingComponent content='Loading Groups...' />;\r\n\r\n  return isCreatingGroup ? (\r\n    <GroupForm\r\n      setCreatingGroup={setCreatingGroup}\r\n      setSelectedGroup={setSelectedGroup}\r\n    />\r\n  ) : (\r\n    <Segment clearing style={{ border: '2px solid #bc4123' }}>\r\n      <Grid\r\n        style={{\r\n          margin: '0px',\r\n          marginBottom: '14px',\r\n        }}\r\n        stackable\r\n      >\r\n        <Grid.Row style={{ paddingBottom: '0px' }} columns={2}>\r\n          <Grid.Column\r\n            floated={'left'}\r\n            style={{ margin: '0px', padding: '10px' }}\r\n          >\r\n            <Dropdown\r\n              style={{ marginLeft: '0px' }}\r\n              placeholder='Select Group'\r\n              selection\r\n              defaultValue={selectedGroup!}\r\n              options={groupStore.groupTitles}\r\n              onChange={handleDropDownChange}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column align='right' floated={'right'}>\r\n            <Button\r\n              style={{ margin: '0px' }}\r\n              positive\r\n              onClick={() => setCreatingGroup(true)}\r\n            >\r\n              Create Group\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Divider\r\n          fitted\r\n          style={{\r\n            marginLeft: '10px',\r\n            marginRight: '10px',\r\n            marginBottom: '0px',\r\n          }}\r\n        />\r\n        <Grid.Row style={{ margin: '10px' }} centered columns={1}>\r\n          <Segment\r\n            clearing\r\n            style={{\r\n              backgroundColor: 'rgb(7, 20, 38)',\r\n              border: 'none',\r\n            }}\r\n          >\r\n            {selectedGroup ? (\r\n              isMember(selectedGroup!) ? (\r\n                <GroupDetails\r\n                  group={groupStore.groupsByDate.find(\r\n                    (group: IGroup) => group.id === selectedGroup\r\n                  )}\r\n                />\r\n              ) : (\r\n                <GroupSummary\r\n                  group={groupStore.groupsByDate.find(\r\n                    (group: IGroup) => group.id === selectedGroup\r\n                  )}\r\n                ></GroupSummary>\r\n              )\r\n            ) : (\r\n              <GroupListExplainer />\r\n            )}\r\n          </Segment>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(GroupList);\r\n","import { AxiosResponse } from 'axios';\r\nimport React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n  error: any;\r\n  text?: string;\r\n}\r\n/*\r\n<Message error>\r\n<Message.Header>{error.statusText}</Message.Header>\r\n{error.data && Object.keys(error.data.errors).length > 0 && (\r\n  <Message.List>\r\n    {Object.values(error.data.errors)\r\n      .flat()\r\n      .map((err: any, i) => (\r\n        <Message.Item key={i}>{err}</Message.Item>\r\n      ))}\r\n  </Message.List>\r\n)}\r\n{text && <Message.Content content={text} />}\r\n</Message> */\r\nconst ErrorMessage: React.FC<IProps> = ({ error, text }) => {\r\n  console.log('error: ', error, ' text: ', text);\r\n  return (\r\n    <Message error>\r\n      <Message.Header>{text}</Message.Header>\r\n      {error && (\r\n        <Message.List>\r\n          {error.length > 0 &&\r\n            error.map((err: any, i: number) => (\r\n              <Message.Item key={i}>{err}</Message.Item>\r\n            ))}\r\n        </Message.List>\r\n      )}\r\n      {typeof error.data === 'string' && (\r\n        <Message.Content content={error.data} />\r\n      )}\r\n    </Message>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { FORM_ERROR } from 'final-form';\r\nimport React from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Button, Form, Header } from 'semantic-ui-react';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n// requirement fields for validation in form.\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\n\r\nconst LoginForm = () => {\r\n  const { userStore } = useStore();\r\n  const { login } = userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        login(values).catch((error) => ({\r\n          [FORM_ERROR]: error,\r\n        }))\r\n      }\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtySinceLastSubmit,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error autoComplete='off'>\r\n          <Header\r\n            as='h2'\r\n            content='Login'\r\n            textAlign='center'\r\n            style={{ color: 'white' }}\r\n          />\r\n          <Field\r\n            name='email'\r\n            component={TextInput}\r\n            placeholder='Email'\r\n            validate={required}\r\n          />\r\n          <Field\r\n            validate={required}\r\n            name='password'\r\n            component={TextInput}\r\n            placeholder='Password'\r\n            type='password'\r\n          />\r\n          {submitError && !dirtySinceLastSubmit && (\r\n            <ErrorMessage\r\n              error={submitError}\r\n              text='invalid email or password'\r\n            />\r\n          )}\r\n          <Button\r\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n            loading={submitting}\r\n            color='teal'\r\n            content='Login'\r\n            fluid\r\n            className='loginButton'\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import { FORM_ERROR } from 'final-form';\r\nimport React from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Button, Form, Header } from 'semantic-ui-react';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n// requirement fields for validation in form.\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\n\r\nconst RegisterForm = () => {\r\n  const { userStore } = useStore();\r\n  const { register } = userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        register(values).catch((error) => ({\r\n          [FORM_ERROR]: error,\r\n        }))\r\n      }\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtySinceLastSubmit,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Header\r\n            as='h2'\r\n            content='Sign up'\r\n            style={{ color: 'white' }}\r\n            textAlign='center'\r\n          />\r\n          <Field\r\n            name='username'\r\n            component={TextInput}\r\n            placeholder='Username'\r\n            validate={required}\r\n          />\r\n          <Field\r\n            name='displayName'\r\n            component={TextInput}\r\n            placeholder='Display Name'\r\n            validate={required}\r\n          />\r\n          <Field\r\n            name='email'\r\n            component={TextInput}\r\n            placeholder='Email'\r\n            validate={required}\r\n          />\r\n          <Field\r\n            validate={required}\r\n            name='password'\r\n            component={TextInput}\r\n            placeholder='Password'\r\n            type='password'\r\n          />\r\n          {submitError && !dirtySinceLastSubmit && (\r\n            <ErrorMessage error={submitError} text={'Registration failed'} />\r\n          )}\r\n          <Button\r\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n            loading={submitting}\r\n            content='Register'\r\n            color='teal'\r\n            fluid\r\n            className='registerButton'\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Segment, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../user/LoginForm';\r\nimport RegisterForm from '../user/RegisterForm';\r\n\r\nconst HomePage = () => {\r\n  const token = window.localStorage.getItem('jwt');\r\n  const { userStore } = useStore();\r\n  const { isLoggedIn, user } = userStore;\r\n  //const { openModal } = rootStore.modalStore;\r\n  return (\r\n    <Segment inverted textAlign='center' vertical className='masthead'>\r\n      <Container text>\r\n        {isLoggedIn && user && token ? (\r\n          <Fragment>\r\n            <Header as='h2' inverted content={`Welcome ${user.displayName}`} />\r\n            <Button as={Link} to='/groups' size='huge' inverted>\r\n              Go to groups!\r\n            </Button>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <Header as='h2' inverted content='Welcome to Bug hunters!' />\r\n            <Segment\r\n              style={{\r\n                backgroundColor: 'rgb(7, 20, 38)',\r\n                border: '2px solid #bc4123',\r\n              }}\r\n            >\r\n              <Tab\r\n                menu={{ attached: 'bottom' }}\r\n                panes={[\r\n                  {\r\n                    menuItem: 'Login',\r\n                    render: () => (\r\n                      <Tab.Pane\r\n                        attached='top'\r\n                        style={{\r\n                          backgroundColor: 'rgb(7, 20, 38)',\r\n                          border: 'none',\r\n                        }}\r\n                      >\r\n                        <LoginForm />\r\n                      </Tab.Pane>\r\n                    ),\r\n                  },\r\n                  {\r\n                    menuItem: 'Register',\r\n                    render: () => (\r\n                      <Tab.Pane\r\n                        attached='top'\r\n                        style={{\r\n                          backgroundColor: 'rgb(7, 20, 38)',\r\n                          border: 'none',\r\n                        }}\r\n                      >\r\n                        <RegisterForm />\r\n                      </Tab.Pane>\r\n                    ),\r\n                  },\r\n                ]}\r\n              />\r\n            </Segment>\r\n          </Fragment>\r\n        )}\r\n      </Container>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Container, Menu, Image, Dropdown, Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst NavBar = () => {\r\n  const { userStore } = useStore();\r\n  const { user, logout } = userStore;\r\n  return (\r\n    <Grid>\r\n      <Menu fixed='top' inverted>\r\n        <Container style={{ border: 'none' }}>\r\n          <Grid.Column>\r\n            <Menu.Item header as={NavLink} exact to='/'>\r\n              <img\r\n                src='/assets/bughunter-oranges.png'\r\n                alt='logo'\r\n                style={{ marginRight: '10px' }}\r\n              />\r\n            </Menu.Item>\r\n          </Grid.Column>\r\n\r\n          <Menu.Item as={NavLink} to='/issues' name='Issues' />\r\n\r\n          <Menu.Item as={NavLink} to='/groups' name='Groups' />\r\n          {/*<Menu.Item as={NavLink} to='/errors' name='Errors' /> */}\r\n\r\n          <Menu.Item as={NavLink} to='/createTicket' name='Create Ticket' />\r\n          {user && (\r\n            <Menu.Item position='right'>\r\n              <Image\r\n                avatar\r\n                spaced='right'\r\n                src={user.image || '/assets/user.png'}\r\n              />\r\n              <Dropdown pointing='top left' text={user.displayName}>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item\r\n                    as={Link}\r\n                    to={`/profile/${user.username}`}\r\n                    text='My profile'\r\n                    icon='user'\r\n                  />\r\n                  <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Menu.Item>\r\n          )}\r\n        </Container>\r\n      </Menu>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(NavBar);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Segment, Image } from 'semantic-ui-react';\r\n\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst ProfileGroups = () => {\r\n  const { groupStore } = useStore();\r\n  const { groupTitleForUser } = groupStore;\r\n  const isItCalling = (key: string) => {\r\n    groupStore.setSelectedGroup(key);\r\n  };\r\n  return (\r\n    <Segment clearing style={{ border: 'none' }}>\r\n      <List divided relaxed>\r\n        {groupTitleForUser!.map((group) => {\r\n          return (\r\n            <List.Item key={group.key}>\r\n              <Image\r\n                avatar\r\n                src={(group.photo && group.photo!.url) || '/assets/user.png'}\r\n              />\r\n              <List.Content>\r\n                <List.Header\r\n                  as={Link}\r\n                  to={{\r\n                    pathname: `/groups`,\r\n                    state: 'profileGroups',\r\n                  }}\r\n                  onClick={() => isItCalling(group.key)}\r\n                >\r\n                  {group.text}\r\n                </List.Header>\r\n              </List.Content>\r\n            </List.Item>\r\n          );\r\n        })}\r\n      </List>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileGroups);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/photoUpload/PhotoUploadWidget';\r\n\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst ProfilePhotos = () => {\r\n  const { profileStore } = useStore();\r\n  const {\r\n    profile,\r\n    isCurrentUser,\r\n    uploadPhoto,\r\n    uploadingPhoto,\r\n    setMainPhoto,\r\n    loadingMainPhotoSet,\r\n    deletePhoto,\r\n  } = profileStore;\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n  const [target, setTarget] = useState<string | undefined>(undefined);\r\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\r\n    undefined\r\n  );\r\n  const handleUploadImage = async (photo: Blob) => {\r\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n  };\r\n  return (\r\n    <Tab.Pane\r\n      style={{\r\n        backgroundColor: 'rgb(7, 20, 38)',\r\n        border: 'none',\r\n      }}\r\n    >\r\n      <Grid>\r\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n          <Header\r\n            icon='image'\r\n            content='photos'\r\n            style={{ color: 'white', backgroundImage: 'white' }}\r\n          />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              style={{\r\n                backgroundColor: '#bc4123',\r\n                color: 'white',\r\n              }}\r\n              content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16} style={{ color: 'white' }}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget\r\n              uploadPhoto={handleUploadImage}\r\n              loading={uploadingPhoto}\r\n              isGroup={false}\r\n            />\r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n              {profile &&\r\n                profile.photos &&\r\n                profile.photos.map((photo) => (\r\n                  <Card key={photo.id}>\r\n                    <Image src={photo.url} />\r\n                    {isCurrentUser && (\r\n                      <Button.Group fluid width={2}>\r\n                        <Button\r\n                          name={photo.id}\r\n                          loading={loadingMainPhotoSet && target === photo.id}\r\n                          basic\r\n                          positive\r\n                          content='Main'\r\n                          onClick={(e) => {\r\n                            setTarget(e.currentTarget.name);\r\n                            setMainPhoto(photo);\r\n                          }}\r\n                          disabled={photo.isMain}\r\n                        />\r\n                        <Button\r\n                          name={photo.id}\r\n                          disabled={photo.isMain}\r\n                          loading={\r\n                            loadingMainPhotoSet && deleteTarget === photo.id\r\n                          }\r\n                          onClick={(e) => {\r\n                            deletePhoto(photo);\r\n                            setDeleteTarget(e.currentTarget.name);\r\n                          }}\r\n                          basic\r\n                          negative\r\n                          icon='trash'\r\n                        />\r\n                      </Button.Group>\r\n                    )}\r\n                  </Card>\r\n                ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Grid, Modal, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst ProfileSettings = () => {\r\n  const { profileStore, userStore } = useStore();\r\n  const { profile } = profileStore;\r\n  const { deleteAccount, isDeletingUser } = userStore;\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const deleteUser = async (user: string) => {\r\n    console.log('Delete: ', user);\r\n    await deleteAccount(user);\r\n  };\r\n\r\n  return (\r\n    <Segment\r\n      style={{\r\n        backgroundColor: 'rgb(7, 20, 38)',\r\n        borderBottom: '2px solid #bc4123',\r\n        border: '2px solid #bc4123',\r\n      }}\r\n    >\r\n      <Grid>\r\n        <Grid.Row\r\n          style={{\r\n            padding: '14px',\r\n            margin: '0px',\r\n          }}\r\n          floated='left'\r\n        >\r\n          <p\r\n            style={{\r\n              marginRight: '10px',\r\n              paddingTop: '7px',\r\n              textAlign: 'center',\r\n              color: 'white',\r\n            }}\r\n          >\r\n            Permanently remove your account from Bug Hunters\r\n          </p>\r\n          <Modal\r\n            open={isOpen}\r\n            onClose={() => setIsOpen(false)}\r\n            onOpen={() => setIsOpen(true)}\r\n            size='mini'\r\n            trigger={\r\n              <Button\r\n                floated='right'\r\n                style={{\r\n                  backgroundColor: '#bc4123',\r\n                  borderBottom: '2px solid #bc4123',\r\n                  color: 'white',\r\n                }}\r\n              >\r\n                Delete Account\r\n              </Button>\r\n            }\r\n          >\r\n            <Modal.Header>Delete Your Account</Modal.Header>\r\n            <Modal.Content>\r\n              Are you sure you want to delete your account?\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n              <Button\r\n                loading={isDeletingUser}\r\n                positive\r\n                onClick={() => deleteUser(profile!.username)}\r\n              >\r\n                Yes\r\n              </Button>\r\n              <Button primitive='true' onClick={() => setIsOpen(false)}>\r\n                No\r\n              </Button>\r\n            </Modal.Actions>\r\n          </Modal>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileSettings);\r\n","import React from 'react';\r\nimport { Popup } from 'semantic-ui-react';\r\n\r\nconst dotStyles = {\r\n  border: '1px solid',\r\n  borderRadius: '50%',\r\n  width: '18px',\r\n  height: '18px',\r\n  display: 'inline-block',\r\n  margin: '2px',\r\n};\r\ninterface IProps {\r\n  circleColor?: string;\r\n  status: string;\r\n  isFilled?: boolean;\r\n}\r\nconst StatusCircle: React.FC<IProps> = ({ circleColor, status, isFilled }) => {\r\n  const findColor = () => {\r\n    if (status?.toLowerCase() === 'open') {\r\n      return 'blue';\r\n    } else if (status?.toLowerCase() === 'verify') {\r\n      return 'green';\r\n    } else if (status?.toLowerCase() === 'closed') {\r\n      return 'red';\r\n    }\r\n  };\r\n  return (\r\n    <Popup\r\n      header={`Status: ${status}`}\r\n      trigger={\r\n        <span\r\n          style={{\r\n            color: findColor(),\r\n            backgroundColor: isFilled ? findColor() : undefined,\r\n            ...dotStyles,\r\n          }}\r\n        />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default StatusCircle;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Segment, Image } from 'semantic-ui-react';\r\nimport StatusCircle from '../../app/common/stylings/StatusCircle';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst ProfileTickets = () => {\r\n  const { profileStore, ticketStore } = useStore();\r\n  const { profile } = profileStore;\r\n  const { setSelectedTicket } = ticketStore;\r\n\r\n  return (\r\n    <Segment clearing style={{ border: 'none' }}>\r\n      <List divided relaxed>\r\n        {profile!.tickets.map((ticket) => {\r\n          return (\r\n            <List.Item key={ticket.id}>\r\n              <Image>\r\n                <StatusCircle status={ticket.status} isFilled={true} />\r\n              </Image>\r\n\r\n              <List.Content>\r\n                <List.Header\r\n                  as={Link}\r\n                  to={`/ticket/${ticket.groupId}/${ticket.id}`}\r\n                  onClick={() => setSelectedTicket(ticket)}\r\n                >\r\n                  {ticket.title}\r\n                </List.Header>\r\n                <List.Description as='a' style={{ color: 'white' }}>\r\n                  {format(new Date(ticket.date), 'eeee do MMMM')}\r\n                </List.Description>\r\n              </List.Content>\r\n            </List.Item>\r\n          );\r\n        })}\r\n      </List>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileTickets);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileGroups from './ProfileGroups';\r\n\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileSettings from './ProfileSettings';\r\nimport ProfileTickets from './ProfileTickets';\r\n\r\nconst ProfileContent = () => {\r\n  const panes = [\r\n    { menuItem: 'Tickets', render: () => <ProfileTickets /> },\r\n    { menuItem: 'Groups', render: () => <ProfileGroups /> },\r\n    { menuItem: 'Photos', render: () => <ProfilePhotos /> },\r\n    {\r\n      menuItem: 'Settings',\r\n      render: () => isCurrentUser && <ProfileSettings />,\r\n    },\r\n  ];\r\n  const { profileStore } = useStore();\r\n  const { isCurrentUser } = profileStore;\r\n  return (\r\n    <Tab\r\n      menu={{\r\n        borderless: true,\r\n        attached: false,\r\n        tabular: false,\r\n      }}\r\n      panes={panes}\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(ProfileContent);\r\n","import { ITicket } from \"./tickets\";\r\n\r\nexport interface IProfile {\r\n    displayName: string;\r\n    username: string;\r\n    bio: string;\r\n    image: string;\r\n    photos: IPhoto[];\r\n    tickets: ITicket[];\r\n}\r\nexport interface IProfileEdits {\r\n    displayName: string,\r\n    bio?: string\r\n}\r\n\r\nexport class ProfileFormValues implements IProfileEdits {\r\n    displayName: string = \"\";\r\n    bio?: string = \"\";\r\n    constructor(init?: IProfile) {\r\n        this.displayName = init?.displayName!;\r\n        this.bio = init?.bio;\r\n    }\r\n}\r\n\r\nexport interface IPhoto {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport TextAreaInput from '../../app/common/form/TextAreaInput';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport {\r\n  IProfile,\r\n  IProfileEdits,\r\n  ProfileFormValues,\r\n} from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\n\r\ninterface IProps {\r\n  editProfile: (profile: IProfileEdits) => Promise<void>;\r\n  setEditMode: (flag: boolean) => void;\r\n  profile: IProfile;\r\n}\r\n\r\nconst ProfileAbout: React.FC<IProps> = ({\r\n  editProfile,\r\n  profile,\r\n  setEditMode,\r\n}) => {\r\n  const { profileStore, userStore } = useStore();\r\n  const { loadingProfileUpdate } = profileStore;\r\n  const { user } = userStore;\r\n  const [profileData, setProfileData] = useState(new ProfileFormValues());\r\n\r\n  const handleFinalFormSubmit = async (values: any) => {\r\n    try {\r\n      await editProfile(values);\r\n      setEditMode(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Load in initial profile values to fill the form\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setProfileData(new ProfileFormValues(profile!));\r\n    }\r\n  }, [user, profile, setProfileData]);\r\n\r\n  return (\r\n    <FinalForm\r\n      initialValues={profileData}\r\n      onSubmit={handleFinalFormSubmit}\r\n      render={({ handleSubmit, invalid, pristine }) => (\r\n        <Form onSubmit={handleSubmit} loading={loadingProfileUpdate}>\r\n          <Field\r\n            validate={required}\r\n            placeholder='Display Name'\r\n            value={profileData.displayName}\r\n            name='displayName'\r\n            component={TextInput}\r\n          />\r\n          <Field\r\n            placeholder='Bio'\r\n            value={profileData.bio}\r\n            name='bio'\r\n            rows={3}\r\n            component={TextAreaInput}\r\n          />\r\n          <Button\r\n            disabled={loadingProfileUpdate || invalid || pristine}\r\n            loading={loadingProfileUpdate}\r\n            floated='right'\r\n            positive\r\n            type='submit'\r\n            content='submit'\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(ProfileAbout);\r\n","import React, { useContext, useState } from 'react';\r\nimport { Button, Grid, Header, Image, Item } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\n\r\nconst ProfileDescription: React.FC<{\r\n  description: string;\r\n  displayName: string;\r\n  userImage?: string;\r\n}> = ({ description, displayName, userImage }) => {\r\n  const { profileStore } = useStore();\r\n  const { isCurrentUser, editProfile, profile } = profileStore;\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        <Header size='huge' style={{ color: 'white' }}>\r\n          <Image fluid rounded src={userImage || '/assets/user.png'} />\r\n          <Header.Content attached='top'>{displayName}</Header.Content>\r\n\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              style={{ color: 'white', backgroundColor: '#bc4123' }}\r\n              content={editMode ? 'Cancel' : 'Edit Profile'}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n        </Header>\r\n        <Item.Description floated='right' style={{ color: 'white' }}>\r\n          {editMode ? (\r\n            <ProfileAbout\r\n              editProfile={editProfile}\r\n              profile={profile!}\r\n              setEditMode={setEditMode}\r\n            />\r\n          ) : (\r\n            <span>{profile!.bio}</span>\r\n          )}\r\n        </Item.Description>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ProfileDescription;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Grid, Item, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileDescription from './ProfileDescription';\r\n\r\ninterface RouteParams {\r\n  username: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nconst Profile: React.FC<IProps> = ({ match }) => {\r\n  const { profileStore, groupStore } = useStore();\r\n  const { loadingProfile, profile, loadProfile } = profileStore;\r\n  const { loadGroups, loadingGroups } = groupStore;\r\n\r\n  useEffect(() => {\r\n    async function loadstuff() {\r\n      await loadProfile(match.params.username);\r\n      await loadGroups();\r\n    }\r\n    loadstuff();\r\n  }, [loadProfile, match, loadGroups]);\r\n\r\n  if (loadingProfile || loadingGroups)\r\n    return <LoadingComponent content='Loading profile...' />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        <Segment\r\n          style={{\r\n            backgroundColor: 'rgb(7, 20, 38)',\r\n            borderBottom: '2px solid #bc4123',\r\n            border: '2px solid #bc4123',\r\n          }}\r\n        >\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Content verticalAlign='top'>\r\n                <ProfileDescription\r\n                  userImage={profile!.image}\r\n                  displayName={profile!.displayName}\r\n                  description={profile!.bio}\r\n                />\r\n              </Item.Content>\r\n            </Item>\r\n            <Item>\r\n              <Item.Content verticalAlign='top'>\r\n                <ProfileContent />\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(Profile);\r\n","import { IComment } from \"./groups\";\r\n\r\nexport interface ITicket {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    device: string;\r\n    date: string;\r\n    bugType: string;\r\n    status: string;\r\n    priority: string;\r\n    version: string;\r\n    groupId?: string;\r\n    photos?: ITicketPhoto[];\r\n    comments?: IComment[];\r\n    creator: string;\r\n    texts?: ITicketText[];\r\n}\r\n\r\nexport class TicketFormValues implements ITicket {\r\n    id: string = ''\r\n    title: string = '';\r\n    description: string = '';\r\n    device: string = '';\r\n    date: string = '';\r\n    bugType: string = '';\r\n    status: string = '';\r\n    priority: string = '';\r\n    version: string = '';\r\n    groupId?: string = '';\r\n    photos?: ITicketPhoto[];\r\n    comments?: IComment[];\r\n    creator: string = \"\";\r\n    texts?: ITicketText[];\r\n    \r\n    constructor(init?: TicketFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport interface ITicketPhoto {\r\n    id: string;\r\n    url: string;\r\n    preview?: string;\r\n    name: string;\r\n}\r\n\r\nexport interface ITicketText {\r\n    id: string;\r\n    url: string;\r\n    name: string;\r\n    preview?: string;\r\n}","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { Form, FormFieldProps, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<any, HTMLElement>, FormFieldProps {}\r\nconst SelectInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  options,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      <Select\r\n        value={input.value}\r\n        onChange={(e, data) => input.onChange(data.value)}\r\n        placeholder={placeholder}\r\n        options={options}\r\n      />\r\n      {touched && error && (\r\n        <Label basic color='red'>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import React, { useState } from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\ninterface IProps {\r\n  status: boolean;\r\n  header: string;\r\n  message: string;\r\n  negative?: boolean;\r\n}\r\nconst MessageComponent: React.FC<IProps> = ({ status, header, message }) => {\r\n  const [isShowingMessage, setIsShowingMessage] = useState(true);\r\n  if (isShowingMessage) {\r\n    return (\r\n      <Message\r\n        onDismiss={() => setIsShowingMessage(!isShowingMessage)}\r\n        negative={status}\r\n      >\r\n        <Message.Header>{header}</Message.Header>\r\n        <Message.Content>{message}</Message.Content>\r\n      </Message>\r\n    );\r\n  }\r\n  return <></>;\r\n};\r\n\r\nexport default MessageComponent;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Loader } from 'semantic-ui-react';\r\n\r\nconst FileRead: React.FC<{ url: any }> = ({ url }) => {\r\n  const [fileString, setFileString] = useState('');\r\n  useEffect(() => {\r\n    if (!fileString) {\r\n      showFile();\r\n    }\r\n  }, []);\r\n\r\n  const showFile = async () => {\r\n    //e.preventDefault()\r\n    try {\r\n      const file = await fetch(\r\n        url.url ? url.url : url.preview\r\n      ).then((response) => response.arrayBuffer());\r\n\r\n      const dataView = new DataView(file);\r\n      //iso-8859-1\r\n      const decoder = new TextDecoder('utf-8');\r\n      const decodedString = decoder.decode(dataView);\r\n\r\n      setFileString(decodedString);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ whiteSpace: 'pre-wrap' }}>\r\n      {fileString ? fileString : <Loader />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileRead;\r\n","import React from 'react';\r\nimport { Modal, Image, List } from 'semantic-ui-react';\r\nimport FileRead from './FileRead';\r\n\r\nconst PhotoModal: React.FC<{\r\n  img: any;\r\n  isOpen: boolean;\r\n  id: string;\r\n  setIsModalOpen: (flag: boolean) => void;\r\n  isPhoto?: boolean;\r\n}> = ({ img, isOpen, id, setIsModalOpen, isPhoto }) => {\r\n  return (\r\n    <Modal\r\n      key={id}\r\n      open={isOpen && id === img.id}\r\n      onClose={() => setIsModalOpen(false)}\r\n      onOpen={() => setIsModalOpen(true)}\r\n      size='small'\r\n    >\r\n      <Modal.Header>\r\n        <List floated='right' horizontal>\r\n          <List.Item href={img.url ? img.url : img.preview}>\r\n            <p>Go to file</p>\r\n          </List.Item>\r\n        </List>\r\n        <List flaoted='left' horizontal>\r\n          <List.Item>\r\n            <p>{img.name}</p>\r\n          </List.Item>\r\n        </List>\r\n      </Modal.Header>\r\n      {isPhoto && (\r\n        <Image\r\n          fluid\r\n          src={img.url ? img.url : img.preview}\r\n          style={{ cursor: 'pointer' }}\r\n          onClick={() => {\r\n            setIsModalOpen(false);\r\n          }}\r\n        />\r\n      )}\r\n      {!isPhoto && (\r\n        <>\r\n          <Modal.Content scrolling>\r\n            <FileRead url={img} />\r\n          </Modal.Content>\r\n        </>\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default PhotoModal;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Grid, Segment, Image, Button, Icon, Popup } from 'semantic-ui-react';\r\nimport { ITicketPhoto, ITicketText } from '../../../app/models/tickets';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport PhotoModal from '../Details/PhotoModal';\r\n\r\nconst TicketAttachementsContainer: React.FC<{\r\n  photos?: ITicketPhoto[] | undefined;\r\n  texts?: ITicketText[] | undefined;\r\n  setFiles?: (list: any[]) => void;\r\n}> = ({ photos, setFiles, texts }) => {\r\n  const { ticketStore } = useStore();\r\n  const {\r\n    isTicketCreatorOrAdmin,\r\n    selectedTicket,\r\n    deletePhoto,\r\n    deleteTextFile,\r\n    isDeletingPhoto,\r\n    isDeletingText,\r\n    setTicketFiles,\r\n  } = ticketStore;\r\n\r\n  const [idForSelectedImg, setIdForSelectedImg] = useState('');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  let renderFiles = photos ? photos : texts;\r\n\r\n  const renderContent = (files: any[], isText: boolean) => {\r\n    return (\r\n      files!.length > 0 && (\r\n        <Grid.Row\r\n          fluid='true'\r\n          columns={\r\n            files!.length as\r\n              | 1\r\n              | 2\r\n              | 3\r\n              | 4\r\n              | 5\r\n              | 6\r\n              | 7\r\n              | 8\r\n              | 9\r\n              | 10\r\n              | 11\r\n              | 12\r\n              | 13\r\n              | 14\r\n              | 15\r\n              | 16\r\n              | undefined\r\n          }\r\n        >\r\n          {files?.map((img: any, i: number) => (\r\n            <Grid.Column key={i} fluid='true'>\r\n              <Segment compact style={{ position: 'relative' }}>\r\n                {!isText && (\r\n                  <div style={{ margin: 'auto' }}>\r\n                    <Image\r\n                      src={img.url ? img.url : img.preview}\r\n                      id={i}\r\n                      width='200px'\r\n                      height='200px'\r\n                      style={{ cursor: 'pointer' }}\r\n                      onClick={() => {\r\n                        img.id = img.id ? img.id : i.toString();\r\n                        setIdForSelectedImg(img.id);\r\n                        setIsModalOpen(true);\r\n                      }}\r\n                    />\r\n                    <p style={{ textAlign: 'center', color: 'black' }}>\r\n                      {img.name}\r\n                    </p>\r\n                    <PhotoModal\r\n                      img={img}\r\n                      isOpen={isModalOpen}\r\n                      id={idForSelectedImg}\r\n                      setIsModalOpen={setIsModalOpen}\r\n                      isPhoto={true}\r\n                    />\r\n                  </div>\r\n                )}\r\n\r\n                {isText && (\r\n                  <div style={{ margin: 'auto' }}>\r\n                    <Icon\r\n                      name='file outline'\r\n                      size='massive'\r\n                      style={{ marginLeft: '2px', cursor: 'pointer' }}\r\n                      onClick={() => {\r\n                        img.id = img.id ? img.id : i.toString();\r\n                        setIsModalOpen(true);\r\n                        setIdForSelectedImg(img.id);\r\n                      }}\r\n                    />\r\n                    <p style={{ textAlign: 'center', color: 'black' }}>\r\n                      {img.name}\r\n                    </p>\r\n                    <PhotoModal\r\n                      img={img}\r\n                      isOpen={isModalOpen}\r\n                      id={idForSelectedImg}\r\n                      setIsModalOpen={setIsModalOpen}\r\n                      isPhoto={false}\r\n                    />\r\n                  </div>\r\n                )}\r\n                {isTicketCreatorOrAdmin && (\r\n                  <Popup\r\n                    header={'Delete this attachement.'}\r\n                    trigger={\r\n                      <Button\r\n                        style={{\r\n                          position: 'absolute',\r\n                          top: '0',\r\n                          left: '0',\r\n                          right: '0',\r\n                          border: '1px solid black',\r\n                        }}\r\n                        negative\r\n                        icon='remove'\r\n                        size='mini'\r\n                        loading={\r\n                          (isDeletingPhoto || isDeletingText) &&\r\n                          idForSelectedImg === img.id\r\n                        }\r\n                        onClick={() => {\r\n                          console.log('IMG ID: ', img.id);\r\n                          setIdForSelectedImg(\r\n                            img.id ? img.id : (img.id = i.toString())\r\n                          );\r\n                          handleOnClick(isText, img);\r\n                        }}\r\n                      />\r\n                    }\r\n                  />\r\n                )}\r\n              </Segment>\r\n            </Grid.Column>\r\n          ))}\r\n        </Grid.Row>\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleOnClick = async (isText: boolean, img?: any) => {\r\n    if (img.id.length > 2) {\r\n      // Then this image is hosted on cloudinary.\r\n      if (!isText) {\r\n        await deletePhoto(selectedTicket!.id, img.id);\r\n      } else {\r\n        await deleteTextFile(selectedTicket!.id, img.id);\r\n      }\r\n    } else {\r\n      let newFiles = new Array(renderFiles!.length - 1);\r\n\r\n      for (var i = 0; i < renderFiles?.length!; i++) {\r\n        if (i === parseInt(img.id)) {\r\n        } else {\r\n          if (renderFiles![i]) newFiles[i] = renderFiles![i];\r\n        }\r\n      }\r\n\r\n      // console.log('newFiles: ', newFiles);\r\n      setFiles!(newFiles);\r\n      setTicketFiles(newFiles);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid style={{ paddingTop: '10px' }}>\r\n        {photos && renderContent(photos, false)}\r\n        {texts && renderContent(texts, true)}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default observer(TicketAttachementsContainer);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Container, Icon } from 'semantic-ui-react';\r\nimport MessageComponent from '../../../app/common/message/MessageComponent';\r\nimport PhotoWidgetDropzone from '../../../app/common/photoUpload/PhotoWidgetDropzone';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TicketAttachementsContainer from './TicketAttachementsContainer';\r\n\r\nconst LIMIT_FILESIZE = 500000;\r\nconst LIMIT_FILETYPE = ['image/jpeg', 'image/png', 'image/jpg'];\r\n\r\nconst LIMIT_FILESIZETEXT = 50000;\r\nconst LIMIT_FILETYPETEXT = ['text/plain', 'image/txt'];\r\n\r\nconst TicketUploadPhoto: React.FC<{\r\n  isPreview: boolean;\r\n  isPhoto?: boolean;\r\n}> = ({ isPreview, isPhoto }) => {\r\n  const { ticketStore } = useStore();\r\n  const { isAddingPhoto, setTicketFiles } = ticketStore;\r\n  const [files, setFiles] = useState<any[] | any>([]);\r\n  const [isImageTooBig, setIsImageTooBig] = useState(false);\r\n  const [isBadFileType, setIsBadFileType] = useState(false);\r\n\r\n  const handleFileSetting = (val: any) => {\r\n    let isTooBig = false;\r\n    let isBadFile = false;\r\n    let totalFileSize = 0;\r\n    val.forEach((item: any) => {\r\n      totalFileSize += item.size;\r\n      if (\r\n        isPhoto\r\n          ? !LIMIT_FILETYPE.includes(item.type)\r\n          : !LIMIT_FILETYPETEXT.includes(item.type)\r\n      ) {\r\n        console.log('Textfile: ', item);\r\n        isBadFile = true;\r\n        setFiles([]);\r\n        setIsBadFileType(true);\r\n        return;\r\n      }\r\n      if (item.size > (isPhoto ? LIMIT_FILESIZE : LIMIT_FILESIZETEXT)) {\r\n        isTooBig = true;\r\n        setFiles([]);\r\n        return;\r\n      }\r\n    });\r\n\r\n    if (totalFileSize > LIMIT_FILESIZE) {\r\n      isTooBig = true;\r\n      setFiles([]);\r\n    }\r\n\r\n    if (!isTooBig && !isBadFile) {\r\n      setFiles(val);\r\n      // This call destroys document and destroys blob url!\r\n      //if (setFilesForForm) setFilesForForm(newMap); <--------\r\n      setTicketFiles(val);\r\n    } else {\r\n      if (isBadFile) setIsBadFileType(true);\r\n      if (isTooBig) setIsImageTooBig(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container style={{ marginBottom: '10px' }} fluid>\r\n      <PhotoWidgetDropzone setFiles={handleFileSetting} isTicket={true}>\r\n        <Button\r\n          type='button'\r\n          size='tiny'\r\n          style={{ border: '1px black dashed', marginTop: '10px' }}\r\n          onClick={() => {\r\n            setIsImageTooBig(false);\r\n            setIsBadFileType(false);\r\n          }}\r\n          fluid\r\n        >\r\n          {isPhoto ? 'Add photo' : 'Add text'}\r\n          <Icon name='upload' size='large' style={{ marginLeft: '2px' }} />\r\n        </Button>\r\n      </PhotoWidgetDropzone>\r\n      {isImageTooBig && (\r\n        <MessageComponent\r\n          status={true}\r\n          header={'Sorry your image is too big'}\r\n          message={`Compress the image and try again. Size > ${LIMIT_FILESIZE} kb.`}\r\n        />\r\n      )}\r\n      {isBadFileType && (\r\n        <MessageComponent\r\n          status={true}\r\n          header={'Sorry that filetype is not accepted'}\r\n          message={'Change filetype to image/jpg or image/png.'}\r\n        />\r\n      )}\r\n      {files.length > 0 && !isImageTooBig && isPhoto! && !isBadFileType && (\r\n        <TicketAttachementsContainer photos={files} setFiles={setFiles} />\r\n      )}\r\n      {files.length > 0 && !isImageTooBig && !isPhoto! && !isBadFileType && (\r\n        <TicketAttachementsContainer texts={files} setFiles={setFiles} />\r\n      )}\r\n      {isPreview && files.length > 0 && !isImageTooBig && !isBadFileType && (\r\n        <Button\r\n          style={{ marginTop: '10px' }}\r\n          positive\r\n          content='submit'\r\n          loading={isAddingPhoto}\r\n          onClick={() => {\r\n            setFiles([]);\r\n          }}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default observer(TicketUploadPhoto);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Form, Segment } from 'semantic-ui-react';\r\nimport { ITicket, TicketFormValues } from '../../../app/models/tickets';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport SelectInput from '../../../app/common/form/SelectInput';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\n\r\nimport TicketUploadPhoto from './TicketUploadPhoto';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n// requirement fields for validation in form.\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\nconst minLength = (min: any) => (value: any) =>\r\n  value.length > min || value >= min\r\n    ? undefined\r\n    : `Should be atleast ${min} characters long.`;\r\nconst composeValidators = (...validators: any) => (value: string) =>\r\n  validators.reduce(\r\n    (error: any, validator: any) => error || validator(value),\r\n    undefined\r\n  );\r\n\r\nconst priorityOptions = [\r\n  { key: 'Low', value: 'low', text: 'Low' },\r\n  { key: 'Medium', value: 'medium', text: 'Medium' },\r\n  { key: 'High', value: 'high', text: 'High' },\r\n];\r\n\r\nconst statusOptions = [\r\n  { key: 'Open', value: 'open', text: 'Open' },\r\n  { key: 'Verify', value: 'verify', text: 'Ready for verification' },\r\n  { key: 'Closed', value: 'closed', text: 'Closed' },\r\n];\r\n\r\nconst paragraphStyles = {\r\n  size: '8px',\r\n  color: 'grey',\r\n  marginBottom: '2px',\r\n};\r\n\r\nconst TicketForm: React.FC<any | RouteComponentProps> = ({\r\n  ticket: initialTicketState,\r\n  setIsEditingTicket,\r\n}) => {\r\n  const { ticketStore, groupStore } = useStore();\r\n  const {\r\n    createTicket,\r\n    editTicket,\r\n    createWithPhoto,\r\n    submittingTicket,\r\n    ticketFiles,\r\n  } = ticketStore;\r\n  const {\r\n    groupTitleForUserOptions,\r\n    groupTitles,\r\n    loadGroups,\r\n    loadingGroups,\r\n  } = groupStore;\r\n  const ticket: ITicket = initialTicketState ?? new TicketFormValues();\r\n  const [files, setFiles] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    async function loadGroup() {\r\n      if (groupTitles.length <= 0) await loadGroups();\r\n    }\r\n    loadGroup();\r\n    return () => {\r\n      files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n    };\r\n  }, [loadGroups, groupTitles, files]);\r\n\r\n  const handleFinalFormSubmit = async (values: any) => {\r\n    const createdAtdate = new Date().toISOString();\r\n\r\n    if (ticket.id.length === 0) {\r\n      let newTicket = {\r\n        ...values,\r\n        date: createdAtdate,\r\n        id: uuid(),\r\n        // photos: files,\r\n      };\r\n      // Create a ticket with attached photo\r\n      if (ticketFiles.length > 0) {\r\n        // createWithPhoto adds the mobx state variable which holds all files.\r\n        createWithPhoto(newTicket);\r\n      } else {\r\n        // Create a new ticket\r\n        createTicket(newTicket);\r\n      }\r\n    } else {\r\n      console.log('Editing ticket: ', values);\r\n      // Editing existing ticket.\r\n      await editTicket(values);\r\n      if (!submittingTicket && setIsEditingTicket) setIsEditingTicket(false);\r\n    }\r\n  };\r\n  if (loadingGroups) return <LoadingComponent content='Preparing data...' />;\r\n  console.log('Groups are: ', groupTitleForUserOptions);\r\n  return (\r\n    <Segment fluid='true'>\r\n      <FinalForm\r\n        initialValues={ticket}\r\n        onSubmit={handleFinalFormSubmit}\r\n        render={({ handleSubmit, invalid, pristine }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <p style={paragraphStyles}>Group</p>\r\n            <Field\r\n              validate={required}\r\n              name='groupId'\r\n              placeholder='Group'\r\n              options={groupTitleForUserOptions}\r\n              value={ticket.groupId}\r\n              component={SelectInput}\r\n            />\r\n            <p style={paragraphStyles}>Title</p>\r\n            <Field\r\n              validate={required}\r\n              name='title'\r\n              placeholder='Title'\r\n              value={ticket.title}\r\n              component={TextInput}\r\n            />\r\n            <p style={paragraphStyles}>Version</p>\r\n            <Field\r\n              validate={required}\r\n              component={TextInput}\r\n              placeholder='Version'\r\n              name='version'\r\n              value={ticket.version}\r\n            />\r\n            <p style={paragraphStyles}>Priority</p>\r\n            <Field\r\n              validate={required}\r\n              component={SelectInput}\r\n              placeholder='Priority'\r\n              name='priority'\r\n              value={ticket.priority}\r\n              options={priorityOptions}\r\n            />\r\n            <p style={paragraphStyles}>Device</p>\r\n            <Field\r\n              validate={required}\r\n              component={TextInput}\r\n              placeholder='Device'\r\n              name='device'\r\n              value={ticket.device}\r\n            />\r\n            <p style={paragraphStyles}>Bug type</p>\r\n\r\n            <Field\r\n              validate={required}\r\n              component={TextInput}\r\n              placeholder='Bug type'\r\n              name='bugType'\r\n              value={ticket.bugType}\r\n            />\r\n            <p style={paragraphStyles}>Status</p>\r\n\r\n            <Field\r\n              validate={required}\r\n              component={SelectInput}\r\n              placeholder='Status'\r\n              name='status'\r\n              value={ticket.status}\r\n              options={statusOptions}\r\n            />\r\n            <p style={paragraphStyles}>Description</p>\r\n\r\n            <Field\r\n              validate={composeValidators(required, minLength(15))}\r\n              component={TextAreaInput}\r\n              rows={2}\r\n              name='description'\r\n              placeholder='Description'\r\n              value={ticket.description}\r\n            />\r\n            {!setIsEditingTicket && (\r\n              <TicketUploadPhoto isPreview={false} isPhoto={true} />\r\n            )}\r\n            {!setIsEditingTicket && (\r\n              <TicketUploadPhoto isPreview={false} isPhoto={false} />\r\n            )}\r\n            <Button\r\n              disabled={ticketStore.submittingTicket || invalid || pristine}\r\n              loading={ticketStore.submittingTicket}\r\n              type='submit'\r\n              positive\r\n            >\r\n              Submit Ticket\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(TicketForm);\r\n","import React, { useState } from 'react';\r\nimport { Field, Form as FinalForm } from 'react-final-form';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { IProfile } from '../../../app/models/profile';\r\nimport { ITicket } from '../../../app/models/tickets';\r\nimport { IUser } from '../../../app/models/user';\r\n\r\ninterface IProps {\r\n  isAddingComment: boolean;\r\n  addComment: (...args: any) => Promise<void>;\r\n  ticket?: ITicket;\r\n  profile?: IProfile;\r\n  user: IUser;\r\n}\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\n\r\nconst TicketAddComment: React.FC<IProps> = ({\r\n  addComment,\r\n  isAddingComment,\r\n  ticket,\r\n  profile,\r\n  user,\r\n}) => {\r\n  const [shouldComment, setShouldComment] = useState(false);\r\n  return (\r\n    <div style={{ margin: 'auto', paddingTop: '10px' }}>\r\n      {shouldComment ? (\r\n        <FinalForm\r\n          onSubmit={(val) =>\r\n            addComment(ticket, {\r\n              body: val.body,\r\n              username: user.username,\r\n              displayName: user.displayName,\r\n              createdAt: new Date(),\r\n              image: user.image,\r\n            })\r\n          }\r\n          render={({ handleSubmit, submitting, form, invalid, pristine }) => (\r\n            <Form\r\n              onSubmit={() =>\r\n                handleSubmit()!.then(() => {\r\n                  //console.log('Submitted');\r\n                  setShouldComment(false);\r\n                  form.reset();\r\n                })\r\n              }\r\n            >\r\n              <Field\r\n                name='body'\r\n                validate={required}\r\n                component={TextAreaInput}\r\n                rows={2}\r\n                placeholder={'Add Comment'}\r\n              />\r\n              <Button\r\n                disabled={isAddingComment || invalid || pristine}\r\n                content={'Add Reply'}\r\n                labelPosition='left'\r\n                icon='edit'\r\n                primary\r\n                loading={submitting || isAddingComment}\r\n              />\r\n              <Button\r\n                content='Cancel'\r\n                labelPosition='right'\r\n                icon='cancel'\r\n                type='button'\r\n                onClick={() => setShouldComment(false)}\r\n              />\r\n            </Form>\r\n          )}\r\n        />\r\n      ) : (\r\n        <Button\r\n          labelPosition='right'\r\n          icon='add'\r\n          content={'Comment'}\r\n          positive\r\n          inverted\r\n          onClick={() => setShouldComment(true)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicketAddComment;\r\n","import React from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\n\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\n\r\ninterface IProps {\r\n  ticketId: string;\r\n  commentId: string;\r\n  commentBody: string;\r\n  setIsEditComment: (flag: boolean) => void;\r\n  editComment: (\r\n    ticketId: string,\r\n    commentId: string,\r\n    body: string\r\n  ) => Promise<void>;\r\n  isEditingComment: boolean;\r\n}\r\n\r\nconst TicketCommentEdit: React.FC<IProps> = ({\r\n  ticketId,\r\n  commentId,\r\n  commentBody,\r\n  setIsEditComment,\r\n  editComment,\r\n  isEditingComment,\r\n}) => {\r\n  const handleFinalFormSubmit = async (values: any) => {\r\n    try {\r\n      await editComment(ticketId, commentId, values);\r\n      setIsEditComment(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: '4px' }}>\r\n      <FinalForm\r\n        initialValues={{ body: commentBody }}\r\n        onSubmit={handleFinalFormSubmit}\r\n        render={({ handleSubmit, invalid, pristine }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <Field\r\n              placeholder='body'\r\n              validate={required}\r\n              value={commentBody}\r\n              name='body'\r\n              rows={3}\r\n              component={TextAreaInput}\r\n            />\r\n            <Button\r\n              disabled={isEditingComment || invalid || pristine}\r\n              loading={isEditingComment}\r\n              floated='right'\r\n              positive\r\n              type='submit'\r\n              content='submit'\r\n            />\r\n            <Button\r\n              floated='right'\r\n              type='button'\r\n              content='cancel'\r\n              onClick={() => setIsEditComment(false)}\r\n            />\r\n          </Form>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicketCommentEdit;\r\n","import { formatDistance, formatDistanceStrict } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Grid,\r\n  Comment,\r\n  Item,\r\n  Button,\r\n  Segment,\r\n  Icon,\r\n  Container,\r\n} from 'semantic-ui-react';\r\nimport { IComment } from '../../../app/models/groups';\r\nimport { IUser } from '../../../app/models/user';\r\nimport TicketCommentEdit from './TicketCommentEdit';\r\n\r\ninterface IProps {\r\n  comments?: any;\r\n  editComment: (...args: any) => Promise<void>;\r\n  deleteComment: (...args: any) => Promise<void>;\r\n  user: IUser | null;\r\n  ticketId: string;\r\n  isEditingComment: boolean;\r\n  isDeletingComment: boolean;\r\n}\r\n\r\nconst TicketComment: React.FC<IProps> = ({\r\n  comments,\r\n  editComment,\r\n  deleteComment,\r\n  isEditingComment,\r\n  isDeletingComment,\r\n  user,\r\n  ticketId,\r\n}) => {\r\n  const [isEditComment, setIsEditComment] = useState(false);\r\n  const [isSelectedComment, setIsSelectedComment] = useState('');\r\n  return comments && comments.length > 0 ? (\r\n    comments?.map((comment: IComment, i: any) => (\r\n      <Grid\r\n        key={comment.id}\r\n        style={{\r\n          border: '1px solid black',\r\n          background: '#f2f2f2',\r\n          marginBottom: '1px',\r\n        }}\r\n      >\r\n        <Grid.Row>\r\n          <Grid.Column width={2}>\r\n            <Item.Group>\r\n              <Item style={{ border: '1px solid black' }}>\r\n                <Container\r\n                  style={{\r\n                    justifyContent: 'center',\r\n                    margin: 'auto',\r\n                    padding: '4px',\r\n                  }}\r\n                >\r\n                  <Item.Image\r\n                    src={comment.image || '/assets/user.png'}\r\n                    size='tiny'\r\n                    style={{ width: 'auto' }}\r\n                  />\r\n                  <Item.Extra\r\n                    as={Link}\r\n                    to={`/profile/${comment.username}`}\r\n                    style={{ textAlign: 'center' }}\r\n                  >\r\n                    {comment.displayName}\r\n                  </Item.Extra>\r\n                  <Item.Meta>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      Member for: <br />\r\n                      {formatDistanceStrict(\r\n                        new Date(user!.dateJoined!),\r\n                        new Date()\r\n                      )}\r\n                    </div>\r\n                  </Item.Meta>\r\n                </Container>\r\n              </Item>\r\n            </Item.Group>\r\n          </Grid.Column>\r\n          <Grid.Column width={14}>\r\n            <div style={{ padding: '4px' }}>\r\n              <Comment>\r\n                <Comment.Metadata>\r\n                  <Grid>\r\n                    <Grid.Row columns='2'>\r\n                      <Grid.Column floated='left'>\r\n                        Posted{' '}\r\n                        {formatDistance(\r\n                          new Date(comment.createdAt),\r\n                          new Date()\r\n                        )}{' '}\r\n                        ago.\r\n                      </Grid.Column>\r\n                      <Grid.Column textAlign='right' floated='right'>\r\n                        {user?.username === comment.username && (\r\n                          <Grid.Row>\r\n                            <Button\r\n                              content='Edit'\r\n                              icon='edit'\r\n                              primary\r\n                              onClick={() => {\r\n                                setIsSelectedComment(comment.id);\r\n                                setIsEditComment(true);\r\n                              }}\r\n                            />\r\n                            <Button\r\n                              loading={\r\n                                isDeletingComment &&\r\n                                comment.id === isSelectedComment\r\n                              }\r\n                              content='Delete'\r\n                              icon='cancel'\r\n                              negative\r\n                              onClick={() => {\r\n                                setIsSelectedComment(comment.id);\r\n                                deleteComment(ticketId, comment.id);\r\n                              }}\r\n                            />\r\n                          </Grid.Row>\r\n                        )}\r\n                      </Grid.Column>\r\n                    </Grid.Row>\r\n                  </Grid>\r\n                </Comment.Metadata>\r\n                {isEditComment && isSelectedComment === comment.id ? (\r\n                  <TicketCommentEdit\r\n                    key={comment.id}\r\n                    ticketId={ticketId}\r\n                    commentId={comment.id}\r\n                    commentBody={comment.body}\r\n                    setIsEditComment={setIsEditComment}\r\n                    editComment={editComment}\r\n                    isEditingComment={isEditingComment}\r\n                  />\r\n                ) : (\r\n                  <Comment.Text style={{ paddingTop: '4px' }}>\r\n                    {comment.body}\r\n                  </Comment.Text>\r\n                )}\r\n              </Comment>\r\n            </div>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    ))\r\n  ) : (\r\n    <Grid centered style={{ marginBottom: '4px' }}>\r\n      <Segment placeholder size='large' compact style={{ minHeight: '4px' }}>\r\n        <Icon name='comment' />\r\n        This ticket has no comments yet. Feel free to add one!\r\n      </Segment>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(TicketComment);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Grid, Segment, Image, Button, Icon, Popup } from 'semantic-ui-react';\r\nimport { ITicketPhoto, ITicketText } from '../../../app/models/tickets';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport PhotoModal from '../Details/PhotoModal';\r\n\r\nconst TicketPhotoContainer: React.FC<{\r\n  photos?: ITicketPhoto[] | undefined;\r\n  texts?: ITicketText[] | undefined;\r\n  setFiles?: (list: any[]) => void;\r\n  setFilesForForm?: (list: any[]) => void;\r\n}> = ({ photos, setFiles, setFilesForForm, texts }) => {\r\n  const { ticketStore } = useStore();\r\n  const {\r\n    isTicketCreatorOrAdmin,\r\n    selectedTicket,\r\n    deletePhoto,\r\n    deleteTextFile,\r\n    isDeletingPhoto,\r\n    isDeletingText,\r\n  } = ticketStore;\r\n\r\n  const [idForSelectedImg, setIdForSelectedImg] = useState('');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const renderContent = (files: any[], isText: boolean) => {\r\n    return (\r\n      files!.length > 0 && (\r\n        <Grid.Row\r\n          fluid='true'\r\n          columns={\r\n            files!.length as\r\n              | 1\r\n              | 2\r\n              | 3\r\n              | 4\r\n              | 5\r\n              | 6\r\n              | 7\r\n              | 8\r\n              | 9\r\n              | 10\r\n              | 11\r\n              | 12\r\n              | 13\r\n              | 14\r\n              | 15\r\n              | 16\r\n              | undefined\r\n          }\r\n        >\r\n          {files?.map((img, i) => (\r\n            <Grid.Column key={i} fluid='true'>\r\n              <Segment compact style={{ position: 'relative' }}>\r\n                {!isText && (\r\n                  <div style={{ margin: 'auto' }}>\r\n                    <Image\r\n                      src={img.url ? img.url : img.preview}\r\n                      id={i}\r\n                      width='200px'\r\n                      height='200px'\r\n                      style={{ cursor: 'pointer' }}\r\n                      onClick={() => {\r\n                        setIsModalOpen(true);\r\n                        setIdForSelectedImg(img.id);\r\n                      }}\r\n                    />\r\n                    <p style={{ textAlign: 'center', color: 'black' }}>\r\n                      {img.name}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n                {isText && (\r\n                  <div style={{ margin: 'auto' }}>\r\n                    <Icon\r\n                      name='file outline'\r\n                      size='massive'\r\n                      style={{ marginLeft: '2px', cursor: 'pointer' }}\r\n                      onClick={() => {\r\n                        //openInNewTab(img.url ? img.url : img.preview)\r\n                        setIsModalOpen(true);\r\n                        setIdForSelectedImg(img.id);\r\n                      }}\r\n                    />\r\n                    <p style={{ textAlign: 'center', color: 'black' }}>\r\n                      {img.name}\r\n                    </p>\r\n                    <PhotoModal\r\n                      img={img}\r\n                      isOpen={isModalOpen}\r\n                      id={idForSelectedImg}\r\n                      setIsModalOpen={setIsModalOpen}\r\n                      isPhoto={false}\r\n                    />\r\n                  </div>\r\n                )}\r\n                {isTicketCreatorOrAdmin && (\r\n                  <Popup\r\n                    header={'Delete this attachement.'}\r\n                    trigger={\r\n                      <Button\r\n                        style={{\r\n                          position: 'absolute',\r\n                          top: '0',\r\n                          left: '0',\r\n                          right: '0',\r\n                          border: '1px solid black',\r\n                        }}\r\n                        negative\r\n                        icon='remove'\r\n                        size='mini'\r\n                        loading={\r\n                          (isDeletingPhoto || isDeletingText) &&\r\n                          idForSelectedImg === img.id\r\n                        }\r\n                        onClick={() => {\r\n                          setIdForSelectedImg(img.id);\r\n                          handleOnClick(isText, img);\r\n                        }}\r\n                      />\r\n                    }\r\n                  />\r\n                )}\r\n                {!isText && (\r\n                  <PhotoModal\r\n                    img={img}\r\n                    isOpen={isModalOpen}\r\n                    id={idForSelectedImg}\r\n                    setIsModalOpen={setIsModalOpen}\r\n                    isPhoto={true}\r\n                  />\r\n                )}\r\n              </Segment>\r\n            </Grid.Column>\r\n          ))}\r\n        </Grid.Row>\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleOnClick = async (isText: boolean, img?: any) => {\r\n    if (img.id) {\r\n      if (!isText) {\r\n        await deletePhoto(selectedTicket!.id, img.id);\r\n      } else {\r\n        await deleteTextFile(selectedTicket!.id, img.id);\r\n      }\r\n    } else {\r\n      setFiles!([]);\r\n      if (setFilesForForm) setFilesForForm([]);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Grid style={{ paddingTop: '10px' }}>\r\n        {photos && renderContent(photos, false)}\r\n        {texts && renderContent(texts, true)}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default observer(TicketPhotoContainer);\r\n","import React, { useState } from 'react';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\nimport MessageComponent from '../../../app/common/message/MessageComponent';\r\nimport PhotoWidgetDropzone from '../../../app/common/photoUpload/PhotoWidgetDropzone';\r\nimport { returnBlobFromFile } from '../../utils/helperMethods';\r\nimport TicketPhotoContainer from './TicketPhotoContainer';\r\ninterface IProps {\r\n  setFilesForForm?: (file: any[]) => void;\r\n  addFile: (...args: any) => Promise<void>;\r\n  LIMIT_FILESIZE: number;\r\n  LIMIT_FILETYPE: string[];\r\n  toobig_message: string[];\r\n  badfile_message: string;\r\n  ticketId: string;\r\n  buttonText: string;\r\n  isAddingItem: boolean;\r\n  isPreview: boolean;\r\n}\r\nconst UploadHoc: React.FC<IProps> = ({\r\n  LIMIT_FILESIZE,\r\n  LIMIT_FILETYPE,\r\n  toobig_message,\r\n  badfile_message,\r\n  ticketId,\r\n  buttonText,\r\n  isAddingItem,\r\n  isPreview,\r\n  addFile,\r\n  setFilesForForm,\r\n}) => {\r\n  const [files, setFiles] = useState<any[]>([]);\r\n  const [isItemTooBig, setIsItemTooBig] = useState(false);\r\n  const [isBadFileType, setIsBadFileType] = useState(false);\r\n  const [isMoreThanOne, setIsMoreThanOne] = useState(false);\r\n\r\n  const handleFileSetting = (val: any) => {\r\n    let isTooBig = false;\r\n    let isBadFile = false;\r\n    if (val.length > 1) {\r\n      setIsMoreThanOne(true);\r\n      setFiles([]);\r\n      if (setFilesForForm) setFilesForForm([]);\r\n      return;\r\n    }\r\n    val.forEach((item: any) => {\r\n      if (item.size > LIMIT_FILESIZE) {\r\n        isTooBig = true;\r\n        setFiles([]);\r\n        if (setFilesForForm) setFilesForForm([]);\r\n        return;\r\n      }\r\n\r\n      if (!LIMIT_FILETYPE.includes(item.type)) {\r\n        isBadFile = true;\r\n        setFiles([]);\r\n        if (setFilesForForm) setFilesForForm([]);\r\n        setIsBadFileType(true);\r\n      }\r\n    });\r\n\r\n    if (!isTooBig && !isBadFile) {\r\n      setFiles(val);\r\n      if (setFilesForForm) setFilesForForm(val);\r\n    } else {\r\n      if (isBadFile) setIsBadFileType(true);\r\n      if (isTooBig) setIsItemTooBig(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: '10px' }}>\r\n      <PhotoWidgetDropzone setFiles={handleFileSetting} isTicket={true}>\r\n        <Button\r\n          type='button'\r\n          size='tiny'\r\n          style={{\r\n            border: '2px rgba(255,255,255, 0.6) dashed',\r\n            marginTop: '10px',\r\n            color: 'white',\r\n            backgroundColor: '#bc4123',\r\n          }}\r\n          fluid={true}\r\n          onClick={() => {\r\n            setIsMoreThanOne(false);\r\n            setIsItemTooBig(false);\r\n            setIsBadFileType(false);\r\n          }}\r\n        >\r\n          <div>\r\n            {buttonText}\r\n            <Icon name='upload' size='large' style={{ marginLeft: '2px' }} />\r\n          </div>\r\n        </Button>\r\n      </PhotoWidgetDropzone>\r\n      {isMoreThanOne && (\r\n        <MessageComponent\r\n          status={true}\r\n          header={'Too many files.'}\r\n          message={'Upload one file at a time.'}\r\n        />\r\n      )}\r\n      {isItemTooBig && (\r\n        <MessageComponent\r\n          status={true}\r\n          header={toobig_message[0]}\r\n          message={toobig_message[1]}\r\n        />\r\n      )}\r\n      {isBadFileType && (\r\n        <MessageComponent\r\n          status={true}\r\n          header={'Sorry, that filetype is not accepted.'}\r\n          message={badfile_message}\r\n        />\r\n      )}\r\n      {files.length > 0 &&\r\n        !isItemTooBig &&\r\n        !isBadFileType &&\r\n        (buttonText !== 'Add TextFile' ? (\r\n          <TicketPhotoContainer\r\n            photos={files}\r\n            setFiles={setFiles}\r\n            setFilesForForm={setFilesForForm}\r\n          />\r\n        ) : (\r\n          <TicketPhotoContainer\r\n            texts={files}\r\n            setFiles={setFiles}\r\n            setFilesForForm={setFilesForForm}\r\n          />\r\n        ))}\r\n      {isPreview && files.length > 0 && !isItemTooBig && !isBadFileType && (\r\n        <Button\r\n          style={{ marginTop: '10px' }}\r\n          positive\r\n          content='submit'\r\n          loading={isAddingItem}\r\n          onClick={async () => {\r\n            await addFile!(ticketId, await returnBlobFromFile(files));\r\n            setFiles([]);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadHoc;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Accordion, Grid, Icon, List } from 'semantic-ui-react';\r\nimport { ITicket } from '../../../app/models/tickets';\r\nimport TicketPhotoContainer from '../Form/TicketPhotoContainer';\r\nimport UploadHoc from '../Form/UploadHoc';\r\n\r\nconst LIMIT_TEXTFILESIZE = 10000;\r\nconst LIMIT_TEXTFILETYPE = ['text/plain'];\r\n\r\nconst LIMIT_FILESIZE = 500000;\r\nconst LIMIT_FILETYPE = ['image/jpeg', 'image/png', 'image/jpg'];\r\n\r\ninterface IProps {\r\n  ticket: ITicket;\r\n  isTicketCreatorOrAdmin: boolean;\r\n  addTextFile: (ticketId: string, text: Blob) => Promise<void>;\r\n  addPhoto: (ticketId: string, photo: Blob) => Promise<void>;\r\n  isAddingPhoto: boolean;\r\n  isAddingText: boolean;\r\n}\r\nconst capitalizeFirstLetter = (word: string) => {\r\n  return word.charAt(0).toUpperCase() + word.slice(1);\r\n};\r\n\r\nconst TicketPreview: React.FC<{ ticket: ITicket }> = ({ ticket }) => {\r\n  return (\r\n    <List>\r\n      {Object.entries(ticket).map(\r\n        ([oKey, oValue], i) =>\r\n          ['status', 'version', 'priority', 'bugType', 'device'].includes(\r\n            oKey\r\n          ) && (\r\n            <List.Item key={i}>\r\n              <p>\r\n                <b>{capitalizeFirstLetter(oKey)}</b>: {oValue}\r\n              </p>\r\n            </List.Item>\r\n          )\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n\r\nconst TicketDetails: React.FC<IProps> = ({\r\n  ticket,\r\n  isTicketCreatorOrAdmin,\r\n  addTextFile,\r\n  addPhoto,\r\n  isAddingPhoto,\r\n  isAddingText,\r\n}) => {\r\n  const [activeIndex, setActiveIndex] = useState([true, true, true]);\r\n  const handleClick = (e: any, titleProps: any) => {\r\n    if (titleProps.index === 0) {\r\n      setActiveIndex([!activeIndex[0], activeIndex[1], activeIndex[2]]);\r\n    } else if (titleProps.index === 1) {\r\n      setActiveIndex([activeIndex[0], !activeIndex[1], activeIndex[2]]);\r\n    } else {\r\n      setActiveIndex([activeIndex[0], activeIndex[1], !activeIndex[2]]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        <Accordion exclusive={false} fluid>\r\n          <Accordion.Title\r\n            active={activeIndex[0] === true}\r\n            index={0}\r\n            onClick={handleClick}\r\n          >\r\n            <p>\r\n              <Icon name='dropdown' />\r\n              Details\r\n            </p>\r\n          </Accordion.Title>\r\n          <Accordion.Content active={activeIndex[0] === true}>\r\n            <TicketPreview ticket={ticket} />\r\n          </Accordion.Content>\r\n\r\n          <Accordion.Title\r\n            active={activeIndex[1] === true}\r\n            index={1}\r\n            onClick={handleClick}\r\n          >\r\n            <p>\r\n              <Icon name='dropdown' />\r\n              Description\r\n            </p>\r\n          </Accordion.Title>\r\n          <Accordion.Content active={activeIndex[1] === true}>\r\n            <List>\r\n              <List.Item>\r\n                <p>{ticket.description}</p>\r\n              </List.Item>\r\n            </List>\r\n          </Accordion.Content>\r\n          {(ticket.photos!.length || ticket.texts!.length) > 0 && (\r\n            <>\r\n              <Accordion.Title\r\n                active={activeIndex[2] === true}\r\n                index={2}\r\n                onClick={handleClick}\r\n              >\r\n                <p>\r\n                  <Icon name='dropdown' />\r\n                  Attachements\r\n                </p>\r\n              </Accordion.Title>\r\n              <Accordion.Content active={activeIndex[2] === true}>\r\n                <TicketPhotoContainer\r\n                  photos={ticket.photos!}\r\n                  texts={ticket.texts}\r\n                />\r\n              </Accordion.Content>\r\n            </>\r\n          )}\r\n        </Accordion>\r\n        {\r\n          <UploadHoc\r\n            isPreview={true}\r\n            LIMIT_FILESIZE={LIMIT_FILESIZE}\r\n            LIMIT_FILETYPE={LIMIT_FILETYPE}\r\n            ticketId={ticket.id}\r\n            buttonText='Add Photo'\r\n            isAddingItem={isAddingPhoto}\r\n            addFile={addPhoto}\r\n            toobig_message={[\r\n              `Sorry that file is too big.`,\r\n              `Maximum size is ${LIMIT_FILESIZE} kb.`,\r\n            ]}\r\n            badfile_message='Change filetype to image/jpeg or image/png.'\r\n          />\r\n          // <TicketUploadPhoto isPreview={true} />\r\n        }\r\n        {\r\n          <UploadHoc\r\n            isPreview={true}\r\n            LIMIT_FILESIZE={LIMIT_TEXTFILESIZE}\r\n            LIMIT_FILETYPE={LIMIT_TEXTFILETYPE}\r\n            ticketId={ticket.id}\r\n            buttonText='Add TextFile'\r\n            isAddingItem={isAddingText}\r\n            addFile={addTextFile}\r\n            toobig_message={[\r\n              'Sorry that file is too big.',\r\n              'Maximum size of a .txt is 10kb',\r\n            ]}\r\n            badfile_message='Change filetype to text/plain or .txt'\r\n          />\r\n        }\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(TicketDetails);\r\n","import { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport {\r\n  List,\r\n  Segment,\r\n  Image,\r\n  Divider,\r\n  Header,\r\n  Button,\r\n  Modal,\r\n  Container,\r\n} from 'semantic-ui-react';\r\nimport StatusCircle from '../../../app/common/stylings/StatusCircle';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { ITicket } from '../../../app/models/tickets';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport TicketForm from '../Form/TicketForm';\r\nimport TicketAddComment from './TicketAddComment';\r\nimport TicketComment from './TicketComment';\r\nimport TicketDetails from './TicketDetails';\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n  username: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nconst TicketFullDetails: React.FC<IProps> = ({ match }) => {\r\n  const { profileStore, ticketStore, userStore } = useStore();\r\n  const { loadProfile, loadingProfile, profile } = profileStore;\r\n  const { user } = userStore;\r\n  const {\r\n    isAddingComment,\r\n    addComment,\r\n    deleteComment,\r\n    editComment,\r\n    editTicketStatus,\r\n    submittingTicket,\r\n    setSelectedTicketFromId,\r\n    isEditingComment,\r\n    selectedTicket,\r\n    isDeletingComment,\r\n    isTicketCreatorOrAdmin,\r\n    addTextFile,\r\n    addPhoto,\r\n    isAddingText,\r\n    isAddingPhoto,\r\n  } = ticketStore;\r\n\r\n  const [selectedStatusColor, setSelectedStatusColor] = useState('');\r\n  const [isEditingTicket, setIsEditingTicket] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (selectedTicket === null && match.params.id) {\r\n      setSelectedTicketFromId(match.params.id);\r\n    }\r\n    if (\r\n      (profile === null && selectedTicket!) ||\r\n      (selectedTicket! &&\r\n        profile!.username !== selectedTicket!.creator &&\r\n        selectedTicket !== null)\r\n    ) {\r\n      loadProfile(selectedTicket!.creator);\r\n    }\r\n  }, [\r\n    loadProfile,\r\n    profile,\r\n    match.params,\r\n    selectedTicket,\r\n    setSelectedTicketFromId,\r\n  ]);\r\n\r\n  const handleStatusChange = async (data: any) => {\r\n    const outerButton = data.value?.toLowerCase();\r\n    const innerSpan = data.style.color;\r\n    const editingTicket: ITicket = toJS(selectedTicket!);\r\n    if (outerButton === 'closed' || innerSpan === 'red') {\r\n      editingTicket.status = 'closed';\r\n    }\r\n    if (outerButton === 'verify' || innerSpan === 'green') {\r\n      editingTicket.status = 'verify';\r\n    }\r\n    if (outerButton === 'open' || innerSpan === 'blue') {\r\n      editingTicket.status = 'open';\r\n    }\r\n    setSelectedStatusColor(editingTicket.status);\r\n    await editTicketStatus(editingTicket);\r\n  };\r\n\r\n  if (loadingProfile)\r\n    return <LoadingComponent content='Loading profile tickets...' />;\r\n  //const selTicketDate = toJS(selectedTicket?.date);\r\n  const ticketStatus = toJS(selectedTicket!.status).toLowerCase();\r\n  const isTicketAdminOrHost = isTicketCreatorOrAdmin();\r\n  return (\r\n    <Container>\r\n      <Segment clearing>\r\n        <List divided relaxed>\r\n          {selectedTicket!.id === match.params.id && (\r\n            <List.Item key={selectedTicket!.id}>\r\n              <List.Content>\r\n                <List.Header style={{ color: 'white' }}>\r\n                  <Image avatar src={profile?.image || '/assets/user.png'} />\r\n                  {selectedTicket!.title}\r\n                </List.Header>\r\n                <List.Description\r\n                  style={{ marginLeft: '32px', color: 'white' }}\r\n                >\r\n                  {toJS(selectedTicket!.date).replace('T', ' ')}\r\n                  <Button.Group\r\n                    size='mini'\r\n                    floated='right'\r\n                    onClick={(e: any) => {\r\n                      handleStatusChange(e.target);\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      basic\r\n                      color='red'\r\n                      value={'Closed'}\r\n                      loading={\r\n                        submittingTicket && selectedStatusColor === 'closed'\r\n                      }\r\n                    >\r\n                      <StatusCircle\r\n                        isFilled={ticketStatus === 'closed'}\r\n                        status={'closed'}\r\n                      />\r\n                    </Button>\r\n                    <Button\r\n                      basic\r\n                      color='green'\r\n                      value={'Verify'}\r\n                      loading={\r\n                        submittingTicket && selectedStatusColor === 'verify'\r\n                      }\r\n                    >\r\n                      <StatusCircle\r\n                        isFilled={ticketStatus === 'verify'}\r\n                        status={'verify'}\r\n                      />\r\n                    </Button>\r\n                    <Button\r\n                      basic\r\n                      color='blue'\r\n                      value={'Open'}\r\n                      loading={\r\n                        submittingTicket && selectedStatusColor === 'open'\r\n                      }\r\n                    >\r\n                      <StatusCircle\r\n                        isFilled={ticketStatus === 'open'}\r\n                        status={'open'}\r\n                      />\r\n                    </Button>\r\n                  </Button.Group>\r\n                  {isTicketAdminOrHost && (\r\n                    <Modal\r\n                      onClose={() => setIsEditingTicket(false)}\r\n                      onOpen={() => setIsEditingTicket(true)}\r\n                      open={isEditingTicket}\r\n                      trigger={\r\n                        <Button\r\n                          floated='right'\r\n                          style={{\r\n                            marginRight: '80px',\r\n                            color: 'white',\r\n                            backgroundColor: '#bc4123',\r\n                          }}\r\n                          size='large'\r\n                          content='Edit Ticket'\r\n                          onClick={() => setIsEditingTicket(true)}\r\n                        />\r\n                      }\r\n                    >\r\n                      <Modal.Content>\r\n                        <TicketForm\r\n                          ticket={selectedTicket}\r\n                          setIsEditingTicket={setIsEditingTicket}\r\n                        />\r\n                      </Modal.Content>\r\n                      <Modal.Actions>\r\n                        <Button\r\n                          content='close'\r\n                          icon='cancel'\r\n                          onClick={() => setIsEditingTicket(false)}\r\n                        />\r\n                      </Modal.Actions>\r\n                    </Modal>\r\n                  )}\r\n                </List.Description>\r\n              </List.Content>\r\n              <TicketDetails\r\n                ticket={selectedTicket!}\r\n                isTicketCreatorOrAdmin={isTicketAdminOrHost}\r\n                addTextFile={addTextFile}\r\n                addPhoto={addPhoto}\r\n                isAddingText={isAddingText}\r\n                isAddingPhoto={isAddingPhoto}\r\n              />\r\n            </List.Item>\r\n          )}\r\n        </List>\r\n        <Divider />\r\n        {/* TODO: You know you could just set the selected ticket in mobx right? */}\r\n        {selectedTicket?.id === match.params.id && (\r\n          <div\r\n            key={selectedTicket.id}\r\n            style={{ marginLeft: '14px', marginRight: '14px' }}\r\n          >\r\n            <Header style={{ textAlign: 'center', color: 'white' }}>\r\n              Comments\r\n            </Header>\r\n            <TicketComment\r\n              key={selectedTicket.id}\r\n              comments={selectedTicket.comments}\r\n              deleteComment={deleteComment}\r\n              editComment={editComment}\r\n              user={user}\r\n              ticketId={selectedTicket.id}\r\n              isEditingComment={isEditingComment}\r\n              isDeletingComment={isDeletingComment}\r\n            />\r\n          </div>\r\n        )}\r\n        <TicketAddComment\r\n          ticket={selectedTicket!}\r\n          isAddingComment={isAddingComment}\r\n          addComment={addComment}\r\n          user={user!}\r\n        />\r\n      </Segment>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default observer(TicketFullDetails);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Statistic } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface IProps {\r\n  groupId: string;\r\n}\r\n\r\nconst StatusStats: React.FC<IProps> = ({ groupId }) => {\r\n  const { groupStore } = useStore();\r\n  const { getGroups } = groupStore;\r\n\r\n  const groupStats = { open: 0, verify: 0, closed: 0 };\r\n  if (groupId) {\r\n    const grp = getGroups.filter((group: any) => group.id === groupId);\r\n    groupStats.open = grp[0].open;\r\n    groupStats.closed = grp[0].closed;\r\n    groupStats.verify = grp[0].verify;\r\n  }\r\n\r\n  return (\r\n    <Statistic.Group widths={3}>\r\n      <Statistic color='blue' size='mini'>\r\n        <Statistic.Value text={true} style={{ minHeight: '0em' }}>\r\n          {groupStats.open}\r\n        </Statistic.Value>\r\n        <Statistic.Label style={{ color: 'white' }}>Open</Statistic.Label>\r\n      </Statistic>\r\n      <Statistic color='green' size='mini'>\r\n        <Statistic.Value text={true} style={{ minHeight: '0em' }}>\r\n          {groupStats.verify}\r\n        </Statistic.Value>\r\n        <Statistic.Label style={{ color: 'white' }}>Verify</Statistic.Label>\r\n      </Statistic>\r\n      <Statistic color='red' size='mini'>\r\n        <Statistic.Value text={true} style={{ minHeight: '0em' }}>\r\n          {groupStats.closed}\r\n        </Statistic.Value>\r\n        <Statistic.Label style={{ color: 'white' }}>Closed</Statistic.Label>\r\n      </Statistic>\r\n    </Statistic.Group>\r\n  );\r\n};\r\n\r\nexport default observer(StatusStats);\r\n","import React from 'react';\r\nimport { Grid, Search } from 'semantic-ui-react';\r\nimport { ITicket } from '../../../app/models/tickets';\r\n\r\n// Initial version only searches the title.\r\n// Todo: Expand to include description aswell later on.\r\nconst initialState = {\r\n  loading: false,\r\n  results: [],\r\n  value: '',\r\n};\r\n\r\nfunction exampleReducer(\r\n  state: {\r\n    loading: boolean;\r\n    results: never[];\r\n    value: string;\r\n  },\r\n  action: any\r\n) {\r\n  switch (action.type) {\r\n    case 'CLEAN_QUERY':\r\n      return initialState;\r\n    case 'START_SEARCH':\r\n      return { ...state, loading: true, value: action.query };\r\n    case 'FINISH_SEARCH':\r\n      return { ...state, loading: false };\r\n    case 'UPDATE_SELECTION':\r\n      return { ...state, value: action.selection };\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\ninterface IProps {\r\n  titleList: ITicket[];\r\n  handleSearchResults: (ticketIds: string[]) => void;\r\n}\r\n\r\nconst SearchList: React.FC<IProps> = ({ titleList, handleSearchResults }) => {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, initialState);\r\n  const { loading, value } = state;\r\n  //console.log('Received titleList: ', titleList);\r\n  const handleSearchChange = React.useCallback(\r\n    (e, data) => {\r\n      dispatch({ type: 'START_SEARCH', query: data.value });\r\n\r\n      if (data.value.length === 0) {\r\n        dispatch({ type: 'CLEAN_QUERY' });\r\n        handleSearchResults([]);\r\n        return;\r\n      }\r\n\r\n      const re = new RegExp(data.value, 'i');\r\n      const isMatch = (result: any) => re.test(result.title);\r\n      // Filter all titleList.tickets for the regex\r\n      // With the returning array, we also need to get the ticket.Ids\r\n      // Then callback that array to caller component.\r\n      const titleResults = titleList\r\n        .filter((ticket) => isMatch(ticket))\r\n        .map((ticket) => ticket.id);\r\n\r\n      dispatch({\r\n        type: 'FINISH_SEARCH',\r\n      });\r\n      handleSearchResults(titleResults);\r\n    },\r\n    [titleList, handleSearchResults]\r\n  );\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={6}>\r\n        <Search\r\n          disabled={titleList.length === 0}\r\n          placeholder='Search title...'\r\n          loading={loading}\r\n          onSearchChange={handleSearchChange}\r\n          value={value}\r\n          showNoResults={false}\r\n        />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Divider,\r\n  Dropdown,\r\n  Grid,\r\n  Header,\r\n  List,\r\n  Segment,\r\n  Image,\r\n} from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { observer } from 'mobx-react-lite';\r\nimport StatusStats from './StatusStats';\r\nimport SearchList from './SearchList';\r\nimport { arrayContains } from '../../utils/helperMethods';\r\nimport { Link } from 'react-router-dom';\r\nimport { IMember } from '../../../app/models/groups';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst tagOptions = [\r\n  {\r\n    key: 'open',\r\n    text: 'Open',\r\n    value: 'open',\r\n    icon: { color: 'blue', name: 'circle' },\r\n  },\r\n  {\r\n    key: 'verify',\r\n    text: 'Ready for verification',\r\n    value: 'verify',\r\n    icon: { color: 'green', name: 'circle' },\r\n  },\r\n  {\r\n    key: 'closed',\r\n    text: 'Closed',\r\n    value: 'closed',\r\n    icon: { color: 'red', name: 'circle' },\r\n  },\r\n];\r\n\r\nconst TicketList = () => {\r\n  const { ticketStore, groupStore } = useStore();\r\n  const { setSelectedTicket } = ticketStore;\r\n  const [filterStatus, setFilterStatus] = useState('');\r\n  const [filterGroup, setGroupFilter] = useState('');\r\n  const [searchResultIds, setSearchResultIds] = useState<string[]>([]);\r\n  useEffect(() => {\r\n    ticketStore.loadTickets();\r\n    groupStore.loadGroups();\r\n  }, [ticketStore, groupStore, setGroupFilter]);\r\n\r\n  const groupMemberPhoto = (groupId: string, username: string) => {\r\n    if (username && groupId) {\r\n      const members = groupStore.groupRegistry.get(groupId).members;\r\n      const isFound = members.filter(\r\n        (member: IMember) => member.username === username\r\n      );\r\n\r\n      if (isFound && isFound[0]) {\r\n        return isFound[0].image;\r\n      }\r\n    }\r\n    return '/assets/user.png';\r\n  };\r\n\r\n  const handleStatusClick = (e: any, data: any) => {\r\n    if (data.value === '') return;\r\n    const statusValue = data.value.toLowerCase();\r\n\r\n    if (data.placeholder === 'Filter By Group') {\r\n      setGroupFilter(statusValue);\r\n      setFilterStatus('');\r\n    } else {\r\n      setFilterStatus(statusValue);\r\n    }\r\n    // Now filter list items shown on data.value for status\r\n  };\r\n\r\n  const handleSearchResults = (ticketIds: string[]) => {\r\n    setSearchResultIds(ticketIds);\r\n  };\r\n\r\n  if (ticketStore.loadingTickets)\r\n    return <LoadingComponent content='Loading Tickets...' />;\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Header textAlign='center' style={{ color: 'white' }}>\r\n        Issues\r\n      </Header>\r\n\r\n      <Grid columns={4} divided stackable>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Dropdown\r\n              placeholder='Filter By Group'\r\n              fluid\r\n              selection\r\n              options={groupStore.groupTitleForUser}\r\n              onChange={handleStatusClick}\r\n            ></Dropdown>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Dropdown\r\n              disabled={\r\n                filterGroup === '' ||\r\n                (filterGroup !== '' &&\r\n                  groupStore.groupRegistry.get(filterGroup).tickets.length <= 0)\r\n              }\r\n              placeholder='Filter By Ticket Status'\r\n              fluid\r\n              value={filterStatus}\r\n              selection\r\n              options={tagOptions}\r\n              onChange={handleStatusClick}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <StatusStats groupId={filterGroup} />\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <SearchList\r\n              titleList={ticketStore.ticketsByDate.filter(\r\n                (ticket) =>\r\n                  ticket.status.toLowerCase() === filterStatus && ticket\r\n              )}\r\n              handleSearchResults={handleSearchResults}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n\r\n      <Divider />\r\n      <List divided relaxed>\r\n        {ticketStore.ticketsByDate.map((ticket) => {\r\n          return (\r\n            // This filtering could be made more concise and prettier\r\n            ticket.status.toLowerCase() === filterStatus &&\r\n            ticket.groupId === filterGroup &&\r\n            (arrayContains(searchResultIds, ticket.id) ||\r\n              searchResultIds.length === 0) && (\r\n              <List.Item key={ticket.id}>\r\n                <Image\r\n                  avatar\r\n                  src={groupMemberPhoto(filterGroup, ticket.creator)}\r\n                />\r\n                <List.Content>\r\n                  <List.Header\r\n                    as={Link}\r\n                    to={`/ticket/${ticket.groupId}/${ticket.id}`}\r\n                    onClick={async () => await setSelectedTicket(ticket)}\r\n                  >\r\n                    {ticket.title}\r\n                  </List.Header>\r\n                  <List.Description style={{ color: 'white' }}>\r\n                    {ticket.date.replace('T', ' ')}\r\n                  </List.Description>\r\n                </List.Content>\r\n                {/*<TicketDetails\r\n                  ticket={ticket}\r\n                  isTicketCreatorOrAdmin={ticketStore.isTicketCreatorOrAdmin}\r\n                  addTextFile={ticketStore.addTextFile}\r\n                  \r\n                />*/}\r\n              </List.Item>\r\n            )\r\n          );\r\n        })}\r\n      </List>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(TicketList);\r\n","import React from 'react';\r\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Icon name='search' />\r\n        Oops - we've looked everywhere but couldn't find this.\r\n      </Header>\r\n      <Segment.Inline>\r\n        <Button as={Link} to='/issues' primary>\r\n          Return to Tickets page\r\n        </Button>\r\n      </Segment.Inline>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport {\r\n  Redirect,\r\n  Route,\r\n  RouteComponentProps,\r\n  RouteProps,\r\n} from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface IProps extends RouteProps {\r\n  component: React.ComponentType<RouteComponentProps<any>>;\r\n}\r\n\r\nconst PrivateRoute: React.FC<IProps> = ({ component: Component, ...rest }) => {\r\n  const { userStore } = useStore();\r\n  const { isLoggedIn } = userStore;\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isLoggedIn ? <Component {...props} /> : <Redirect to={'/'} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(PrivateRoute);\r\n","import { autorun } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport React, { Fragment, useEffect } from 'react';\nimport {\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter,\n} from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport ServerError from '../../features/errors/ServerError';\nimport TestErrors from '../../features/errors/TestErrors';\nimport GroupList from '../../features/groups/List/GroupList';\nimport HomePage from '../../features/home/HomePage';\nimport NavBar from '../../features/nav/NavBar';\nimport Profile from '../../features/profiles/Profile';\nimport TicketFullDetails from '../../features/tickets/Details/TicketFullDetails';\nimport TicketForm from '../../features/tickets/Form/TicketForm';\nimport TicketList from '../../features/tickets/List/TicketList';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport NotFound from './NotFound';\nimport PrivateRoute from './PrivateRoute';\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const { commonStore, userStore } = useStore();\n  const { setAppLoaded, token, appLoaded } = commonStore;\n  const { getUser } = userStore;\n\n  useEffect(() => {\n    autorun(() => {\n      if (token && !appLoaded) {\n        getUser().finally(() => setAppLoaded());\n      } else if (!appLoaded) {\n        setAppLoaded();\n      }\n    });\n  }, []);\n\n  if (!appLoaded) return <LoadingComponent content='Loading app...' />;\n  return (\n    <Fragment>\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute path='/issues' component={TicketList} />\n                <PrivateRoute\n                  path='/ticket/:username/:id'\n                  component={TicketFullDetails}\n                />\n                <PrivateRoute\n                  path='/ticket/:groupId/:id'\n                  component={TicketFullDetails}\n                />\n                <PrivateRoute path='/groups' component={GroupList} />\n                <PrivateRoute path='/createTicket' component={TicketForm} />\n                <PrivateRoute path='/profile/:username' component={Profile} />\n                {/* <Route path='/errors' component={TestErrors} />  */}\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n};\n\nexport default withRouter(observer(App));\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history';\nimport { Router } from 'react-router-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport { store, StoreContext } from './app/stores/store';\n\nnew dateFnsLocalizer();\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}