[{"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\index.tsx":"1","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\NotFound.tsx":"4","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\TicketList.tsx":"5","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\home\\HomePage.tsx":"6","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketForm.tsx":"7","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupList.tsx":"8","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\nav\\NavBar.tsx":"9","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\ticketStore.ts":"10","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\groupStore.ts":"11","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\utils\\helperMethods.ts":"12","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\tickets.ts":"13","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"14","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\SearchList.tsx":"15","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\StatusStats.tsx":"16","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupListExplainer.tsx":"17","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupSummary.tsx":"18","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketDetails.tsx":"19","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Form\\GroupForm.tsx":"20","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\TextInput.tsx":"21","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx":"22","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\SelectInput.tsx":"23","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\api\\agent.ts":"24","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\FormCheckbox.tsx":"25","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\rootStore.ts":"26","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\commonStore.ts":"27","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\userStore.ts":"28","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\PrivateRoute.tsx":"29","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\user\\LoginForm.tsx":"30","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx":"31","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\user\\RegisterForm.tsx":"32","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetails.tsx":"33","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupAdminsList.tsx":"34","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailsFooter.tsx":"35","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailedChatFlow.tsx":"36","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\Profile.tsx":"37","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileContent.tsx":"38","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\profileStore.ts":"39","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileMenu.tsx":"40","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx":"41","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx":"42","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx":"43","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx":"44","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileTickets.tsx":"45","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketFullDetails.tsx":"46","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileGroups.tsx":"47","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\stylings\\StatusCircle.tsx":"48","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileDescription.tsx":"49","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileAbout.tsx":"50","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\profile.ts":"51","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupAnnouncement.tsx":"52","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupClickToComment.tsx":"53","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupUploadPhoto.tsx":"54","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailsHeader.tsx":"55","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketComment.tsx":"56","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketAddComment.tsx":"57","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketCommentEdit.tsx":"58","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketUploadPhoto.tsx":"59","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketPhotoContainer.tsx":"60","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\message\\MessageComponent.tsx":"61","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\PhotoModal.tsx":"62","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\UploadHoc.tsx":"63","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\FileRead.tsx":"64","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDescriptionEdit.tsx":"65","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\groups.ts":"66","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileSettings.tsx":"67","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketAttachementsContainer.tsx":"68"},{"size":782,"mtime":1613209098730,"results":"69","hashOfConfig":"70"},{"size":425,"mtime":499162500000,"results":"71","hashOfConfig":"70"},{"size":2672,"mtime":1612973072376,"results":"72","hashOfConfig":"70"},{"size":544,"mtime":1612271756826,"results":"73","hashOfConfig":"70"},{"size":5436,"mtime":1613057606899,"results":"74","hashOfConfig":"70"},{"size":2486,"mtime":1613035629784,"results":"75","hashOfConfig":"70"},{"size":6333,"mtime":1613234599751,"results":"76","hashOfConfig":"70"},{"size":5344,"mtime":1612984887982,"results":"77","hashOfConfig":"70"},{"size":1814,"mtime":1613051660390,"results":"78","hashOfConfig":"70"},{"size":15393,"mtime":1613238208747,"results":"79","hashOfConfig":"70"},{"size":12889,"mtime":1612966010343,"results":"80","hashOfConfig":"70"},{"size":978,"mtime":1611849159025,"results":"81","hashOfConfig":"70"},{"size":1146,"mtime":1613153268716,"results":"82","hashOfConfig":"70"},{"size":509,"mtime":1612983493479,"results":"83","hashOfConfig":"70"},{"size":2402,"mtime":1613056408529,"results":"84","hashOfConfig":"70"},{"size":1601,"mtime":1612975095994,"results":"85","hashOfConfig":"70"},{"size":562,"mtime":1613057062018,"results":"86","hashOfConfig":"70"},{"size":2428,"mtime":1612971894647,"results":"87","hashOfConfig":"70"},{"size":5088,"mtime":1613145584150,"results":"88","hashOfConfig":"70"},{"size":3909,"mtime":1612966031804,"results":"89","hashOfConfig":"70"},{"size":674,"mtime":1609853879135,"results":"90","hashOfConfig":"70"},{"size":673,"mtime":1608136023105,"results":"91","hashOfConfig":"70"},{"size":785,"mtime":1608136317981,"results":"92","hashOfConfig":"70"},{"size":7985,"mtime":1613135576723,"results":"93","hashOfConfig":"70"},{"size":538,"mtime":1608157389302,"results":"94","hashOfConfig":"70"},{"size":851,"mtime":1610110949165,"results":"95","hashOfConfig":"70"},{"size":884,"mtime":1612866623021,"results":"96","hashOfConfig":"70"},{"size":3546,"mtime":1612872100292,"results":"97","hashOfConfig":"70"},{"size":739,"mtime":1610378738521,"results":"98","hashOfConfig":"70"},{"size":2118,"mtime":1613036361663,"results":"99","hashOfConfig":"70"},{"size":755,"mtime":1608669175238,"results":"100","hashOfConfig":"70"},{"size":2380,"mtime":1613036375258,"results":"101","hashOfConfig":"70"},{"size":7048,"mtime":1613127059833,"results":"102","hashOfConfig":"70"},{"size":3308,"mtime":1612968430804,"results":"103","hashOfConfig":"70"},{"size":1107,"mtime":1612984327318,"results":"104","hashOfConfig":"70"},{"size":3087,"mtime":1613049012417,"results":"105","hashOfConfig":"70"},{"size":2030,"mtime":1612976310715,"results":"106","hashOfConfig":"70"},{"size":1049,"mtime":1613038387176,"results":"107","hashOfConfig":"70"},{"size":4024,"mtime":1611329198303,"results":"108","hashOfConfig":"70"},{"size":442,"mtime":1610114000968,"results":"109","hashOfConfig":"70"},{"size":3640,"mtime":1612982858398,"results":"110","hashOfConfig":"70"},{"size":2670,"mtime":1611070571901,"results":"111","hashOfConfig":"70"},{"size":1099,"mtime":1610117914092,"results":"112","hashOfConfig":"70"},{"size":1670,"mtime":1612982942012,"results":"113","hashOfConfig":"70"},{"size":1512,"mtime":1613057697372,"results":"114","hashOfConfig":"70"},{"size":8409,"mtime":1612983173589,"results":"115","hashOfConfig":"70"},{"size":1350,"mtime":1612975624492,"results":"116","hashOfConfig":"70"},{"size":985,"mtime":1612974880361,"results":"117","hashOfConfig":"70"},{"size":1596,"mtime":1612975513700,"results":"118","hashOfConfig":"70"},{"size":2423,"mtime":1610546824016,"results":"119","hashOfConfig":"70"},{"size":616,"mtime":1610381582136,"results":"120","hashOfConfig":"70"},{"size":3333,"mtime":1613048909008,"results":"121","hashOfConfig":"70"},{"size":2953,"mtime":1613049187348,"results":"122","hashOfConfig":"70"},{"size":744,"mtime":1611070669575,"results":"123","hashOfConfig":"70"},{"size":3644,"mtime":1612984477721,"results":"124","hashOfConfig":"70"},{"size":5595,"mtime":1612963231423,"results":"125","hashOfConfig":"70"},{"size":2635,"mtime":1612272455549,"results":"126","hashOfConfig":"70"},{"size":1973,"mtime":1611235477048,"results":"127","hashOfConfig":"70"},{"size":4271,"mtime":1613236376705,"results":"128","hashOfConfig":"70"},{"size":5415,"mtime":1613156668211,"results":"129","hashOfConfig":"70"},{"size":691,"mtime":1613145632402,"results":"130","hashOfConfig":"70"},{"size":1333,"mtime":1613238665143,"results":"131","hashOfConfig":"70"},{"size":4271,"mtime":1612983281646,"results":"132","hashOfConfig":"70"},{"size":920,"mtime":1612962930238,"results":"133","hashOfConfig":"70"},{"size":1577,"mtime":1612363167913,"results":"134","hashOfConfig":"70"},{"size":1080,"mtime":1612280571230,"results":"135","hashOfConfig":"70"},{"size":2459,"mtime":1612982231087,"results":"136","hashOfConfig":"70"},{"size":6188,"mtime":1613235765089,"results":"137","hashOfConfig":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"boqaos",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"140"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"140"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"140"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"140"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"140"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"140"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"140"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\index.tsx",[],["282","283"],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\App.tsx",["284"],"import { autorun } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport React, { Fragment, useContext, useEffect } from 'react';\nimport {\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter,\n} from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport GroupList from '../../features/groups/List/GroupList';\nimport HomePage from '../../features/home/HomePage';\nimport NavBar from '../../features/nav/NavBar';\nimport Profile from '../../features/profiles/Profile';\nimport TicketFullDetails from '../../features/tickets/Details/TicketFullDetails';\nimport TicketForm from '../../features/tickets/Form/TicketForm';\nimport TicketList from '../../features/tickets/List/TicketList';\nimport { RootStoreContext } from '../stores/rootStore';\nimport LoadingComponent from './LoadingComponent';\nimport NotFound from './NotFound';\nimport PrivateRoute from './PrivateRoute';\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const { getUser } = rootStore.userStore;\n\n  useEffect(() => {\n    autorun(() => {\n      if (token && !appLoaded) {\n        console.log('Token: ', token, ' apploaded: ', appLoaded);\n        getUser().finally(() => setAppLoaded());\n        console.log('Token1: ', token, ' apploaded1: ', appLoaded);\n      } else if (!appLoaded) {\n        console.log('Token2: ', token, ' apploaded2: ', appLoaded);\n        setAppLoaded();\n      }\n    });\n  }, []);\n\n  if (!appLoaded) return <LoadingComponent content='Loading app...' />;\n  return (\n    <Fragment>\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: '7em', border: '2px solid black' }}>\n              <Switch>\n                <PrivateRoute path='/issues' component={TicketList} />\n                <PrivateRoute\n                  path='/ticket/:username/:id'\n                  component={TicketFullDetails}\n                />\n                <PrivateRoute\n                  path='/ticket/:groupId/:id'\n                  component={TicketFullDetails}\n                />\n                <PrivateRoute path='/groups' component={GroupList} />\n                <PrivateRoute path='/createTicket' component={TicketForm} />\n                <PrivateRoute path='/profile/:username' component={Profile} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n};\n\nexport default withRouter(observer(App));\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\TicketList.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketForm.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupList.tsx",["285"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Dropdown,\r\n  Grid,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport GroupListExplainer from './GroupListExplainer';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { IGroup, IMember } from '../../../app/models/groups';\r\nimport GroupSummary from './GroupSummary';\r\nimport GroupForm from '../Form/GroupForm';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport GroupDetails from '../Details/GroupDetails';\r\n\r\nimport { RouteComponentProps, useHistory } from 'react-router-dom';\r\n\r\ninterface RouteParams {\r\n  groupId: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nconst GroupList: React.FC<IProps> = () => {\r\n  let history = useHistory();\r\n\r\n  const { groupStore, userStore } = useContext(RootStoreContext);\r\n  const { loadGroups, setSelectedGroupEmpty, selectedGroupId } = groupStore;\r\n  const { user } = userStore;\r\n  // console.log('history location state ', history.location.state);\r\n  let isProfileRedirect = history.location.state === 'profileGroups';\r\n  const [selectedGroup, setSelectedGroup] = useState<null | string>(\r\n    isProfileRedirect ? selectedGroupId : null\r\n  );\r\n  const [isCreatingGroup, setCreatingGroup] = useState(false);\r\n  //console.log('id: ', groupStore.selectedGroup, groupStore.selectedGroupId);\r\n  useEffect(() => {\r\n    async function gottaLoadGroups() {\r\n      await loadGroups();\r\n    }\r\n    // We need to load groups if we arent redirected from profiles\r\n    // OR if user refresh page on group from a redirect.\r\n    if (\r\n      (!isProfileRedirect && selectedGroupId === '') ||\r\n      (isProfileRedirect && selectedGroupId === '')\r\n    ) {\r\n      console.log('Loading groups!');\r\n      gottaLoadGroups();\r\n    }\r\n    return () => {\r\n      //setSelectedGroupEmpty();\r\n      //stopHubConnection();\r\n    };\r\n  }, [selectedGroupId, loadGroups, setSelectedGroupEmpty, isProfileRedirect]);\r\n\r\n  const handleDropDownChange = async (e: any, data: any) => {\r\n    if (selectedGroupId) {\r\n      await groupStore.stopHubConnection();\r\n    }\r\n    groupStore.setSelectedGroup(data.value);\r\n    setSelectedGroup(data.value);\r\n    //history.push(`/groups/${data.value}`);\r\n    // Now filter list items shown on data.value for status\r\n  };\r\n\r\n  const isMember = (selectedGroup: string) => {\r\n    // get the currently logged in user\r\n    if (!groupStore.selectedGroup) return;\r\n    let checkingGrp: IGroup = groupStore.selectedGroup;\r\n    let isMemberFlag = false;\r\n    // Check if user is member in group\r\n    // This gives\r\n    // useObserver.ts:119 Uncaught TypeError: _checkingGrp$members.forEach is not a function\r\n    checkingGrp.members?.forEach((member: IMember) => {\r\n      if (member.username === user?.username) isMemberFlag = true;\r\n    });\r\n\r\n    return isMemberFlag;\r\n  };\r\n\r\n  if (groupStore.loadingGroups)\r\n    return <LoadingComponent content='Loading Groups...' />;\r\n\r\n  return isCreatingGroup ? (\r\n    <GroupForm\r\n      setCreatingGroup={setCreatingGroup}\r\n      setSelectedGroup={setSelectedGroup}\r\n    />\r\n  ) : (\r\n    <Segment clearing style={{ border: '2px solid #bc4123' }}>\r\n      <Grid\r\n        style={{\r\n          margin: '0px',\r\n          marginBottom: '14px',\r\n        }}\r\n        stackable\r\n      >\r\n        <Grid.Row style={{ paddingBottom: '0px' }} columns={2}>\r\n          <Grid.Column\r\n            floated={'left'}\r\n            style={{ margin: '0px', padding: '10px' }}\r\n          >\r\n            <Dropdown\r\n              style={{ marginLeft: '0px' }}\r\n              placeholder='Select Group'\r\n              selection\r\n              defaultValue={selectedGroup!}\r\n              options={groupStore.groupTitles}\r\n              onChange={handleDropDownChange}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column align='right' floated={'right'}>\r\n            <Button\r\n              style={{ margin: '0px' }}\r\n              positive\r\n              onClick={() => setCreatingGroup(true)}\r\n            >\r\n              Create Group\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Divider\r\n          fitted\r\n          style={{\r\n            marginLeft: '10px',\r\n            marginRight: '10px',\r\n            marginBottom: '0px',\r\n          }}\r\n        />\r\n        <Grid.Row style={{ margin: '10px' }} centered columns={1}>\r\n          <Segment\r\n            clearing\r\n            style={{\r\n              backgroundColor: 'rgb(7, 20, 38)',\r\n              border: 'none',\r\n            }}\r\n          >\r\n            {selectedGroup ? (\r\n              isMember(selectedGroup!) ? (\r\n                <GroupDetails\r\n                  group={groupStore.groupsByDate.find(\r\n                    (group: IGroup) => group.id === selectedGroup\r\n                  )}\r\n                />\r\n              ) : (\r\n                <GroupSummary\r\n                  group={groupStore.groupsByDate.find(\r\n                    (group: IGroup) => group.id === selectedGroup\r\n                  )}\r\n                ></GroupSummary>\r\n              )\r\n            ) : (\r\n              <GroupListExplainer />\r\n            )}\r\n          </Segment>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(GroupList);\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\ticketStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\groupStore.ts",["286"],"import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { Console } from \"console\";\r\nimport { makeAutoObservable, observable, runInAction  } from \"mobx\";\r\nimport { createMember } from \"../../features/utils/helperMethods\";\r\nimport agent from \"../api/agent\";\r\nimport { IAnnouncement, IGroup, IMember } from \"../models/groups\";\r\nimport { IPhoto } from \"../models/profile\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class GroupStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    groupRegistry = new Map();\r\n    loadingGroups = false;\r\n    submittingAnnouncement = false;\r\n    submittingGroup = false;\r\n    selectedGroupId = \"\";\r\n    loadingGroupPhoto = false;\r\n    deletingGroupPhoto = false;\r\n    isPromotingMember = false;\r\n    isUploadingGroupEdit = false;\r\n\r\n    // Option to not use decorators for setting a ref?\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n\r\n    get isHostOfGroup() {\r\n        // If user is host return true:\r\n        return this.selectedGroup.members.filter((member: IMember) => \r\n            member.isHost && member.username === this.rootStore.userStore.user?.username\r\n        ).length > 0;\r\n    }\r\n\r\n    \r\n    get isHostOrAdminOfGroup() {\r\n        // If user is host return true:\r\n        return this.selectedGroup?.members.filter((member: IMember) => \r\n            (member.isHost || member.isAdmin) && member.username === this.rootStore.userStore.user?.username\r\n        ).length > 0;\r\n    }\r\n\r\n    get getGroups() {\r\n        return Array.from(this.groupRegistry.values())\r\n    }\r\n    //@computed\r\n    get groupsByDate() {\r\n        return Array.from(this.groupRegistry.values()).slice().sort((a, b) => Date.parse(a.createdAt) - Date.parse(b.createdAt))\r\n    }\r\n    //@computed\r\n    // This is for Group page Dropdown selection of group names.\r\n    get groupTitles() {\r\n        return Array.from(this.groupRegistry.values())\r\n            .slice()\r\n            .sort((a, b) => a.groupName?.charAt(0).localeCompare(b.groupName.charAt(0)))\r\n            .map((group: IGroup) => ({\"key\": group.id, \"value\":  group.id, \"text\": group.groupName } ) )\r\n    }\r\n\r\n    get selectedGroup() {\r\n        return Array.from(this.groupRegistry.values()).find((grp: IGroup) => grp.id === this.selectedGroupId);\r\n    }\r\n\r\n    get groupTitleForUser() {\r\n        return Array.from(this.groupRegistry.values())\r\n        .slice()\r\n        .sort((a, b) => a.groupName?.charAt(0).localeCompare(b.groupName.charAt(0)))\r\n        .filter((group: IGroup) => group.members?.filter((member: IMember) => \r\n           (member.username === this.rootStore.userStore.user?.username)).length\r\n        ).map((group: IGroup) => \r\n            ({\"key\": group.id, \"value\":  group.id, \"text\": group.groupName,  \"photo\": group.photos?.slice(0,1)[0] })\r\n        );\r\n    }\r\n\r\n    createHubConnection = (groupId: string) => {\r\n        // process.env.REACT_APP_API_CHAT_URL!\r\n        // Prevent this from opening two connections with the same token.\r\n        try {\r\n            this.hubConnection = new HubConnectionBuilder().withUrl(\"http://localhost:5000/chat\", {\r\n                accessTokenFactory: () => this.rootStore.commonStore.token!\r\n            })\r\n            .configureLogging(LogLevel.Information).build();\r\n            //console.log(\"Starting hub connection: \", this.selectedGroupId!);\r\n            this.hubConnection\r\n                .start()\r\n                .then(() => console.log(this.hubConnection!.state))\r\n                .then(() => {\r\n                    if(this.hubConnection!.state === \"Connected\") {\r\n                    this.hubConnection!.invoke(\"AddToGroup\", groupId)\r\n                    }\r\n                })\r\n            .catch(error => console.log(\"Error establishing connection: \", error));\r\n            // This is being called twice when coming from profile/profileGroups link\r\n\r\n                this.hubConnection?.on(\"ReceiveComment\", comment => {\r\n                    runInAction(() => {\r\n                        this.selectedGroup!.comments.push(comment);\r\n                    });\r\n                })\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }  \r\n\r\n    stopHubConnection = async () => {\r\n        try {\r\n            if (this.hubConnection) {\r\n                //console.log(\"inside \", this.selectedGroupId, \" Connection.state = \", this.hubConnection!.state);\r\n\r\n                if(this.hubConnection!.state === (\"Connected\" || \"Connecting\")) {\r\n                    await this.hubConnection.invoke(\"RemoveFromGroup\", this.selectedGroupId!).then(() => {\r\n                        //console.log(\"Stopping hub connection: \", this.selectedGroupId!);\r\n                      this.hubConnection!.stop();\r\n                    }).then(() => console.log(\"Connection stopped\")).catch(err => console.log(err))\r\n                }\r\n            } \r\n\r\n        } catch (error) {\r\n            runInAction(() => console.log(error));\r\n        }\r\n    }\r\n  \r\n    addComment = async (values: any) =>  {\r\n        values.groupId = this.selectedGroupId!;\r\n        try {\r\n          await this.hubConnection!.invoke(\"SendComment\", values);\r\n        } catch(error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n\r\n    addAnnouncement = async (groupId: string, body: IAnnouncement) =>  {\r\n        this.submittingAnnouncement = true;\r\n        try {\r\n          await agent.Groups.addAnnouncement(groupId, body);\r\n          runInAction(() => {\r\n              // Add announcement to the groups announcement array\r\n              this.groupRegistry.get(groupId).announcements.push(body);\r\n              // flip flag\r\n              this.submittingAnnouncement = false;\r\n          })\r\n        } catch(error) {\r\n            runInAction(() => {\r\n                this.submittingAnnouncement = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }   \r\n\r\n    deleteAnnouncement = async (groupId: string, announcementId: string) => {\r\n        this.submittingAnnouncement = true;\r\n        try {\r\n            await agent.Groups.delAnnouncement(groupId, announcementId);\r\n            runInAction(() => {\r\n                this.groupRegistry.get(groupId).announcements = this.groupRegistry.get(groupId).announcements.filter((announcement: IAnnouncement) => announcement.id !== announcementId)\r\n                this.submittingAnnouncement = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingAnnouncement = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    uploadPhoto = async (groupId: string, file: Blob) => {\r\n        this.loadingGroupPhoto = true;\r\n        try {\r\n            const photo = await agent.Groups.uploadPhoto(groupId, file);\r\n            runInAction(() => {\r\n                this.groupRegistry.get(groupId).photos.push(photo);\r\n                this.loadingGroupPhoto = false;\r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingGroupPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (groupId: string, photo: IPhoto) => {\r\n        this.deletingGroupPhoto = true;\r\n        try {\r\n            await agent.Groups.deletePhoto(groupId, photo.id);\r\n            runInAction(() => {\r\n                this.groupRegistry!.get(groupId).photos = [];\r\n                this.deletingGroupPhoto = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.deletingGroupPhoto = false;\r\n            })\r\n        }\r\n    }\r\n  \r\n    addAdminComment = async (values: any) => {\r\n        let sendValues = {groupId: \"\", username: \"\", body: \"\"};\r\n        sendValues.groupId = this.selectedGroupId!;\r\n        sendValues.username = values.username;\r\n        sendValues.body = `User ${values.username} has ${values.status} the group!`;\r\n        //console.log(\"SendAdminComment called now with: \", sendValues);\r\n        try {\r\n          await this.hubConnection!.invoke(\"SendAdminComment\", sendValues);\r\n        } catch(error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n\r\n    addAdmin = async (groupId: string, username: string) => {\r\n        this.isPromotingMember = true;\r\n        try {\r\n            let userName = {username: username};\r\n            await agent.Groups.editMember(groupId, userName);\r\n            runInAction(() => {\r\n                this.selectedGroup?.members.forEach((member: IMember) => {\r\n                    if (member.username === username)\r\n                        member.isAdmin = true;\r\n                });\r\n                console.log(\"Is he admin? \", this.selectedGroup);\r\n                this.isPromotingMember = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isPromotingMember = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadGroups = async () => {\r\n        this.loadingGroups = true;\r\n        try {\r\n            const groups = await agent.Groups.list();\r\n            runInAction(() => {\r\n                groups.forEach((group) => {\r\n                    group.createdAt = group.createdAt!.split('.')[0]\r\n                    this.groupRegistry.set(group.id, group)\r\n                })\r\n                this.loadingGroups = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingGroups = false;\r\n                console.log(\"Error loading group: \", error)\r\n            })\r\n        }\r\n    }\r\n\r\n    createGroup = async (group: IGroup) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            await agent.Groups.create(group);\r\n            let members = [];\r\n            const member = createMember(this.rootStore.userStore.user!);\r\n            member.isHost = true;\r\n            members.push(member);\r\n            group.members = members;\r\n            group.comments = [];\r\n            group.announcements = [];\r\n            group.photos = [];\r\n            runInAction(() => {\r\n                this.groupRegistry.set(group.id, group);\r\n                this.submittingGroup = false;\r\n                this.setSelectedGroup(group.id);\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in createGroup: \", error);\r\n            })\r\n        }\r\n    }\r\n\r\n    editGroupDescription = async (group: IGroup) => {\r\n        this.isUploadingGroupEdit = true;\r\n        try {\r\n            console.log(\"Sending up: \", group);\r\n            await agent.Groups.update(group);\r\n            runInAction(() => {\r\n                // update groupregistry grp\r\n                this.groupRegistry.set(group.id, group);\r\n                this.isUploadingGroupEdit = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.isUploadingGroupEdit = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setSelectedGroup = (groupId: string) => {\r\n        try {\r\n            this.selectedGroupId = groupId;\r\n        } catch (error) {\r\n            console.log(\"Error setting selected group: \", error);\r\n        }\r\n    }\r\n\r\n    setSelectedGroupEmpty = () => {\r\n        try {\r\n            this.selectedGroupId = \"\";\r\n        } catch (error) {\r\n            console.log(\"Error setting selected group Empty : \", error);\r\n        }\r\n    } \r\n\r\n    joinGroup = async (groupId: string) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            await agent.Groups.join(groupId);\r\n            runInAction(() => {\r\n                // Add user to memberlist for grp\r\n                this.selectedGroup.members.push(this.rootStore.userStore.user);\r\n                this.submittingGroup = false;\r\n            })\r\n        } catch(err) {\r\n            runInAction(() => {\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in joinGroup: \", err);\r\n            })\r\n        }\r\n    }\r\n\r\n    leaveGroup = async (groupId: string) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            await agent.Groups.leave(groupId);\r\n            runInAction(() => {\r\n\r\n                this.selectedGroup.members  = this.selectedGroup.members.filter((member: IMember) => \r\n                    member.username !== this.rootStore.userStore.user?.username\r\n                );\r\n                this.selectedGroupId = \"\";\r\n                this.submittingGroup = false;\r\n            })\r\n        } catch(err) {\r\n            runInAction(() => {\r\n                this.selectedGroupId = \"\";\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in leaveGroup: \", err);\r\n            })\r\n        }\r\n    }\r\n}","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\utils\\helperMethods.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\tickets.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\SearchList.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\StatusStats.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupListExplainer.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupSummary.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketDetails.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Form\\GroupForm.tsx",["287"],"import React, { useContext, useState } from 'react';\r\nimport { Button, Form, Segment } from 'semantic-ui-react';\r\nimport { IGroup } from '../../../app/models/groups';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport FormCheckbox from '../../../app/common/form/FormCheckbox';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\n// requirement fields for validation in form.\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\nconst minLength = (min: any) => (value: any) =>\r\n  value.length > min || value >= min\r\n    ? undefined\r\n    : `Should be atleast ${min} characters long.`;\r\nconst composeValidators = (...validators: any) => (value: string) =>\r\n  validators.reduce(\r\n    (error: any, validator: any) => error || validator(value),\r\n    undefined\r\n  );\r\n\r\ninterface IProps {\r\n  setCreatingGroup: (flag: boolean) => void;\r\n  setSelectedGroup: (flag: any) => void;\r\n}\r\n\r\nconst GroupForm: React.FC<IProps> = ({\r\n  setCreatingGroup,\r\n  setSelectedGroup,\r\n}) => {\r\n  const initializeForm = () => {\r\n    return {\r\n      id: '',\r\n      groupName: '',\r\n      description: '',\r\n      isPublic: true,\r\n      createdAt: new Date().toISOString(),\r\n      open: 0,\r\n      closed: 0,\r\n      verify: 0,\r\n    };\r\n  };\r\n  const { groupStore } = useContext(RootStoreContext);\r\n  const [group, setGroup] = useState<IGroup>(initializeForm);\r\n\r\n  const handleFinalFormSubmit = async (value: any) => {\r\n    if (group.id.length === 0) {\r\n      // value is an observer so dont flip it directly.\r\n      const boolish = !value.isPublic;\r\n      const newGroup: IGroup = {\r\n        ...group,\r\n        id: uuid(),\r\n        groupName: value.groupName,\r\n        description: value.description,\r\n        isPublic: boolish,\r\n      };\r\n      //Create a new group\r\n      await groupStore.createGroup(newGroup);\r\n      console.log('Group created successfully');\r\n      setSelectedGroup(newGroup.id);\r\n      setCreatingGroup(false);\r\n    } else {\r\n      // Editing existing ticket.\r\n      //editGroup(newGroup);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <h3 style={{ justifyContent: 'center' }}>Create a new Group</h3>\r\n      <FinalForm\r\n        initialValues={group}\r\n        onSubmit={handleFinalFormSubmit}\r\n        render={({ handleSubmit, invalid, pristine }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <Field\r\n              validate={composeValidators(required, minLength(2))}\r\n              name='groupName'\r\n              placeholder='Group Name'\r\n              value={group.groupName}\r\n              component={TextInput}\r\n            />\r\n            <Field\r\n              name='isPublic'\r\n              type='checkbox'\r\n              label='Make Group Private (hidden from search)'\r\n              component={FormCheckbox}\r\n            />\r\n            <Field\r\n              validate={composeValidators(required, minLength(10))}\r\n              rows={2}\r\n              name='description'\r\n              placeholder='Description'\r\n              value={group.description}\r\n              component={TextAreaInput}\r\n            />\r\n            <Button\r\n              disabled={groupStore.submittingGroup || invalid || pristine}\r\n              loading={groupStore.submittingGroup}\r\n              type='submit'\r\n              positive\r\n            >\r\n              Submit Group\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setCreatingGroup(false);\r\n                setSelectedGroup(null);\r\n              }}\r\n              type='button'\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(GroupForm);\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\TextInput.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\SelectInput.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\api\\agent.ts",["288"],"import axios, { AxiosResponse } from 'axios';\r\nimport { history } from '../..';\r\nimport { IAnnouncement, IComment, IGroup } from '../models/groups';\r\nimport { IPhoto, IProfile, IProfileEdits } from '../models/profile';\r\nimport { ITicket, ITicketPhoto, ITicketText } from '../models/tickets';\r\nimport { IUser, IUserFormValues } from '../models/user';\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\n\r\naxios.interceptors.request.use((config: any) => {\r\n    const token = window.localStorage.getItem(\"jwt\");\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n});\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n    const {status, data, config, headers} = error.response;\r\n\r\n    if (error.Message === 'Network Error' && !error.response) {\r\n        history.push('/NoNet');\r\n    }\r\n    if (status === 404) {\r\n        history.push('/notfound');\r\n    }\r\n    if (status === 401 && headers['www-authenticate'].includes('The token expired'))\r\n    {\r\n        window.localStorage.removeItem(\"jwt\");\r\n        history.push(\"/\");\r\n        console.log(\"Your session has expired, please login again\");\r\n        console.log(error.response);\r\n    }\r\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n        history.push('/notfound');\r\n    }\r\n\r\n    //if (status === 400 && config.method === 'post') {\r\n    //    history.push('/notfound');\r\n    //}\r\n\r\n    if (status === 500) {\r\n        history.push('/NoServer')\r\n    }\r\n    throw error.response;\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => \r\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms))\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody),\r\n    postForm: async (url: string, file: any) => {\r\n        const formData = new FormData();\r\n        //const blob = await fetch(file).then((res) => res.blob());\r\n        // Note: Keyword_must_be \"File\" \r\n        formData.append(\"File\", file.blob, file.name);\r\n        //formData.append(\"FileName\", file)\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-Type': \"multipart/form-data\"}\r\n        }).then(responseBody)\r\n    },\r\n    postTicketForm: async (url: string, ticket: any, file: any) => {\r\n        const formData = new FormData();\r\n        //const blob = await fetch(file).then((res) => res.blob());\r\n        // Note: Keyword_must_be \"File\" \r\n        for (var key in ticket) {\r\n            formData.append(key, ticket[key]);\r\n        }\r\n        formData.append(\"File\", file.blob, file.name);\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-Type': \"multipart/form-data\"}\r\n        }).then(responseBody)\r\n    },\r\n    postTicketForms: async (url: string, ticket: any, data: Array<{blob: Blob, name: string}>) => {\r\n        const formData = new FormData();\r\n        //const blob = await fetch(file).then((res) => res.blob());\r\n        // Note: Keyword_must_be \"File\" \r\n        for (var key in ticket) {\r\n            formData.append(key, ticket[key]);\r\n        }\r\n        \r\n        let blobData: Blob[] = [];\r\n        let nameData: string[]= []\r\n        console.log(\"ITEM: OUTSIDE \", data[0]);\r\n        for (var i = 0; i < data.length; i++) {\r\n            blobData.push(data[i].blob);\r\n            nameData.push(data[i].name);\r\n            console.log(\"ITEM: \", data[i]);\r\n            formData.append(\"File\", data[i].blob, data[i].name);\r\n        }\r\n        console.log(\"FORMDATA: \", formData);\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-Type': \"multipart/form-data\"}\r\n        }).then(responseBody)\r\n    },\r\n    postTextForm: async (url: string, file: Blob) => {\r\n        const formData = new FormData();\r\n        //const blob = await fetch(file).then((res) => res.blob());\r\n        // Note: Keyword_must_be \"File\" \r\n        formData.append(\"File\", file);\r\n        //formData.append(\"FileName\", file)\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-Type': 'text/plain; charset=\"utf-8\"'}\r\n        }).then(responseBody)\r\n    },\r\n}\r\n\r\nconst Tickets = {\r\n    list: (): Promise<ITicket[]> => requests.get(\"/tickets\"),\r\n    details: (id: string) => requests.get(`/tickets/${id}`),\r\n    create: (ticket: ITicket) => requests.post(`/tickets`, ticket),\r\n    createWithPhoto: (ticket: ITicket, photo: Blob) => requests.postTicketForm(`/tickets/withPhoto`, ticket, photo),\r\n    createTicketMultiple: (ticket: ITicket, data: Array<{blob: Blob, name: string}>) => requests.postTicketForms(`/tickets/withPhoto`, ticket, data),\r\n    update: (ticket: ITicket) => requests.put(`/tickets/${ticket.id}`, ticket),\r\n    delete: (id: string) => requests.del(`/tickets/${id}`),\r\n    addComment: (ticketId: string, comment: IComment) => requests.post(`/tickets/comment/${ticketId}`, comment),\r\n    delComment: (ticketId: string, commentId: string) => requests.del(`/tickets/comment/${ticketId}/${commentId}`),\r\n    editComment: (ticketId: string, commentId: string, body: any) => requests.put(`/tickets/comment/${ticketId}/${commentId}`, body),\r\n    addPhoto: (ticketId: string, photo: Blob): Promise<ITicketPhoto> => requests.postForm(`/photos/tickets/${ticketId}`, photo),\r\n    delPhoto: (ticketId: string, photoId: string) => requests.del(`/photos/tickets/${ticketId}/${photoId}`),\r\n    addTextFile: (ticketId: string, text: Blob): Promise<ITicketText> => requests.postTextForm(`/texts/tickets/${ticketId}`, text),\r\n    delTextFile: (ticketId: string, textId: string) => requests.del(`/texts/tickets/${ticketId}/${textId}`)\r\n\r\n}\r\n\r\nconst Groups = {\r\n    list: (): Promise<IGroup[]> => requests.get(\"/groups\"),\r\n    details: (id: string) => requests.get(`/groups/${id}`),\r\n    create: (group: IGroup) => requests.post(`/groups`, group),\r\n    update: (group: IGroup) => requests.put(`/groups/${group.id}`, group),\r\n    delete: (id: string) => requests.del(`/groups/${id}`),\r\n    join: (id: string) => requests.post(`/groups/${id}/join`, {}),\r\n    leave: (id: string) => requests.del(`/groups/${id}/join`),\r\n    editMember: (groupId: string, username: {username: string}) => requests.put(`/groups/${groupId}/member`, username),\r\n    addAnnouncement: (id: string, body: IAnnouncement) => requests.post(`/groups/announcement/${id}`, body),\r\n    delAnnouncement: (groupId: string, announcementId: string) => requests.del(`/groups/announcement/${groupId}/${announcementId}`),\r\n    uploadPhoto: (id: string, photo: Blob): Promise<IPhoto> => requests.postForm(`/photos/groups/${id}`, photo),\r\n    deletePhoto: (groupId: string, photoId: string) => requests.del(`/photos/groups/${groupId}/${photoId}`)\r\n}\r\n\r\nconst User = {\r\n    current: (): Promise<IUser> => requests.get('/user'),\r\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/login`, user),\r\n    delete: (user: string) => requests.del(`/user/delete/${user}`),\r\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/register`, user),\r\n    refreshToken: (): Promise<IUser> => requests.post(`/user/refreshToken`, {}),    \r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string): Promise<IProfile> => requests.get(`profiles/${username}`),\r\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos`, photo),\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    editProfile: (profile: IProfileEdits) => requests.put(`/profiles`, profile)\r\n}\r\n\r\nexport default { Tickets, Groups, User, Profiles };\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\FormCheckbox.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\rootStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\commonStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\userStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\PrivateRoute.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\user\\LoginForm.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\user\\RegisterForm.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetails.tsx",["289"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Divider, Item, Segment } from 'semantic-ui-react';\r\n\r\nimport { IGroup, IMember } from '../../../app/models/groups';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport GroupAdminsList from './GroupAdminsList';\r\nimport GroupAnnouncement from './GroupAnnouncement';\r\nimport GroupAnnouncementTest from './GroupAnnouncement';\r\nimport GroupClickToComment from './GroupClickToComment';\r\nimport GroupDescriptionEdit from './GroupDescriptionEdit';\r\nimport GroupDetailedChatFlow from './GroupDetailedChatFlow';\r\nimport GroupDetailsFooter from './GroupDetailsFooter';\r\nimport GroupDetailsHeader from './GroupDetailsHeader';\r\nimport GroupUploadPhoto from './GroupUploadPhoto';\r\n\r\ninterface IProps {\r\n  group: IGroup;\r\n}\r\n\r\nconst GroupDetails: React.FC<IProps> = ({ group }) => {\r\n  const { groupName, description, id, members, photos } = group;\r\n  const { groupStore } = useContext(RootStoreContext);\r\n  const {\r\n    stopHubConnection,\r\n    leaveGroup,\r\n    submittingGroup,\r\n    isHostOfGroup,\r\n    createHubConnection,\r\n    selectedGroupId,\r\n    isHostOrAdminOfGroup,\r\n    deleteAnnouncement,\r\n    submittingAnnouncement,\r\n    uploadPhoto,\r\n    deletePhoto,\r\n    editGroupDescription,\r\n    isUploadingGroupEdit,\r\n    loadingGroupPhoto,\r\n    deletingGroupPhoto,\r\n    selectedGroup,\r\n  } = groupStore;\r\n  const [isAddingPhoto, setIsAddingPhoto] = useState(false);\r\n  const [isEditingDescription, setIsEditingDescription] = useState(false);\r\n  // Clean up when grouplist -> chat works.\r\n  useEffect(() => {\r\n    console.log('GroupDetails called');\r\n    createHubConnection(selectedGroupId);\r\n    return () => {\r\n      stopHubConnection();\r\n    };\r\n  }, [createHubConnection, selectedGroupId, stopHubConnection]);\r\n\r\n  const handleFinalFormSubmit = async (values: any) => {\r\n    try {\r\n      //await editProfile(values);\r\n      const newGroup = selectedGroup;\r\n      newGroup.description = values.description;\r\n      await editGroupDescription(newGroup);\r\n      setIsEditingDescription(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Item.Group\r\n      divided\r\n      style={{\r\n        margin: '10px',\r\n        backgroundColor: 'rgb(7, 20, 38) ',\r\n        border: '1px solidrgba(255,255,255,0.4)',\r\n      }}\r\n    >\r\n      <Item>\r\n        <Item.Content\r\n          style={{\r\n            margin: '10px',\r\n          }}\r\n          verticalAlign='middle'\r\n        >\r\n          <Item>\r\n            <Item.Content\r\n              style={{\r\n                margin: '10px',\r\n              }}\r\n            >\r\n              <GroupDetailsHeader\r\n                groupId={selectedGroupId}\r\n                deletePhoto={deletePhoto}\r\n                groupName={groupName}\r\n                photo={{\r\n                  id: photos ? photos?.slice(0, 1)[0]?.id : undefined,\r\n                  url: photos ? photos?.slice(0, 1)[0]?.url : undefined,\r\n                }}\r\n                isHostOrAdminOfGroup={isHostOrAdminOfGroup}\r\n                loadingGroupPhoto={loadingGroupPhoto}\r\n                deletingGroupPhoto={deletingGroupPhoto}\r\n                setIsAddingPhoto={setIsAddingPhoto}\r\n                isAddingPhoto={isAddingPhoto}\r\n              />\r\n\r\n              <Segment\r\n                clearing\r\n                style={{\r\n                  backgroundColor: 'rgb(7, 20, 38)',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                }}\r\n              >\r\n                {isEditingDescription ? (\r\n                  <div>\r\n                    <GroupDescriptionEdit\r\n                      handleFinalFormSubmit={handleFinalFormSubmit}\r\n                      description={description}\r\n                      isUploadingGroupEdit={isUploadingGroupEdit}\r\n                    />\r\n                    <Button\r\n                      floated='right'\r\n                      icon='cancel'\r\n                      onClick={() => setIsEditingDescription(false)}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <Item.Description style={{ whiteSpace: 'pre-wrap' }}>\r\n                      {description}{' '}\r\n                    </Item.Description>\r\n                    {isHostOrAdminOfGroup && (\r\n                      <Button\r\n                        floated='right'\r\n                        icon='edit'\r\n                        onClick={() => setIsEditingDescription(true)}\r\n                      />\r\n                    )}\r\n                  </>\r\n                )}\r\n              </Segment>\r\n              {isHostOrAdminOfGroup && isAddingPhoto && (\r\n                <GroupUploadPhoto\r\n                  groupId={selectedGroupId}\r\n                  uploadPhoto={uploadPhoto}\r\n                  loading={loadingGroupPhoto}\r\n                  setIsAddingPhoto={setIsAddingPhoto}\r\n                />\r\n              )}\r\n              <Item.Description>\r\n                <Segment\r\n                  clearing\r\n                  attached\r\n                  style={{\r\n                    padding: '6px',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255,255,255,0.4)',\r\n                    backgroundColor: 'rgb(7, 20, 38)',\r\n                    color: 'white',\r\n                  }}\r\n                >\r\n                  <GroupAdminsList\r\n                    admins={members!.filter(\r\n                      (member: IMember) => member.isAdmin || member.isHost\r\n                    )}\r\n                    members={members!.filter(\r\n                      (member: IMember) => !member.isAdmin && !member.isHost\r\n                    )}\r\n                    isHostOrAdmin={isHostOrAdminOfGroup}\r\n                  />\r\n                </Segment>\r\n                {isHostOrAdminOfGroup && (\r\n                  <GroupClickToComment isAnnouncement={true} />\r\n                )}\r\n                {group.announcements!.length > 0 && (\r\n                  <GroupAnnouncement\r\n                    groupId={selectedGroupId}\r\n                    announcements={group.announcements}\r\n                    isHostOrAdminOfGroup={isHostOrAdminOfGroup}\r\n                    deleteAnnouncement={deleteAnnouncement}\r\n                    submittingAnnouncement={submittingAnnouncement}\r\n                  />\r\n                )}\r\n              </Item.Description>\r\n            </Item.Content>\r\n          </Item>\r\n          <Divider />\r\n          <GroupDetailedChatFlow />\r\n          <Item.Content>\r\n            <Item.Extra>\r\n              <GroupDetailsFooter group={group} />\r\n            </Item.Extra>\r\n            <Button\r\n              loading={submittingGroup}\r\n              negative\r\n              disabled={isHostOfGroup}\r\n              onClick={() => leaveGroup(id)}\r\n            >\r\n              Leave Group\r\n            </Button>\r\n          </Item.Content>\r\n        </Item.Content>\r\n      </Item>\r\n    </Item.Group>\r\n  );\r\n};\r\n\r\nexport default observer(GroupDetails);\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupAdminsList.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailsFooter.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailedChatFlow.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\Profile.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileContent.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\profileStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileMenu.tsx",["290","291","292","293","294","295","296"],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileTickets.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketFullDetails.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileGroups.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\stylings\\StatusCircle.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileDescription.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileAbout.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\profile.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupAnnouncement.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupClickToComment.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupUploadPhoto.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailsHeader.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketComment.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketAddComment.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketCommentEdit.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketUploadPhoto.tsx",["297"],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketPhotoContainer.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\message\\MessageComponent.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\PhotoModal.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\UploadHoc.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\FileRead.tsx",["298"],"import React, { useEffect, useState } from 'react';\r\nimport { Loader } from 'semantic-ui-react';\r\n\r\nconst FileRead: React.FC<{ url: any }> = ({ url }) => {\r\n  const [fileString, setFileString] = useState('');\r\n  useEffect(() => {\r\n    if (!fileString) {\r\n      showFile();\r\n    }\r\n  }, []);\r\n\r\n  const showFile = async () => {\r\n    //e.preventDefault()\r\n    try {\r\n      const file = await fetch(\r\n        url.url ? url.url : url.preview\r\n      ).then((response) => response.arrayBuffer());\r\n\r\n      const dataView = new DataView(file);\r\n      //iso-8859-1\r\n      const decoder = new TextDecoder('utf-8');\r\n      const decodedString = decoder.decode(dataView);\r\n\r\n      setFileString(decodedString);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ whiteSpace: 'pre-wrap' }}>\r\n      {fileString ? fileString : <Loader />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileRead;\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDescriptionEdit.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\groups.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileSettings.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketAttachementsContainer.tsx",[],{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":39,"column":6,"nodeType":"305","endLine":39,"endColumn":8,"suggestions":"306"},{"ruleId":"307","severity":1,"message":"308","line":4,"column":3,"nodeType":"309","messageId":"310","endLine":4,"endColumn":12},{"ruleId":"307","severity":1,"message":"311","line":2,"column":10,"nodeType":"309","messageId":"310","endLine":2,"endColumn":17},{"ruleId":"307","severity":1,"message":"312","line":46,"column":17,"nodeType":"309","messageId":"310","endLine":46,"endColumn":25},{"ruleId":"313","severity":1,"message":"314","line":166,"column":1,"nodeType":"315","endLine":166,"endColumn":52},{"ruleId":"307","severity":1,"message":"316","line":9,"column":8,"nodeType":"309","messageId":"310","endLine":9,"endColumn":29},{"ruleId":"307","severity":1,"message":"317","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":25},{"ruleId":"307","severity":1,"message":"318","line":2,"column":16,"nodeType":"309","messageId":"310","endLine":2,"endColumn":22},{"ruleId":"307","severity":1,"message":"319","line":2,"column":24,"nodeType":"309","messageId":"310","endLine":2,"endColumn":28},{"ruleId":"307","severity":1,"message":"320","line":2,"column":30,"nodeType":"309","messageId":"310","endLine":2,"endColumn":34},{"ruleId":"307","severity":1,"message":"321","line":2,"column":45,"nodeType":"309","messageId":"310","endLine":2,"endColumn":50},{"ruleId":"307","severity":1,"message":"322","line":3,"column":10,"nodeType":"309","messageId":"310","endLine":3,"endColumn":18},{"ruleId":"307","severity":1,"message":"323","line":4,"column":8,"nodeType":"309","messageId":"310","endLine":4,"endColumn":22},{"ruleId":"307","severity":1,"message":"324","line":8,"column":8,"nodeType":"309","messageId":"310","endLine":8,"endColumn":28},{"ruleId":"303","severity":1,"message":"325","line":10,"column":6,"nodeType":"305","endLine":10,"endColumn":8,"suggestions":"326"},"no-native-reassign",["327"],"no-negated-in-lhs",["328"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appLoaded', 'getUser', 'setAppLoaded', and 'token'. Either include them or remove the dependency array.","ArrayExpression",["329"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Console' is defined but never used.","'setGroup' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'GroupAnnouncementTest' is defined but never used.","'useState' is defined but never used.","'Header' is defined but never used.","'Item' is defined but never used.","'Menu' is defined but never used.","'Image' is defined but never used.","'IProfile' is defined but never used.","'ProfileContent' is defined but never used.","'TicketPhotoContainer' is defined but never used.","React Hook useEffect has missing dependencies: 'fileString' and 'showFile'. Either include them or remove the dependency array.",["330"],"no-global-assign","no-unsafe-negation",{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},"Update the dependencies array to be: [appLoaded, getUser, setAppLoaded, token]",{"range":"335","text":"336"},"Update the dependencies array to be: [fileString, showFile]",{"range":"337","text":"338"},[1520,1522],"[appLoaded, getUser, setAppLoaded, token]",[286,288],"[fileString, showFile]"]