[{"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\index.tsx":"1","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\NotFound.tsx":"4","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\TicketList.tsx":"5","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\home\\HomePage.tsx":"6","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketForm.tsx":"7","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupList.tsx":"8","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\nav\\NavBar.tsx":"9","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\ticketStore.ts":"10","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\groupStore.ts":"11","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\utils\\helperMethods.ts":"12","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\tickets.ts":"13","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"14","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\SearchList.tsx":"15","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\StatusStats.tsx":"16","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupListExplainer.tsx":"17","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupSummary.tsx":"18","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketDetails.tsx":"19","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Form\\GroupForm.tsx":"20","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\TextInput.tsx":"21","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx":"22","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\SelectInput.tsx":"23","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\api\\agent.ts":"24","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\FormCheckbox.tsx":"25","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\rootStore.ts":"26","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\commonStore.ts":"27","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\userStore.ts":"28","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\PrivateRoute.tsx":"29","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\user\\LoginForm.tsx":"30","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx":"31","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\user\\RegisterForm.tsx":"32","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetails.tsx":"33","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupAdminsList.tsx":"34","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailsFooter.tsx":"35","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailedChatFlow.tsx":"36","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\Profile.tsx":"37","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileContent.tsx":"38","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\profileStore.ts":"39","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileMenu.tsx":"40","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx":"41","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx":"42","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx":"43","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx":"44","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileTickets.tsx":"45","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketFullDetails.tsx":"46","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileGroups.tsx":"47","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\stylings\\StatusCircle.tsx":"48","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileDescription.tsx":"49","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileAbout.tsx":"50","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\profile.ts":"51","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupAnnouncement.tsx":"52","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupClickToComment.tsx":"53","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupUploadPhoto.tsx":"54","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailsHeader.tsx":"55","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketComment.tsx":"56","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketAddComment.tsx":"57","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketCommentEdit.tsx":"58","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketUploadPhoto.tsx":"59","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketPhotoContainer.tsx":"60"},{"size":782,"mtime":1610039066216,"results":"61","hashOfConfig":"62"},{"size":425,"mtime":499162500000,"results":"63","hashOfConfig":"62"},{"size":2529,"mtime":1610464572909,"results":"64","hashOfConfig":"62"},{"size":545,"mtime":1607632101504,"results":"65","hashOfConfig":"62"},{"size":4159,"mtime":1610106948139,"results":"66","hashOfConfig":"62"},{"size":2402,"mtime":1610038710878,"results":"67","hashOfConfig":"62"},{"size":5530,"mtime":1611333283412,"results":"68","hashOfConfig":"62"},{"size":4654,"mtime":1610550736221,"results":"69","hashOfConfig":"62"},{"size":1659,"mtime":1609191664375,"results":"70","hashOfConfig":"62"},{"size":9777,"mtime":1611334431245,"results":"71","hashOfConfig":"62"},{"size":11405,"mtime":1611070431895,"results":"72","hashOfConfig":"62"},{"size":528,"mtime":1610038055497,"results":"73","hashOfConfig":"62"},{"size":885,"mtime":1611242288236,"results":"74","hashOfConfig":"62"},{"size":355,"mtime":1607619854304,"results":"75","hashOfConfig":"62"},{"size":2316,"mtime":1608157529649,"results":"76","hashOfConfig":"62"},{"size":1520,"mtime":1609190906900,"results":"77","hashOfConfig":"62"},{"size":424,"mtime":1608046697897,"results":"78","hashOfConfig":"62"},{"size":2063,"mtime":1610545809347,"results":"79","hashOfConfig":"62"},{"size":3034,"mtime":1611335639789,"results":"80","hashOfConfig":"62"},{"size":3909,"mtime":1608655022787,"results":"81","hashOfConfig":"62"},{"size":674,"mtime":1609853879135,"results":"82","hashOfConfig":"62"},{"size":673,"mtime":1608136023105,"results":"83","hashOfConfig":"62"},{"size":785,"mtime":1608136317981,"results":"84","hashOfConfig":"62"},{"size":5930,"mtime":1611333934578,"results":"85","hashOfConfig":"62"},{"size":538,"mtime":1608157389302,"results":"86","hashOfConfig":"62"},{"size":851,"mtime":1610110949165,"results":"87","hashOfConfig":"62"},{"size":825,"mtime":1610461547211,"results":"88","hashOfConfig":"62"},{"size":2773,"mtime":1608654870302,"results":"89","hashOfConfig":"62"},{"size":739,"mtime":1610378738521,"results":"90","hashOfConfig":"62"},{"size":2004,"mtime":1608754819906,"results":"91","hashOfConfig":"62"},{"size":755,"mtime":1608669175238,"results":"92","hashOfConfig":"62"},{"size":2263,"mtime":1608754829611,"results":"93","hashOfConfig":"62"},{"size":4775,"mtime":1611073557532,"results":"94","hashOfConfig":"62"},{"size":1797,"mtime":1611075918315,"results":"95","hashOfConfig":"62"},{"size":1045,"mtime":1611073323893,"results":"96","hashOfConfig":"62"},{"size":3994,"mtime":1610979789018,"results":"97","hashOfConfig":"62"},{"size":1863,"mtime":1610546107358,"results":"98","hashOfConfig":"62"},{"size":696,"mtime":1610185693316,"results":"99","hashOfConfig":"62"},{"size":4024,"mtime":1611329198303,"results":"100","hashOfConfig":"62"},{"size":442,"mtime":1610114000968,"results":"101","hashOfConfig":"62"},{"size":3310,"mtime":1611070878606,"results":"102","hashOfConfig":"62"},{"size":2670,"mtime":1611070571901,"results":"103","hashOfConfig":"62"},{"size":1099,"mtime":1610117914092,"results":"104","hashOfConfig":"62"},{"size":1652,"mtime":1611313895613,"results":"105","hashOfConfig":"62"},{"size":1411,"mtime":1611235387990,"results":"106","hashOfConfig":"62"},{"size":3099,"mtime":1611242806733,"results":"107","hashOfConfig":"62"},{"size":1323,"mtime":1611068189186,"results":"108","hashOfConfig":"62"},{"size":985,"mtime":1610126526344,"results":"109","hashOfConfig":"62"},{"size":1493,"mtime":1610546450790,"results":"110","hashOfConfig":"62"},{"size":2423,"mtime":1610546824016,"results":"111","hashOfConfig":"62"},{"size":616,"mtime":1610381582136,"results":"112","hashOfConfig":"62"},{"size":2783,"mtime":1610981962587,"results":"113","hashOfConfig":"62"},{"size":2906,"mtime":1610980003879,"results":"114","hashOfConfig":"62"},{"size":744,"mtime":1611070669575,"results":"115","hashOfConfig":"62"},{"size":3469,"mtime":1611070432250,"results":"116","hashOfConfig":"62"},{"size":5024,"mtime":1611240933038,"results":"117","hashOfConfig":"62"},{"size":2607,"mtime":1611237097416,"results":"118","hashOfConfig":"62"},{"size":1973,"mtime":1611235477048,"results":"119","hashOfConfig":"62"},{"size":2893,"mtime":1611324776777,"results":"120","hashOfConfig":"62"},{"size":2120,"mtime":1611335081443,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"boqaos",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"124"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"124"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"124"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"124"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"124"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"124"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"124"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\index.tsx",[],["250","251"],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\App.tsx",["252"],"import { autorun } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport React, { Fragment, useContext, useEffect } from 'react';\nimport {\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter,\n} from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport GroupList from '../../features/groups/List/GroupList';\nimport HomePage from '../../features/home/HomePage';\nimport NavBar from '../../features/nav/NavBar';\nimport Profile from '../../features/profiles/Profile';\nimport TicketFullDetails from '../../features/tickets/Details/TicketFullDetails';\nimport TicketForm from '../../features/tickets/Form/TicketForm';\nimport TicketList from '../../features/tickets/List/TicketList';\nimport { RootStoreContext } from '../stores/rootStore';\nimport LoadingComponent from './LoadingComponent';\nimport NotFound from './NotFound';\nimport PrivateRoute from './PrivateRoute';\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const { getUser } = rootStore.userStore;\n\n  useEffect(() => {\n    autorun(() => {\n      if (token && !appLoaded) {\n        console.log('Token: ', token, ' apploaded: ', appLoaded);\n        getUser().finally(() => setAppLoaded());\n        console.log('Token1: ', token, ' apploaded1: ', appLoaded);\n      } else if (!appLoaded) {\n        console.log('Token2: ', token, ' apploaded2: ', appLoaded);\n        setAppLoaded();\n      }\n    });\n  }, []);\n\n  if (!appLoaded) return <LoadingComponent content='Loading app...' />;\n  return (\n    <Fragment>\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: '7em', border: '2px solid black' }}>\n              <Switch>\n                <PrivateRoute path='/issues' component={TicketList} />\n                <PrivateRoute\n                  path='/ticket/:username/:id'\n                  component={TicketFullDetails}\n                />\n                <PrivateRoute path='/groups' component={GroupList} />\n                <PrivateRoute path='/createTicket' component={TicketForm} />\n                <PrivateRoute path='/profile/:username' component={Profile} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n};\n\nexport default withRouter(observer(App));\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\TicketList.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketForm.tsx",["253","254","255"],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupList.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\ticketStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\groupStore.ts",["256"],"import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, observable, runInAction  } from \"mobx\";\r\nimport { createMember } from \"../../features/utils/helperMethods\";\r\nimport agent from \"../api/agent\";\r\nimport { IAnnouncement, IComment, IGroup, IMember } from \"../models/groups\";\r\nimport { IPhoto } from \"../models/profile\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class GroupStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    groupRegistry = new Map();\r\n    loadingGroups = false;\r\n    submittingAnnouncement = false;\r\n    submittingGroup = false;\r\n    selectedGroupId = \"\";\r\n    loadingGroupPhoto = false;\r\n    deletingGroupPhoto = false;\r\n    // Option to not use decorators for setting a ref?\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n\r\n    get isHostOfGroup() {\r\n        // If user is host return true:\r\n        return this.selectedGroup.members.filter((member: IMember) => \r\n            member.isHost && member.username === this.rootStore.userStore.user?.username\r\n        ).length > 0;\r\n    }\r\n\r\n    \r\n    get isHostOrAdminOfGroup() {\r\n        // If user is host return true:\r\n        return this.selectedGroup.members.filter((member: IMember) => \r\n            (member.isHost || member.isAdmin) && member.username === this.rootStore.userStore.user?.username\r\n        ).length > 0;\r\n    }\r\n\r\n    get getGroups() {\r\n        return Array.from(this.groupRegistry.values())\r\n    }\r\n    //@computed\r\n    get groupsByDate() {\r\n        return Array.from(this.groupRegistry.values()).slice().sort((a, b) => Date.parse(a.createdAt) - Date.parse(b.createdAt))\r\n    }\r\n    //@computed\r\n    // This is for Group page Dropdown selection of group names.\r\n    get groupTitles() {\r\n        return Array.from(this.groupRegistry.values())\r\n            .slice()\r\n            .sort((a, b) => a.groupName?.charAt(0).localeCompare(b.groupName.charAt(0)))\r\n            .map((group: IGroup) => ({\"key\": group.id, \"value\":  group.id, \"text\": group.groupName } ) )\r\n    }\r\n\r\n    get selectedGroup() {\r\n        return Array.from(this.groupRegistry.values()).find((grp: IGroup) => grp.id === this.selectedGroupId);\r\n    }\r\n\r\n    get groupTitleForUser() {\r\n        return Array.from(this.groupRegistry.values())\r\n            .slice()\r\n            .sort((a, b) => a.groupName?.charAt(0).localeCompare(b.groupName.charAt(0)))\r\n            .map((group: IGroup) => \r\n                group.members!.filter((member) => \r\n                    member.username === this.rootStore.userStore.user?.username  \r\n                    ) && ({\"key\": group.id, \"value\":  group.id, \"text\": group.groupName,  \"photo\": group.photos?.slice(0,1)[0] } ));\r\n    }\r\n\r\n    createHubConnection = (groupId: string) => {\r\n        // process.env.REACT_APP_API_CHAT_URL!\r\n        // Prevent this from opening two connections with the same token.\r\n        try {\r\n            this.hubConnection = new HubConnectionBuilder().withUrl(\"http://localhost:5000/chat\", {\r\n                accessTokenFactory: () => this.rootStore.commonStore.token!\r\n            })\r\n            .configureLogging(LogLevel.Information).build();\r\n            //console.log(\"Starting hub connection: \", this.selectedGroupId!);\r\n            this.hubConnection\r\n                .start()\r\n                .then(() => console.log(this.hubConnection!.state))\r\n                .then(() => {\r\n                    if(this.hubConnection!.state === \"Connected\") {\r\n                    this.hubConnection!.invoke(\"AddToGroup\", groupId)\r\n                    }\r\n                })\r\n            .catch(error => console.log(\"Error establishing connection: \", error));\r\n            // This is being called twice when coming from profile/profileGroups link\r\n\r\n                this.hubConnection?.on(\"ReceiveComment\", comment => {\r\n\r\n                    runInAction(() => {\r\n                        this.selectedGroup!.comments.push(comment);\r\n                    });\r\n                })\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }  \r\n\r\n    stopHubConnection = async () => {\r\n        try {\r\n            if (this.hubConnection) {\r\n                //console.log(\"inside \", this.selectedGroupId, \" Connection.state = \", this.hubConnection!.state);\r\n\r\n                if(this.hubConnection!.state === (\"Connected\" || \"Connecting\")) {\r\n                    await this.hubConnection.invoke(\"RemoveFromGroup\", this.selectedGroupId!).then(() => {\r\n                        //console.log(\"Stopping hub connection: \", this.selectedGroupId!);\r\n                      this.hubConnection!.stop();\r\n                    }).then(() => console.log(\"Connection stopped\")).catch(err => console.log(err))\r\n                }\r\n            } \r\n\r\n        } catch (error) {\r\n            runInAction(() => console.log(error));\r\n        }\r\n    }\r\n  \r\n    addComment = async (values: any) =>  {\r\n        values.groupId = this.selectedGroupId!;\r\n        try {\r\n          await this.hubConnection!.invoke(\"SendComment\", values);\r\n        } catch(error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n\r\n    addAnnouncement = async (groupId: string, body: IAnnouncement) =>  {\r\n        this.submittingAnnouncement = true;\r\n        try {\r\n          await agent.Groups.addAnnouncement(groupId, body);\r\n          runInAction(() => {\r\n              // Add announcement to the groups announcement array\r\n              this.groupRegistry.get(groupId).announcements.push(body);\r\n              // flip flag\r\n              this.submittingAnnouncement = false;\r\n          })\r\n        } catch(error) {\r\n            runInAction(() => {\r\n                this.submittingAnnouncement = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }   \r\n\r\n    deleteAnnouncement = async (groupId: string, announcementId: string) => {\r\n        this.submittingAnnouncement = true;\r\n        try {\r\n            await agent.Groups.delAnnouncement(groupId, announcementId);\r\n            runInAction(() => {\r\n                this.groupRegistry.get(groupId).announcements = this.groupRegistry.get(groupId).announcements.filter((announcement: IAnnouncement) => announcement.id !== announcementId)\r\n                this.submittingAnnouncement = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingAnnouncement = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    uploadPhoto = async (groupId: string, file: Blob) => {\r\n        this.loadingGroupPhoto = true;\r\n        try {\r\n            const photo = await agent.Groups.uploadPhoto(groupId, file);\r\n            runInAction(() => {\r\n                this.groupRegistry.get(groupId).photos.push(photo);\r\n                this.loadingGroupPhoto = false;\r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingGroupPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (groupId: string, photo: IPhoto) => {\r\n        this.deletingGroupPhoto = true;\r\n        try {\r\n            await agent.Groups.deletePhoto(groupId, photo.id);\r\n            runInAction(() => {\r\n                this.groupRegistry!.get(groupId).photos = [];\r\n                this.deletingGroupPhoto = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.deletingGroupPhoto = false;\r\n            })\r\n        }\r\n    }\r\n  \r\n    addAdminComment = async (values: any) => {\r\n        let sendValues = {groupId: \"\", username: \"\", body: \"\"};\r\n        sendValues.groupId = this.selectedGroupId!;\r\n        sendValues.username = values.username;\r\n        sendValues.body = `User ${values.username} has ${values.status} the group!`;\r\n        //console.log(\"SendAdminComment called now with: \", sendValues);\r\n        try {\r\n          await this.hubConnection!.invoke(\"SendAdminComment\", sendValues);\r\n        } catch(error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n    loadGroups = async () => {\r\n        this.loadingGroups = true;\r\n        try {\r\n            const groups = await agent.Groups.list();\r\n            runInAction(() => {\r\n                groups.forEach((group) => {\r\n                    group.createdAt = group.createdAt!.split('.')[0]\r\n                    this.groupRegistry.set(group.id, group)\r\n                })\r\n                this.loadingGroups = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingGroups = false;\r\n                console.log(\"Error loading group: \", error)\r\n            })\r\n        }\r\n    }\r\n\r\n    createGroup = async (group: IGroup) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            console.log(\"CreateGroup: \", group);\r\n            await agent.Groups.create(group);\r\n            let members = [];\r\n            const member = createMember(this.rootStore.userStore.user!);\r\n            member.isHost = true;\r\n            members.push(member);\r\n            group.members = members;\r\n            group.comments = [];\r\n            group.announcements = [];\r\n            group.photos = [];\r\n            runInAction(() => {\r\n                this.groupRegistry.set(group.id, group);\r\n                this.submittingGroup = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in createGroup: \", error);\r\n            })\r\n        }\r\n    }\r\n\r\n    setSelectedGroup = (groupId: string) => {\r\n        try {\r\n            this.selectedGroupId = groupId;\r\n        } catch (error) {\r\n            console.log(\"Error setting selected group: \", error);\r\n        }\r\n    }\r\n\r\n    setSelectedGroupEmpty = () => {\r\n        try {\r\n            this.selectedGroupId = \"\";\r\n        } catch (error) {\r\n            console.log(\"Error setting selected group Empty : \", error);\r\n        }\r\n    } \r\n\r\n    joinGroup = async (groupId: string) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            await agent.Groups.join(groupId);\r\n            runInAction(() => {\r\n                // Add user to memberlist for grp\r\n                this.selectedGroup.members.push(this.rootStore.userStore.user);\r\n                this.submittingGroup = false;\r\n            })\r\n        } catch(err) {\r\n            runInAction(() => {\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in joinGroup: \", err);\r\n            })\r\n        }\r\n    }\r\n\r\n    leaveGroup = async (groupId: string) => {\r\n        this.submittingGroup = true;\r\n        try {\r\n            await agent.Groups.leave(groupId);\r\n            runInAction(() => {\r\n\r\n                this.selectedGroup.members  = this.selectedGroup.members.filter((member: IMember) => \r\n                    member.username !== this.rootStore.userStore.user?.username\r\n                );\r\n                this.selectedGroupId = \"\";\r\n                this.submittingGroup = false;\r\n            })\r\n        } catch(err) {\r\n            runInAction(() => {\r\n                this.selectedGroupId = \"\";\r\n                this.submittingGroup = false;\r\n                console.log(\"Error in leaveGroup: \", err);\r\n            })\r\n        }\r\n    }\r\n}","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\utils\\helperMethods.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\tickets.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\SearchList.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\List\\StatusStats.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupListExplainer.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\List\\GroupSummary.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketDetails.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Form\\GroupForm.tsx",["257"],"import React, { useContext, useState } from 'react';\r\nimport { Button, Form, Segment } from 'semantic-ui-react';\r\nimport { IGroup } from '../../../app/models/groups';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport FormCheckbox from '../../../app/common/form/FormCheckbox';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\n// requirement fields for validation in form.\r\nconst required = (value: any) => (value ? undefined : 'Required');\r\nconst minLength = (min: any) => (value: any) =>\r\n  value.length > min || value >= min\r\n    ? undefined\r\n    : `Should be atleast ${min} characters long.`;\r\nconst composeValidators = (...validators: any) => (value: string) =>\r\n  validators.reduce(\r\n    (error: any, validator: any) => error || validator(value),\r\n    undefined\r\n  );\r\n\r\ninterface IProps {\r\n  setCreatingGroup: (flag: boolean) => void;\r\n  setSelectedGroup: (flag: any) => void;\r\n}\r\n\r\nconst GroupForm: React.FC<IProps> = ({\r\n  setCreatingGroup,\r\n  setSelectedGroup,\r\n}) => {\r\n  const initializeForm = () => {\r\n    return {\r\n      id: '',\r\n      groupName: '',\r\n      description: '',\r\n      isPublic: true,\r\n      createdAt: new Date().toISOString(),\r\n      open: 0,\r\n      closed: 0,\r\n      verify: 0,\r\n    };\r\n  };\r\n  const { groupStore } = useContext(RootStoreContext);\r\n  const [group, setGroup] = useState<IGroup>(initializeForm);\r\n\r\n  const handleFinalFormSubmit = async (value: any) => {\r\n    if (group.id.length === 0) {\r\n      // value is an observer so dont flip it directly.\r\n      const boolish = !value.isPublic;\r\n      const newGroup: IGroup = {\r\n        ...group,\r\n        id: uuid(),\r\n        groupName: value.groupName,\r\n        description: value.description,\r\n        isPublic: boolish,\r\n      };\r\n      //Create a new group\r\n      await groupStore.createGroup(newGroup);\r\n      console.log('Group created successfully');\r\n      setSelectedGroup(newGroup.id);\r\n      setCreatingGroup(false);\r\n    } else {\r\n      // Editing existing ticket.\r\n      //editGroup(newGroup);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <h3 style={{ justifyContent: 'center' }}>Create a new Group</h3>\r\n      <FinalForm\r\n        initialValues={group}\r\n        onSubmit={handleFinalFormSubmit}\r\n        render={({ handleSubmit, invalid, pristine }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <Field\r\n              validate={composeValidators(required, minLength(2))}\r\n              name='groupName'\r\n              placeholder='Group Name'\r\n              value={group.groupName}\r\n              component={TextInput}\r\n            />\r\n            <Field\r\n              name='isPublic'\r\n              type='checkbox'\r\n              label='Make Group Private (hidden from search)'\r\n              component={FormCheckbox}\r\n            />\r\n            <Field\r\n              validate={composeValidators(required, minLength(10))}\r\n              rows={2}\r\n              name='description'\r\n              placeholder='Description'\r\n              value={group.description}\r\n              component={TextAreaInput}\r\n            />\r\n            <Button\r\n              disabled={groupStore.submittingGroup || invalid || pristine}\r\n              loading={groupStore.submittingGroup}\r\n              type='submit'\r\n              positive\r\n            >\r\n              Submit Group\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setCreatingGroup(false);\r\n                setSelectedGroup(null);\r\n              }}\r\n              type='button'\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(GroupForm);\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\TextInput.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\SelectInput.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\api\\agent.ts",["258"],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\FormCheckbox.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\rootStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\commonStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\userStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\layout\\PrivateRoute.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\user\\LoginForm.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\user\\RegisterForm.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetails.tsx",["259","260","261","262"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  Divider,\r\n  Item,\r\n  Segment,\r\n  Image,\r\n  Header,\r\n  Grid,\r\n  Popup,\r\n} from 'semantic-ui-react';\r\n\r\nimport { IGroup, IMember } from '../../../app/models/groups';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport GroupAdminsList from './GroupAdminsList';\r\nimport GroupAnnouncement from './GroupAnnouncement';\r\nimport GroupClickToComment from './GroupClickToComment';\r\nimport GroupDetailedChatFlow from './GroupDetailedChatFlow';\r\nimport GroupDetailsFooter from './GroupDetailsFooter';\r\nimport GroupDetailsHeader from './GroupDetailsHeader';\r\nimport GroupUploadPhoto from './GroupUploadPhoto';\r\n\r\ninterface IProps {\r\n  group: IGroup;\r\n}\r\n\r\nconst GroupDetails: React.FC<IProps> = ({ group }) => {\r\n  const { groupName, description, id, members, photos } = group;\r\n  const { groupStore } = useContext(RootStoreContext);\r\n  const {\r\n    stopHubConnection,\r\n    leaveGroup,\r\n    submittingGroup,\r\n    isHostOfGroup,\r\n    createHubConnection,\r\n    selectedGroupId,\r\n    isHostOrAdminOfGroup,\r\n    deleteAnnouncement,\r\n    submittingAnnouncement,\r\n    uploadPhoto,\r\n    deletePhoto,\r\n    loadingGroupPhoto,\r\n    deletingGroupPhoto,\r\n  } = groupStore;\r\n  const [isAddingPhoto, setIsAddingPhoto] = useState(false);\r\n  // Clean up when grouplist -> chat works.\r\n  useEffect(() => {\r\n    console.log('GroupDetails called');\r\n    createHubConnection(selectedGroupId);\r\n    return () => {\r\n      stopHubConnection();\r\n    };\r\n  }, [createHubConnection, selectedGroupId, stopHubConnection]);\r\n\r\n  return (\r\n    <Item.Group\r\n      divided\r\n      style={{\r\n        border: '1px solid black',\r\n        margin: '10px',\r\n      }}\r\n    >\r\n      <Item>\r\n        <Item.Content\r\n          style={{\r\n            margin: '10px',\r\n          }}\r\n          verticalAlign='middle'\r\n        >\r\n          <Item>\r\n            <Item.Content\r\n              style={{\r\n                margin: '10px',\r\n              }}\r\n            >\r\n              <GroupDetailsHeader\r\n                groupId={selectedGroupId}\r\n                deletePhoto={deletePhoto}\r\n                groupName={groupName}\r\n                photo={{\r\n                  id: photos ? photos?.slice(0, 1)[0]?.id : undefined,\r\n                  url: photos ? photos?.slice(0, 1)[0]?.url : undefined,\r\n                }}\r\n                isHostOrAdminOfGroup={isHostOrAdminOfGroup}\r\n                loadingGroupPhoto={loadingGroupPhoto}\r\n                deletingGroupPhoto={deletingGroupPhoto}\r\n                setIsAddingPhoto={setIsAddingPhoto}\r\n                isAddingPhoto={isAddingPhoto}\r\n              />\r\n\r\n              <Segment clearing>\r\n                <Item.Description>{description} </Item.Description>\r\n              </Segment>\r\n              {isHostOrAdminOfGroup && isAddingPhoto && (\r\n                <GroupUploadPhoto\r\n                  groupId={selectedGroupId}\r\n                  uploadPhoto={uploadPhoto}\r\n                  loading={loadingGroupPhoto}\r\n                  setIsAddingPhoto={setIsAddingPhoto}\r\n                />\r\n              )}\r\n              <Item.Description>\r\n                <Segment clearing attached secondary style={{ padding: '6px' }}>\r\n                  <GroupAdminsList\r\n                    members={members!.filter(\r\n                      (member: IMember) => member.isAdmin || member.isHost\r\n                    )}\r\n                    isHostOrAdmin={isHostOrAdminOfGroup}\r\n                  />\r\n                </Segment>\r\n                {isHostOrAdminOfGroup && (\r\n                  <GroupClickToComment isAnnouncement={true} />\r\n                )}\r\n                {group.announcements!.length > 0 && (\r\n                  <GroupAnnouncement\r\n                    groupId={selectedGroupId}\r\n                    announcements={group.announcements}\r\n                    isHostOrAdminOfGroup={isHostOrAdminOfGroup}\r\n                    deleteAnnouncement={deleteAnnouncement}\r\n                    submittingAnnouncement={submittingAnnouncement}\r\n                  />\r\n                )}\r\n              </Item.Description>\r\n            </Item.Content>\r\n          </Item>\r\n          <Divider />\r\n          <GroupDetailedChatFlow />\r\n          <Item.Content>\r\n            <Item.Extra>\r\n              <GroupDetailsFooter group={group} />\r\n            </Item.Extra>\r\n            <Button\r\n              loading={submittingGroup}\r\n              negative\r\n              disabled={isHostOfGroup}\r\n              onClick={() => leaveGroup(id)}\r\n            >\r\n              Leave Group\r\n            </Button>\r\n          </Item.Content>\r\n        </Item.Content>\r\n      </Item>\r\n    </Item.Group>\r\n  );\r\n};\r\n\r\nexport default observer(GroupDetails);\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupAdminsList.tsx",["263"],"import { group } from 'console';\r\nimport React from 'react';\r\nimport { Image, List, Popup, Dropdown } from 'semantic-ui-react';\r\nimport { IMember } from '../../../app/models/groups';\r\n\r\ninterface IProps {\r\n  members: IMember[];\r\n  isHostOrAdmin: boolean;\r\n}\r\n\r\nconst styles = {\r\n  borderColor: 'orange',\r\n  borderWidth: 2,\r\n};\r\n\r\nconst getOptions = (members: any) => {\r\n  return members.map((member: IMember) => ({\r\n    key: member.username,\r\n    text: member.displayName,\r\n    value: member.username,\r\n    image: { avatar: false, src: member.image },\r\n  }));\r\n};\r\n\r\nconst GroupAdminsList: React.FC<IProps> = ({ members, isHostOrAdmin }) => {\r\n  return (\r\n    <div>\r\n      <List horizontal relaxed='very' floated='left'>\r\n        <List.Item>Admins: </List.Item>\r\n        {members.map((member) => (\r\n          <List.Item key={member.username}>\r\n            <Popup\r\n              header={member.displayName}\r\n              trigger={\r\n                <Image\r\n                  bordered\r\n                  style={member.isHost ? styles : null}\r\n                  size='mini'\r\n                  circular\r\n                  src={member.image || '/assets/user.png'}\r\n                />\r\n              }\r\n            />\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n      {isHostOrAdmin && (\r\n        <List horizontal relaxed='very' floated='right'>\r\n          <List.Item>\r\n            <Dropdown\r\n              className='icon'\r\n              icon='add'\r\n              style={{ margin: '0px', paddingRight: '3px', paddingTop: '10px' }}\r\n              labeled\r\n              selection\r\n              placeholder='Promote Member'\r\n              options={getOptions(members)}\r\n            />\r\n          </List.Item>\r\n        </List>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupAdminsList;\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailsFooter.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailedChatFlow.tsx",["264","265","266","267","268","269","270","271","272"],"import React, { Fragment, useContext, useEffect, useState } from 'react';\r\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Link } from 'react-router-dom';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { formatDistance } from 'date-fns';\r\nimport GroupClickToComment from './GroupClickToComment';\r\n\r\nconst GroupDetailedChatFlow = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const [shouldComment, setShouldComment] = useState(false);\r\n  const {\r\n    createHubConnection,\r\n    stopHubConnection,\r\n    addComment,\r\n    addAdminComment,\r\n    selectedGroup,\r\n  } = rootStore.groupStore;\r\n\r\n  useEffect(() => {\r\n    // Is this firing twice?\r\n    // We already have a connection, dont start a new one.\r\n    // This fires twice when from profile\r\n    // Once when rendeirng groupList -> grouPDetailedChat\r\n    // Once when groupList loadGroups() has loaded and this rerenders because this uses groups.\r\n    async function gottaCreateHub() {\r\n      await createHubConnection(selectedGroup!.id);\r\n    }\r\n    //gottaCreateHub();\r\n    return () => {\r\n      stopHubConnection();\r\n    };\r\n  }, [stopHubConnection, createHubConnection, selectedGroup]);\r\n\r\n  const submitComment = async (val: any) => {\r\n    try {\r\n      // This doesnt work.\r\n      // TO receive messages before commenting\r\n      // you need an already established connection dumbfuck\r\n      await addComment(val);\r\n      setShouldComment(false);\r\n    } catch (error) {\r\n      console.log('Error catched submitting comment: ', error);\r\n    }\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        size='mini'\r\n        textAlign='center'\r\n        attached='top'\r\n        inverted\r\n        style={{\r\n          border: 'none',\r\n          background: 'linear-gradient(135deg, #047F83 0%, #000000 99%)',\r\n        }}\r\n      >\r\n        <Header size='medium'>{selectedGroup.groupName} chat</Header>\r\n      </Segment>\r\n      <Segment\r\n        attached\r\n        textAlign='left'\r\n        style={{ overflow: 'auto', maxHeight: 320 }}\r\n      >\r\n        <Comment.Group>\r\n          <GroupClickToComment isAnnouncement={false} />\r\n\r\n          {selectedGroup &&\r\n            selectedGroup.comments &&\r\n            selectedGroup.comments\r\n              .slice()\r\n              .reverse()\r\n              .map((comment: any) =>\r\n                comment.username !== null ? (\r\n                  <Comment key={comment.id}>\r\n                    <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                    <Comment.Content>\r\n                      <Comment.Author\r\n                        as={Link}\r\n                        to={`/profile/${comment.username}`}\r\n                      >\r\n                        {comment.displayName}\r\n                      </Comment.Author>\r\n                      <Comment.Metadata>\r\n                        <div>\r\n                          {formatDistance(\r\n                            new Date(comment.createdAt),\r\n                            new Date()\r\n                          )}\r\n                        </div>\r\n                      </Comment.Metadata>\r\n                      <Comment.Text>{comment.body}</Comment.Text>\r\n                    </Comment.Content>\r\n                  </Comment>\r\n                ) : (\r\n                  <Comment key={comment.id}>\r\n                    <Comment.Content>\r\n                      <Comment.Text\r\n                        style={{ fontStyle: 'italic', color: 'green' }}\r\n                      >\r\n                        {comment.body}\r\n                      </Comment.Text>\r\n                    </Comment.Content>\r\n                  </Comment>\r\n                )\r\n              )}\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(GroupDetailedChatFlow);\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\Profile.tsx",["273","274"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Grid, Header, Item, Segment, Image } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileDescription from './ProfileDescription';\r\n\r\ninterface RouteParams {\r\n  username: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nconst Profile: React.FC<IProps> = ({ match }) => {\r\n  const { profileStore, groupStore } = useContext(RootStoreContext);\r\n  const { loadingProfile, profile, loadProfile } = profileStore;\r\n  const { loadGroups, loadingGroups } = groupStore;\r\n\r\n  useEffect(() => {\r\n    console.log('One');\r\n    async function loadstuff() {\r\n      await loadProfile(match.params.username);\r\n      await loadGroups();\r\n    }\r\n    loadstuff();\r\n  }, [loadProfile, match, loadGroups]);\r\n\r\n  if (loadingProfile || loadingGroups)\r\n    return <LoadingComponent content='Loading profile...' />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        <Segment>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Content verticalAlign='top'>\r\n                <ProfileDescription\r\n                  userImage={profile!.image}\r\n                  displayName={profile!.displayName}\r\n                  description={profile!.bio}\r\n                />\r\n              </Item.Content>\r\n            </Item>\r\n            <Item>\r\n              <Item.Content verticalAlign='top'>\r\n                <ProfileContent />\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(Profile);\r\n","C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileContent.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\stores\\profileStore.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileMenu.tsx",["275","276","277","278","279","280","281"],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx",["282"],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileTickets.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketFullDetails.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileGroups.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\common\\stylings\\StatusCircle.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileDescription.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\profiles\\ProfileAbout.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\app\\models\\profile.ts",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupAnnouncement.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupClickToComment.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupUploadPhoto.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\groups\\Details\\GroupDetailsHeader.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketComment.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketAddComment.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Details\\TicketCommentEdit.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketUploadPhoto.tsx",[],"C:\\Users\\bigboss\\BuggHunter\\BuggHunter\\client-app\\src\\features\\tickets\\Form\\TicketPhotoContainer.tsx",[],{"ruleId":"283","replacedBy":"284"},{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","severity":1,"message":"288","line":39,"column":6,"nodeType":"289","endLine":39,"endColumn":8,"suggestions":"290"},{"ruleId":"291","severity":1,"message":"292","line":34,"column":18,"nodeType":"293","messageId":"294","endLine":34,"endColumn":27},{"ruleId":"291","severity":1,"message":"295","line":39,"column":10,"nodeType":"293","messageId":"294","endLine":39,"endColumn":22},{"ruleId":"291","severity":1,"message":"296","line":39,"column":24,"nodeType":"293","messageId":"294","endLine":39,"endColumn":39},{"ruleId":"291","severity":1,"message":"297","line":5,"column":25,"nodeType":"293","messageId":"294","endLine":5,"endColumn":33},{"ruleId":"291","severity":1,"message":"298","line":46,"column":17,"nodeType":"293","messageId":"294","endLine":46,"endColumn":25},{"ruleId":"299","severity":1,"message":"300","line":126,"column":1,"nodeType":"301","endLine":126,"endColumn":52},{"ruleId":"291","severity":1,"message":"302","line":8,"column":3,"nodeType":"293","messageId":"294","endLine":8,"endColumn":8},{"ruleId":"291","severity":1,"message":"303","line":9,"column":3,"nodeType":"293","messageId":"294","endLine":9,"endColumn":9},{"ruleId":"291","severity":1,"message":"304","line":10,"column":3,"nodeType":"293","messageId":"294","endLine":10,"endColumn":7},{"ruleId":"291","severity":1,"message":"305","line":11,"column":3,"nodeType":"293","messageId":"294","endLine":11,"endColumn":8},{"ruleId":"291","severity":1,"message":"306","line":1,"column":10,"nodeType":"293","messageId":"294","endLine":1,"endColumn":15},{"ruleId":"291","severity":1,"message":"307","line":2,"column":27,"nodeType":"293","messageId":"294","endLine":2,"endColumn":31},{"ruleId":"291","severity":1,"message":"308","line":2,"column":33,"nodeType":"293","messageId":"294","endLine":2,"endColumn":39},{"ruleId":"291","severity":1,"message":"309","line":4,"column":18,"nodeType":"293","messageId":"294","endLine":4,"endColumn":27},{"ruleId":"291","severity":1,"message":"310","line":4,"column":29,"nodeType":"293","messageId":"294","endLine":4,"endColumn":34},{"ruleId":"291","severity":1,"message":"311","line":6,"column":8,"nodeType":"293","messageId":"294","endLine":6,"endColumn":21},{"ruleId":"291","severity":1,"message":"312","line":13,"column":10,"nodeType":"293","messageId":"294","endLine":13,"endColumn":23},{"ruleId":"291","severity":1,"message":"313","line":18,"column":5,"nodeType":"293","messageId":"294","endLine":18,"endColumn":20},{"ruleId":"291","severity":1,"message":"314","line":28,"column":20,"nodeType":"293","messageId":"294","endLine":28,"endColumn":34},{"ruleId":"291","severity":1,"message":"315","line":37,"column":9,"nodeType":"293","messageId":"294","endLine":37,"endColumn":22},{"ruleId":"291","severity":1,"message":"303","line":4,"column":16,"nodeType":"293","messageId":"294","endLine":4,"endColumn":22},{"ruleId":"291","severity":1,"message":"302","line":4,"column":39,"nodeType":"293","messageId":"294","endLine":4,"endColumn":44},{"ruleId":"291","severity":1,"message":"316","line":1,"column":17,"nodeType":"293","messageId":"294","endLine":1,"endColumn":25},{"ruleId":"291","severity":1,"message":"303","line":2,"column":16,"nodeType":"293","messageId":"294","endLine":2,"endColumn":22},{"ruleId":"291","severity":1,"message":"317","line":2,"column":24,"nodeType":"293","messageId":"294","endLine":2,"endColumn":28},{"ruleId":"291","severity":1,"message":"318","line":2,"column":30,"nodeType":"293","messageId":"294","endLine":2,"endColumn":34},{"ruleId":"291","severity":1,"message":"302","line":2,"column":45,"nodeType":"293","messageId":"294","endLine":2,"endColumn":50},{"ruleId":"291","severity":1,"message":"319","line":3,"column":10,"nodeType":"293","messageId":"294","endLine":3,"endColumn":18},{"ruleId":"291","severity":1,"message":"320","line":4,"column":8,"nodeType":"293","messageId":"294","endLine":4,"endColumn":22},{"ruleId":"291","severity":1,"message":"308","line":3,"column":24,"nodeType":"293","messageId":"294","endLine":3,"endColumn":30},"no-native-reassign",["321"],"no-negated-in-lhs",["322"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appLoaded', 'getUser', 'setAppLoaded', and 'token'. Either include them or remove the dependency array.","ArrayExpression",["323"],"@typescript-eslint/no-unused-vars","'setTicket' is assigned a value but never used.","Identifier","unusedVar","'isImgInFocus' is assigned a value but never used.","'setIsImgInFocus' is assigned a value but never used.","'IComment' is defined but never used.","'setGroup' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Image' is defined but never used.","'Header' is defined but never used.","'Grid' is defined but never used.","'Popup' is defined but never used.","'group' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'FinalForm' is defined but never used.","'Field' is defined but never used.","'TextAreaInput' is defined but never used.","'shouldComment' is assigned a value but never used.","'addAdminComment' is assigned a value but never used.","'gottaCreateHub' is defined but never used.","'submitComment' is assigned a value but never used.","'useState' is defined but never used.","'Item' is defined but never used.","'Menu' is defined but never used.","'IProfile' is defined but never used.","'ProfileContent' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},"Update the dependencies array to be: [appLoaded, getUser, setAppLoaded, token]",{"range":"326","text":"327"},[1520,1522],"[appLoaded, getUser, setAppLoaded, token]"]